{"cells":[{"cell_type":"markdown","metadata":{"id":"C0bZS3P2yJuE"},"source":["# 10. Milestone Project 3: Time series forecasting in TensorFlow (BitPredict üí∞üìà)\n","\n","The goal of this notebook is to get you familiar with working with time series data.\n","\n","We're going to be building a series of models in an attempt to predict the price of Bitcoin. \n","\n","Welcome to Milestone Project 3, BitPredict üí∞üìà!\n","\n","\u003e üîë **Note:** ‚ö†Ô∏è This is not financial advice, as you'll see time series forecasting for stock market prices is actually quite terrible.\n","\n","## What is a time series problem?\n","\n","Time series problems deal with data over time.\n","\n","Such as, the number of staff members in a company over 10-years, sales of computers for the past 5-years, electricity usage for the past 50-years.\n","\n","The timeline can be short (seconds/minutes) or long (years/decades). And the problems you might investigate using can usually be broken down into two categories.\n","\n","![example time series problems](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-example-time-series-problems.png)\n","\n","| Problem Type | Examples | Output |\n","| ----- | ----- | ----- |\n","| **Classification** | Anomaly detection, time series identification (where did this time series come from?) | Discrete (a label) |\n","| **Forecasting** | Predicting stock market prices, forecasting future demand for a product, stocking inventory requirements | Continuous (a number) |\n","\n","In both cases above, a supervised learning approach is often used. Meaning, you'd have some example data and a label assosciated with that data.\n","\n","For example, in forecasting the price of Bitcoin, your data could be the historical price of Bitcoin for the past month and the label could be today's price (the label can't be tomorrow's price because that's what we'd want to predict).\n","\n","Can you guess what kind of problem BitPredict üí∞üìà is?\n","\n","## What we're going to cover\n","\n","Are you ready?\n","\n","We've got a lot to go through. \n","\n","* Get time series data (the historical price of Bitcoin)\n","  * Load in time series data using pandas/Python's CSV module\n","* Format data for a time series problem\n","  * Creating training and test sets (the wrong way)\n","  * Creating training and test sets (the right way)\n","  * Visualizing time series data\n","  * Turning time series data into a supervised learning problem (windowing)\n","  * Preparing univariate and multivariate (more than one variable) data\n","* Evaluating a time series forecasting model\n","* Setting up a series of deep learning modelling experiments\n","  * Dense (fully-connected) networks\n","  * Sequence models (LSTM and 1D CNN)\n","  * Ensembling (combining multiple models together)\n","  * Multivariate models\n","  * Replicating the N-BEATS algorithm using TensorFlow layer subclassing\n","* Creating a modelling checkpoint to save the best performing model during training\n","* Making predictions (forecasts) with a time series model\n","* Creating prediction intervals for time series model forecasts\n","* Discussing two different types of uncertainty in machine learning (data uncertainty and model uncertainty)\n","* Demonstrating why forecasting in an open system is BS (the turkey problem) "]},{"cell_type":"markdown","metadata":{"id":"zrvQKA57ztbp"},"source":["## Get data\n","\n","To build a time series forecasting model, the first thing we're going to need is data.\n","\n","And since we're trying to predict the price of Bitcoin, we'll need Bitcoin data.\n","\n","Specifically, we're going to get the prices of Bitcoin from 01 October 2013 to 18 May 2021.\n","\n","Why these dates?\n","\n","Because 01 October 2013 is when our data source ([Coindesk](https://www.coindesk.com/price/bitcoin)) started recording the price of Bitcoin and 18 May 2021 is when this notebook was created.\n","\n","If you're going through this notebook at a later date, you'll be able to use what you learn to predict on later dates of Bitcoin, you'll just have to adjust the data source.\n","\n","\u003e üìñ **Resource:** To get the Bitcoin historical data, I went to the [Coindesk page for Bitcoin prices](https://www.coindesk.com/price/bitcoin), clicked on \"all\" and then clicked on \"Export data\" and selected \"CSV\". \n","\n","You can find the data we're going to use on [GitHub](https://github.com/mrdbourke/tensorflow-deep-learning/blob/main/extras/BTC_USD_2013-10-01_2021-05-18-CoinDesk.csv).\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":392,"status":"ok","timestamp":1642352083501,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Vj2KgEOmz7Kq","outputId":"ef42254c-a89e-4253-d49c-be0df610f4e1"},"outputs":[{"name":"stdout","output_type":"stream","text":["--2022-01-16 16:54:43--  https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/BTC_USD_2013-10-01_2021-05-18-CoinDesk.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 178509 (174K) [text/plain]\n","Saving to: ‚ÄòBTC_USD_2013-10-01_2021-05-18-CoinDesk.csv‚Äô\n","\n","\r          BTC_USD_2   0%[                    ]       0  --.-KB/s               \rBTC_USD_2013-10-01_ 100%[===================\u003e] 174.33K  --.-KB/s    in 0.005s  \n","\n","2022-01-16 16:54:43 (32.1 MB/s) - ‚ÄòBTC_USD_2013-10-01_2021-05-18-CoinDesk.csv‚Äô saved [178509/178509]\n","\n"]}],"source":["#Download Bitcoin historical data from GitHub\n","!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/BTC_USD_2013-10-01_2021-05-18-CoinDesk.csv "]},{"cell_type":"markdown","metadata":{"id":"WGUIYti4z__E"},"source":["### Importing time series data with pandas\n","Now we've got some data to work with, let's import it using pandas so we can visualize it.\n","\n","Because our data is in **CSV (comma separated values)** format (a very common data format for time series), we'll use the pandas [`read_csv()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) function.\n","\n","And because our data has a date component, we'll tell pandas to parse the dates using the `parse_dates` parameter passing it the name our of the date column (\"Date\")."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":139,"status":"ok","timestamp":1642352181400,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"YLc85G7j0GHl","outputId":"b071d60a-16fb-4038-86e9-08c8942c661c"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-cae8de4f-1c80-45a7-8b8b-c4a007fe2519\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eCurrency\u003c/th\u003e\n","      \u003cth\u003eClosing Price (USD)\u003c/th\u003e\n","      \u003cth\u003e24h Open (USD)\u003c/th\u003e\n","      \u003cth\u003e24h High (USD)\u003c/th\u003e\n","      \u003cth\u003e24h Low (USD)\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003eBTC\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003e124.30466\u003c/td\u003e\n","      \u003ctd\u003e124.75166\u003c/td\u003e\n","      \u003ctd\u003e122.56349\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003eBTC\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003e125.75850\u003c/td\u003e\n","      \u003ctd\u003e123.63383\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003eBTC\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e125.66566\u003c/td\u003e\n","      \u003ctd\u003e83.32833\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003eBTC\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e118.67500\u003c/td\u003e\n","      \u003ctd\u003e107.05816\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003eBTC\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e121.93633\u003c/td\u003e\n","      \u003ctd\u003e118.00566\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cae8de4f-1c80-45a7-8b8b-c4a007fe2519')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-cae8de4f-1c80-45a7-8b8b-c4a007fe2519 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cae8de4f-1c80-45a7-8b8b-c4a007fe2519');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["           Currency  Closing Price (USD)  ...  24h High (USD)  24h Low (USD)\n","Date                                      ...                               \n","2013-10-01      BTC            123.65499  ...       124.75166      122.56349\n","2013-10-02      BTC            125.45500  ...       125.75850      123.63383\n","2013-10-03      BTC            108.58483  ...       125.66566       83.32833\n","2013-10-04      BTC            118.67466  ...       118.67500      107.05816\n","2013-10-05      BTC            121.33866  ...       121.93633      118.00566\n","\n","[5 rows x 5 columns]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as pd\n","#Parse dates and set date column to index\n","df = pd.read_csv(\"/content/BTC_USD_2013-10-01_2021-05-18-CoinDesk.csv\",\n","                 parse_dates = [\"Date\"],\n","                 index_col = [\"Date\"]) #Parse the date column (tell pands column 1 is a datetime)\n","df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":145,"status":"ok","timestamp":1642352192590,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"hscFfkNN0X9g","outputId":"2311f4fb-11f2-47cf-971f-2fa578789c14"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u003cclass 'pandas.core.frame.DataFrame'\u003e\n","DatetimeIndex: 2787 entries, 2013-10-01 to 2021-05-18\n","Data columns (total 5 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   Currency             2787 non-null   object \n"," 1   Closing Price (USD)  2787 non-null   float64\n"," 2   24h Open (USD)       2787 non-null   float64\n"," 3   24h High (USD)       2787 non-null   float64\n"," 4   24h Low (USD)        2787 non-null   float64\n","dtypes: float64(4), object(1)\n","memory usage: 130.6+ KB\n"]}],"source":["df.info()"]},{"cell_type":"markdown","metadata":{"id":"n3TzDWlW0asG"},"source":["Because we told pandas to parse the date column and set it as the index, its not in the list of columns.\n","\n","You can also see there isn't many samples."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":161,"status":"ok","timestamp":1642352409192,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"M2hbJZMU1O0l","outputId":"7f75a8e9-c278-41cc-c362-3e23ae2e6561"},"outputs":[{"data":{"text/plain":["2787"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# How many samples do we have?\n","len(df)"]},{"cell_type":"markdown","metadata":{"id":"mmFTD2RV1PjT"},"source":["We've collected the historical price of Bitcoin for the past ~8 years but there's only 2787 total samples.\n","\n","This is something you'll run into with time series data problems. Often, the number of samples isn't as large as other kinds of data.\n","\n","For example, collecting one sample at different time frames results in:\n","\n","| 1 sample per timeframe | Number of samples per year |\n","| ----- | ----- |\n","| Second | 31,536,000 |\n","| Hour | 8,760 |\n","| Day | 365 |\n","| Week | 52 |\n","| Month | 12 |\n","\n","\u003e üîë **Note:** The frequency at which a time series value is collected is often referred to as **seasonality**. This is usually mesaured in number of samples per year. For example, collecting the price of Bitcoin once per day would result in a time series with a seasonality of 365. Time series data collected with different seasonality values often exhibit seasonal patterns (e.g. electricity demand behing higher in Summer months for air conditioning than Winter months). For more on different time series patterns, see [Forecasting: Principles and Practice Chapter 2.3](https://otexts.com/fpp3/tspatterns.html).\n","\n","![different types of time series patterns](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-types-of-time-series-patterns.png)\n","*Example of different kinds of patterns you'll see in time series data. Notice the bottom right time series (Google stock price changes) has little to no patterns, making it difficult to predict. See [Forecasting: Principles and Practice Chapter 2.3](https://otexts.com/fpp3/tspatterns.html) for full graphic.*\n","\n","Deep learning algorithms usually flourish with lots of data, in the range of thousands to millions of samples.\n","\n","In our case, we've got the daily prices of Bitcoin, a max of 365 samples per year.\n","\n","But that doesn't we can't try them with our data.\n","\n","To simplify, let's remove some of the columns from our data so we're only left with a date index and the closing price."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":140,"status":"ok","timestamp":1642352563448,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"b3Ec9OT41j79","outputId":"c8743a1f-2a4a-48ee-cdee-226ec2d89196"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-6cf394ec-8196-49a2-9442-fbf3b4cbee9e\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cf394ec-8196-49a2-9442-fbf3b4cbee9e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-6cf394ec-8196-49a2-9442-fbf3b4cbee9e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6cf394ec-8196-49a2-9442-fbf3b4cbee9e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price\n","Date                 \n","2013-10-01  123.65499\n","2013-10-02  125.45500\n","2013-10-03  108.58483\n","2013-10-04  118.67466\n","2013-10-05  121.33866"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["#Only want closing price for each day\n","es = pd.DataFrame(df[\"Closing Price (USD)\"]).rename(columns = {\"Closing Price (USD)\": \"Price\"})\n","es.head()"]},{"cell_type":"markdown","metadata":{"id":"fuZvkbdD1ypO"},"source":["Much better!\n","\n","But that's only five days worth of Bitcoin prices, let's plot everything we've got."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"executionInfo":{"elapsed":566,"status":"ok","timestamp":1642352585566,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"AW3_YNt_14jd","outputId":"4ae48d62-6291-4ddc-ab20-27547749127f"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","bitcoin_prices.plot(figsize=(10, 7))\n","plt.ylabel(\"BTC Price\")\n","plt.title(\"Price of Bitcoin from 1 Oct 2013 to 18 May 2021\", fontsize=16)\n","plt.legend(fontsize=14);"]},{"cell_type":"markdown","metadata":{"id":"bAV7YLty16h0"},"source":["Woah, looks like it would've been a good idea to buy Bitcoin back in 2014."]},{"cell_type":"markdown","metadata":{"id":"2rtdg5C32D-k"},"source":["### Importing time series data with Python's CSV module\n","\n","If your time series data comes in CSV form you don't necessarily have to use pandas.\n","\n","You can use Python's [in-built `csv` module](https://docs.python.org/3/library/csv.html). And if you're working with dates, you might also want to use Python's [`datetime`](https://docs.python.org/3/library/datetime.html).\n","\n","Let's see how we can replicate the plot we created before except this time using Python's `csv` and `datetime` modules.\n","\n","\u003e üìñ **Resource:** For a great guide on using Python's `csv` module, check out Real Python's tutorial on [Reading and Writing CSV files in Python](https://realpython.com/python-csv/)."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":132,"status":"ok","timestamp":1642352868649,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"625yAbm82Lf8","outputId":"e54edcfc-5446-4d0f-c733-ea811958a760"},"outputs":[{"data":{"text/plain":["([datetime.datetime(2013, 10, 1, 0, 0),\n","  datetime.datetime(2013, 10, 2, 0, 0),\n","  datetime.datetime(2013, 10, 3, 0, 0),\n","  datetime.datetime(2013, 10, 4, 0, 0),\n","  datetime.datetime(2013, 10, 5, 0, 0),\n","  datetime.datetime(2013, 10, 6, 0, 0),\n","  datetime.datetime(2013, 10, 7, 0, 0),\n","  datetime.datetime(2013, 10, 8, 0, 0),\n","  datetime.datetime(2013, 10, 9, 0, 0),\n","  datetime.datetime(2013, 10, 10, 0, 0)],\n"," [123.65499,\n","  125.455,\n","  108.58483,\n","  118.67466,\n","  121.33866,\n","  120.65533,\n","  121.795,\n","  123.033,\n","  124.049,\n","  125.96116])"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["#Importing and formatting historical Bitcoin data with Python\n","import csv\n","from datetime import datetime\n","\n","timesteps = []\n","btc_price = []\n","with open(\"/content/BTC_USD_2013-10-01_2021-05-18-CoinDesk.csv\", \"r\") as f:\n","  csv_reader = csv.reader(f, delimiter = \",\") #read in the target csv\n","  next(csv_reader) #Gets rid of the column titles\n","  for line in csv_reader:\n","    timesteps.append(datetime.strptime(line[1], \"%Y-%m-%d\")) # get the dates as dates (not strings), strptime = string parse time\\\n","    btc_price.append(float(line[2])) #get the closing price as float\n","\n","#View first 10 of each\n","timesteps[:10], btc_price[:10]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":460},"executionInfo":{"elapsed":495,"status":"ok","timestamp":1642352916180,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ldi0bRKk22TW","outputId":"db26f3e0-97e5-49d6-d153-30732908dc97"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["#Lets plot it\n","import matplotlib.pyplot as plt\n","import numpy as np\n","plt.figure(figsize = (10,7))\n","plt.plot(timesteps, btc_price)\n","plt.title(\"Price of Bitcoin from 1 Oct 2013 to 18 May 2021\", fontsize=16)\n","plt.xlabel(\"Date\")\n","plt.ylabel(\"BTC Price\");"]},{"cell_type":"markdown","metadata":{"id":"Sw_-8kcO3LQm"},"source":["Ho ho! Would you look at that! Just like the pandas plot. And because we formatted the `timesteps` to be `datetime` objects, `matplotlib` displays a fantastic looking date axis."]},{"cell_type":"markdown","metadata":{"id":"YbV9Tmuw3Sdl"},"source":["## Format Data Part 1: Creatining train and test sets for time series data\n","\n","Alrighty. What's next?\n","\n","If you guessed preparing our data for a model, you'd be right.\n","\n","What's the most important first step for preparing any machine learning dataset?\n","\n","Scaling?\n","\n","No...\n","\n","Removing outliers?\n","\n","No...\n","\n","How about creating train and test splits?\n","\n","Yes! \n","\n","Usually, you could create a train and test split using a function like Scikit-Learn's outstanding [`train_test_split()`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) but as we'll see in a moment, this doesn't really cut it for time series data.\n","\n","But before we do create splits, it's worth talking about what *kind* of data we have.\n","\n","In time series problems, you'll either have **univariate** or **multivariate** data.\n","\n","Can you guess what our data is?\n","\n","* **Univariate** time series data deals with *one* variable, for example, using the price of Bitcoin to predict the price of Bitcoin.\n","* **Multivariate** time series data deals with *more than one* variable, for example, predicting electricity demand using the day of week, time of year and number of houses in a region.\n","\n","![comparison of univariate and multivariate time series data](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-univariate-and-multivariate-time-series-data.png)\n","*Example of univariate and multivariate time series data. Univariate involves using the target to predict the target. Multivariate inolves using the target as well as another time series to predict the target.*"]},{"cell_type":"markdown","metadata":{"id":"bKMeL_jX39jE"},"source":["### Create train \u0026 test sets for time series (the wrong way)\n","\n","Okay, we've figured out we're dealing with a univariate time series, so we only have to make a split on one variable (for multivariate time series, you will have to split multiple variables). \n","\n","How about we first see the *wrong way* for splitting time series data?\n","\n","Let's turn our DataFrame index and column into NumPy arrays."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":134,"status":"ok","timestamp":1642353174780,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"2r_9EUmU3-oE","outputId":"efacfb9a-44d8-42ee-a31f-ce8fbea08329"},"outputs":[{"data":{"text/plain":["(array(['2013-10-01T00:00:00.000000000', '2013-10-02T00:00:00.000000000',\n","        '2013-10-03T00:00:00.000000000', '2013-10-04T00:00:00.000000000',\n","        '2013-10-05T00:00:00.000000000', '2013-10-06T00:00:00.000000000',\n","        '2013-10-07T00:00:00.000000000', '2013-10-08T00:00:00.000000000',\n","        '2013-10-09T00:00:00.000000000', '2013-10-10T00:00:00.000000000'],\n","       dtype='datetime64[ns]'),\n"," array([123.65499, 125.455  , 108.58483, 118.67466, 121.33866, 120.65533,\n","        121.795  , 123.033  , 124.049  , 125.96116]))"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["#Get bitcoin date array\n","timesteps = bitcoin_prices.index.to_numpy()\n","prices = bitcoin_prices[\"Price\"].to_numpy()\n","\n","timesteps[:10], prices[:10]"]},{"cell_type":"markdown","metadata":{"id":"7VLt9XZH4KfT"},"source":["And now we'll use the ever faithful `train_test_split` from Scikit-Learn to create our train and test sets."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":748,"status":"ok","timestamp":1642353257358,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"cviqwGSy4VhS","outputId":"965c229f-653c-4fc8-a8a0-51c1354f114f"},"outputs":[{"data":{"text/plain":["((2229,), (558,), (2229,), (558,))"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["# Wrong way to make train/test sets for time series\n","from sklearn.model_selection import train_test_split \n","\n","X_train, X_test, y_train, y_test = train_test_split(timesteps, # dates\n","                                                    prices, # prices\n","                                                    test_size=0.2,\n","                                                    random_state=42)\n","X_train.shape, X_test.shape, y_train.shape, y_test.shape "]},{"cell_type":"markdown","metadata":{"id":"THPB-TjJ4ef8"},"source":["Looks like the splits worked well, but let's not trust numbers on a page, let's visualize, visualize, visualize!"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":458,"status":"ok","timestamp":1642353267784,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"rCiVwiLf4g3C","outputId":"41212dfe-a4ed-4e0f-bfad-e7304ada1fe1"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Let's plot wrong train and test splits\n","plt.figure(figsize=(10, 7))\n","plt.scatter(X_train, y_train, s=5, label=\"Train data\")\n","plt.scatter(X_test, y_test, s=5, label=\"Test data\")\n","plt.xlabel(\"Date\")\n","plt.ylabel(\"BTC Price\")\n","plt.legend(fontsize=14)\n","plt.show();"]},{"cell_type":"markdown","metadata":{"id":"kUVdgXJA4hHi"},"source":["Hmmm... what's wrong with this plot?\n","\n","Well, let's remind ourselves of what we're trying to do.\n","\n","We're trying to use the historical price of Bitcoin to predict future prices of Bitcoin.\n","\n","With this in mind, our seen data (training set) is what?\n","\n","Prices of Bitcoin in the past.\n","\n","And our unseen data (test set) is?\n","\n","Prices of Bitcoin in the future. \n","\n","Does the plot above reflect this?\n","\n","No. \n","\n","Our test data is scattered all throughout the training data.\n","\n","This kind of random split is okay for datasets without a time component (such as images or passages of text for classification problems) but for time series, we've got to take the time factor into account.\n","\n","To fix this, we've got to split our data in a way that reflects what we're actually trying to do.\n","\n","We need to split our historical Bitcoin data to have a dataset that reflects the past (train set) and a dataset that reflects the future (test set).\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"RNuYUn204rEc"},"source":["### Create train \u0026 test sets for time series (the right way)\n","\n","Of course, there's no way we can actually access data from the future.\n","\n","But we can engineer our test set to be in the future with respect to the training set.\n","\n","To do this, we can create an abitrary point in time to split our data.\n","\n","Everything before the point in time can be considered the training set and everything after the point in time can be considered the test set.\n","\n","![time series train test split](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-time-series-train-test-split.png)\n","*Demonstration of time series split. Rather than a traditionaly random train/test split, it's best to split the time series data sequentially. Meaning, the test data should be data from the future when compared to the training data.*"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":146,"status":"ok","timestamp":1642353456610,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"c48HHxO84v80","outputId":"3b5f40ec-c515-4c06-f6ea-18fce578a440"},"outputs":[{"data":{"text/plain":["(2229, 558, 2229, 558)"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["#Create train and test aplits the right way for timeseries data\n","split_size = int(0.8 * len(prices)) # 80% train, 20% test\n","\n","#Create train data splits (everything before split)\n","X_train, y_train = timesteps[:split_size], prices[:split_size]\n","\n","#Create test data splits\n","X_test, y_test = timesteps[split_size:], prices[split_size:]\n","\n","len(X_train), len(X_test), len(y_train), len(y_test)"]},{"cell_type":"markdown","metadata":{"id":"AZBW84Ue5PPJ"},"source":["Okay, looks like our custom made splits are the same lengths as the splits we made with `train_test_split`.\n","\n","But again, these are numbers on a page.\n","\n","And you know how the saying goes, trust one eye more than two ears.\n","\n","Let's visualize."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":357,"status":"ok","timestamp":1642353476560,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"QCT0D3P85TBF","outputId":"3d4c7319-8290-4184-909e-6da77e2f32d7"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot correctly made splits\n","plt.figure(figsize=(10, 7))\n","plt.scatter(X_train, y_train, s=5, label=\"Train data\")\n","plt.scatter(X_test, y_test, s=5, label=\"Test data\")\n","plt.xlabel(\"Date\")\n","plt.ylabel(\"BTC Price\")\n","plt.legend(fontsize=14)\n","plt.show();"]},{"cell_type":"markdown","metadata":{"id":"-08NqPTM5UG1"},"source":["That looks much better!\n","\n","Do you see what's happened here?\n","\n","We're going to be using the training set (past) to train a model to try and predict values on the test set (future).\n","\n","Because the test set is an *artificial* future, we can guage how our model might perform on *actual* future data.\n","\n","\u003e üîë **Note:** The amount of data you reserve for your test set not set in stone. You could have 80/20, 90/10, 95/5 splits or in some cases, you might not even have enough data to split into train and test sets (see the resource below). The point is to remember the test set is a pseudofuture and not the actual future, it is only meant to give you an indication of how the models you're building are performing. \n","\n","\u003e üìñ **Resource:** Working with time series data can be tricky compared to other kinds of data. And there are a few pitfalls to watch out for, such as how much data to use for a test set. The article [*3 facts about time series forecasting that surprise experienced machine learning practitioners*](https://towardsdatascience.com/3-facts-about-time-series-forecasting-that-surprise-experienced-machine-learning-practitioners-69c18ee89387) talks about different things to watch out for when working with time series data, I'd recommend reading it.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-BV_V_vW6ROm"},"source":["### Create a plotting function\n","\n","Rather than retyping `matplotlib` commands to continuously plot data, let's make a plotting function we can reuse later."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4x97kdzb6S_E"},"outputs":[],"source":["# Create a function to plot time series data\n","def plot_time_series(timesteps, values, format='.', start=0, end=None, label=None):\n","  \"\"\"\n","  Plots a timesteps (a series of points in time) against values (a series of values across timesteps).\n","  \n","  Parameters\n","  ---------\n","  timesteps : array of timesteps\n","  values : array of values across time\n","  format : style of plot, default \".\"\n","  start : where to start the plot (setting a value will index from start of timesteps \u0026 values)\n","  end : where to end the plot (setting a value will index from end of timesteps \u0026 values)\n","  label : label to show on plot of values\n","  \"\"\"\n","  #Plot the series\n","  plt.plot(timesteps[start:end], values[start:end], format, label = label)\n","  plt.xlabel(\"Time\")\n","  plt.ylabel(\"BTC Price\")\n","  if label:\n","    plt.legend(fontsize = 14) #Make label bigger\n","  plt.grid(True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":428,"status":"ok","timestamp":1642353891469,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"BTCA1-Jh6myw","outputId":"28d82ffc-e277-421b-f3d8-c07e70c0cf78"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["#Try out plotting function\n","plt.figure(figsize=(10, 7))\n","plot_time_series(timesteps=X_train, values=y_train, label=\"Train data\")\n","plot_time_series(timesteps=X_test, values=y_test, label=\"Test data\")"]},{"cell_type":"markdown","metadata":{"id":"3BobmarD6xTn"},"source":["## Modelling Experiments\n","\n","We can build almost any kind of model for our problem as long as the data inputs and outputs are formatted correctly.\n","\n","However, just because we *can* build *almost any* kind of model, doesn't mean it'll perform well/should be used in a production setting.\n","\n","We'll see what this means as we build and evaluate models throughout.\n","\n","Before we discuss what modelling experiments we're going to run, there are two terms you should be familiar with, **horizon** and **window**. \n","  * **horizon** = number of timesteps to predict into future\n","  * **window** = number of timesteps from past used to predict **horizon**\n","\n","For example, if we wanted to predict the price of Bitcoin for tomorrow (1 day in the future) using the previous week's worth of Bitcoin prices (7 days in the past), the horizon would be 1 and the window would be 7.\n","\n","Now, how about those modelling experiments?\n","\n","| Model Number | Model Type | Horizon size | Window size | Extra data |\n","| ----- | ----- | ----- | ----- | ----- |\n","| 0 | Na√Øve model (baseline) | NA | NA | NA |\n","| 1 | Dense model | 1 | 7 | NA |\n","| 2 | Same as 1 | 1 | 30 | NA | \n","| 3 | Same as 1 | 7 | 30 | NA |\n","| 4 | Conv1D | 1 | 7 | NA |\n","| 5 | LSTM | 1 | 7 | NA |\n","| 6 | Same as 1 (but with multivariate data) | 1 | 7 | Block reward size |\n","| 7 | [N-BEATs Algorithm](https://arxiv.org/pdf/1905.10437.pdf) | 1 | 7 | NA |\n","| 8 | Ensemble (multiple models optimized on different loss functions) | 1 | 7 | NA | \n","| 9 | Future prediction model (model to predict future values) | 1 | 7 | NA| \n","| 10 | Same as 1 (but with turkey ü¶É data introduced) | 1 | 7 | NA |\n","\n","\u003e üîë **Note:** To reiterate, as you can see, we can build many types of models for the data we're working with. But that doesn't mean that they'll perform well. Deep learning is a powerful technique but it doesn't always work. And as always, start with a simple model first and then add complexity as needed. "]},{"cell_type":"markdown","metadata":{"id":"gC3QQU4W7Q-0"},"source":["## Model 0: Na√Øve forecast (baseline)\n","\n","As usual, let's start with a baseline.\n","\n","One of the most common baseline models for time series forecasting, the na√Øve model (also called the [na√Øve forecast](https://otexts.com/fpp3/simple-methods.html#na%C3%AFve-method)), requires no training at all.\n","\n","That's because all the na√Øve model does is use the previous timestep value to predict the next timestep value.\n","\n","The formula looks like this:\n","\n","$$\\hat{y}_{t} = y_{t-1}$$ \n","\n","In English: \n","\u003e The prediction at timestep `t` (y-hat) is equal to the value at timestep `t-1` (the previous timestep).\n","\n","Sound simple?\n","\n","Maybe not.\n","\n","In an open system (like a stock market or crypto market), you'll often find beating the na√Øve forecast with *any* kind of model is quite hard.\n","\n","\u003e üîë **Note:** For the sake of this notebook, an **open system** is a system where inputs and outputs can freely flow, such as a market (stock or crypto). Where as, a **closed system** the inputs and outputs are contained within the system (like a poker game with your buddies, you know the buy in and you know how much the winner can get). Time series forecasting in **open systems** is generally quite poor."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":142,"status":"ok","timestamp":1642354104753,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"stK8ub927crI","outputId":"afba3758-abda-4b7a-e7a0-626efb2fa0a2"},"outputs":[{"data":{"text/plain":["(array([9226.48582088, 8794.35864452, 8798.04205463, 9081.18687849,\n","        8711.53433917, 8760.89271814, 8749.52059102, 8656.97092235,\n","        8500.64355816, 8469.2608989 ]),\n"," array([57107.12067189, 58788.20967893, 58102.19142623, 55715.54665129,\n","        56573.5554719 , 52147.82118698, 49764.1320816 , 50032.69313676,\n","        47885.62525472, 45604.61575361]))"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["#Create a naive forcast\n","naive_forecast = y_test[:-1] # Na√Øve forecast equals every value excluding the last value\n","naive_forecast[:10], naive_forecast[-10:] #View first 10 and last 10"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":439,"status":"ok","timestamp":1642354227727,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"rWBe4W7K7th6","outputId":"1872aeaf-9f86-4977-e392-d6234728c5f3"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAnAAAAGpCAYAAAANygvZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXxU1f3/8deZmSSEsG9BIBBRUJASBRrxp1QqFUGx+BVcUDY3rNtPvxWtiuL2q3VD0ba2rgWr4lasFIuKaDRYISyCyGLZAhHZ90C2mTm/P+ZmMpOEEJbJZGbez8cjj9x7zr13PnNE+XjOPecYay0iIiIiEjtc0Q5ARERERI6MEjgRERGRGKMETkRERCTGKIETERERiTFK4ERERERijCfaAdS1Vq1a2czMzGiHcVgHDhwgLS0t2mFEndqhgtoiQO1QQW0RoHaooLYIiKd2WLRo0Q5rbevK5QmXwGVmZrJw4cJoh3FYOTk59O/fP9phRJ3aoYLaIkDtUEFtEaB2qKC2CIindjDGbKiuXEOoIiIiIjFGCZyIiIhIjFECJyIiIhJjlMCJiIiIxBglcCIiIiIxJuFmodbE7/fz448/cuDAgWiHQtOmTVm5cmW0w4i6WG+HpKQk2rRpQ5MmTaIdioiIxBElcCF27NiBMYZTTjkFlyu6nZP79++ncePGUY2hPojldrDWUlRUxKZNmwCUxImIyHGjIdQQe/bsIT09PerJm8QHYwwNGzakffv2bNu2LdrhiIhIHFGmEsLn85GUlBTtMCTOpKamUlZWFu0wREQkjiiBq8QYE+0QJM7oz5SIiBxvSuBEREREYowSOBEREZEYowROqhg7dixDhgw57s99//33NZwoIiJyHCiBi2HGmBp/xo4de1TPfe6553jjjTeOb7BHqUePHjz99NPRDkNERKRe0TpwMWzz5s3B45kzZ3LDDTeElaWmpoZdX1ZWVqtZtk2bNj1+QYqIiMSqhVPYt2I6TbpfCn3GRjuaMOqBi4BFG3bz5y/WsGjD7oh+Ttu2bYM/zZo1CysrLi6mWbNmTJs2jfPOO4/U1FRefPFFdu7cyYgRI+jQoQOpqamcdtpp/O1vfwt7buUh1P79+3PzzTdz33330apVK9q0acP48ePx+/01xvf666/TqVMnGjZsyJAhQ9i6dWtY/dq1axk6dCht27YlLS2NXr16MXPmzLDP3bhxI3fddVewVxGo1XcQERE5JgunMOfzezjbrufjL+6FhVOiHVEYJXDH2aINu7n6lXlM+vQHrn5lXsSTuMO59957ufnmm1mxYgWXXHIJxcXFwURp+fLl3H777dx4443MmTOnxue8+eabeDwe/vOf//CnP/2JyZMn88477xzy+vnz5zN27FjGjRvHkiVLuPjii5k4cWLYNYWFhQwePJjZs2ezdOlShg0bxqWXXsqqVasAmD59Ou3bt2fixIls3rw52Lt4tN9BRESk1lZ+yB3prQFY0CAFVn4Y5YDCaQj1OJu3bielXj9+C2VeP/PW7aR3p+ZRi+e2225j+PDhYWV33XVX8HjcuHF8/vnnTJs2jQEDBhzyOd27d+eRRx4BoGvXrrz88svMmTOHESNGVHv9c889x4ABA5gwYULwngULFvDqq68Gr8nKyiIrKyt4PmHCBP71r3/x/vvvc//999OiRQvcbjeNGzembdu2wevat29/VN9BRESk1tr2hJ/WAGDLz+sR9cAdZ307tyTZ48JtIMnjom/nllGNp0+fPmHnPp+P3//+9/Ts2ZOWLVvSqFEjpk+fzsaNG2t8Ts+e4X9w27VrV+P2UCtXruSss84KK6t8fuDAAe6++266d+9O8+bNadSoEQsXLjxsLEf7HURERGqtQRNOLy4BoHtpGTSoX/tZqwfuOOvdqTlvXt+Xeet20rdzy6j2vgGkpaWFnT/99NNMmjSJ5557jp/97Gc0atSI++6777B7dVae/GCMOew7cIczfvx4Pv74Y55++mm6dOlCw4YNGT16NKWlpTXed7TfQUREpNYy+9Hq+xcB8LmSILNflAMKpwQuAnp3ah71xO1Q5s6dy8UXX8yoUaMAsNby3//+NzgJ4njp1q0b8+bNCyurfD537lxGjx7NsGHDgMC7bWvXrqVr167Ba5KSkvD5fFH5DiIiksAysnFnngPbFlB25g2QkR3tiMJoCDXBdO3alTlz5jB37lxWrVrFrbfeyvr164/75/zf//t/+eyzz/jDH/7A6tWrefnll/nggw+qxPLBBx+wePFili1bxsiRIykuLg67pmPHjuTm5rJp0yZ27NhRp99BREQSmzstMImhbOcaKMiLcjThlMAlmPvvv5/s7GwGDx7ML37xC9LS0rj66quP++f07duXV199lb/8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l5fHE088ESzz+/0UFRWxZcsWsrKy+NWvfkWPHj0YOHAgv/rVrxg+fHgwmaqtlStXcv3114eVnXXWWWEJ3LZt23jggQf44osv2Lp1Kz6fj6KiIjZu3Fjjsw8cOMADDzzAp59+yubNmykrK6O4uJiePXseUYwiIiI1CeuB+/o5zss4Iaze76pIl3asmU3Tn74l6cT+UZ2VGukeuMSTkR2YapyfG0jeovQP1+/38+CDD3LZZZdVqWvdujVut5tPP/2UefPm8emnn/Lqq69y77338uWXX5KVlXVcYxkzZgxbt27l2WefJTMzk5SUFAYMGBD2Pl51xo8fz6xZs5g0aRJdunShYcOGjB49+rD3iYiIHInyHriDm7/lYMFGyMwIr/cF9kK1G+fzy69/y/kHinjmq2eiurSIErhIyMiO+loxvXr1YtWqVZx88smHvMYYw1lnncVZZ53FxIkTOe2003jnnXfIysoiOTkZn893yHvLdevWjXnz5nHttdcGy+bNmxd2zdy5c3n++ee56KKLANi6dWvYbFmApKSkKp83d+5crrzySoYNGwYEluJYu3YtXbt2PWxcIiIiteVbPRuAVW7LdSe0qVqf0ggAb/5XAMxOS4Xtu6L2mhQogYtbEydOZMiQIXTq1InLL78cj8fD999/T15eHk8++STz5s3js88+44ILLiA9PZ1vv/2WgoICunfvDgRmhm7YsIHFixfTsWNHGjduTEpKSpXPuf322xk9ejQ///nP6d+/P++//z7z58+nRYsWwWu6du3KG2+8wZlnnsmBAwe4++67SU5ODntOZmYmc+bM4dxzzyUlJYXmzZvTtWtXZs6cyeWXX05SUhIPP/wwxcXFkW04ERFJOPbHijVPv6/m7zqbnAaAt2NfWP96oNDljurODPXvrTw5Li644AI++ugjvvjiC7Kzs8nOzubxxx+nY8eOQGDR4q+//pohQ4bQpUsX7rzzTh544AFGjhwJwLBhw7jwwgsZMGAArVu3Ztq0adV+zhVXXMFDDz3EhAkTOOOMM1i2bBm//e1vw6557bXXKCwspHfv3lx55ZVce+21VXZqmDRpEl988QUZGRnB9dKeeeYZWrduTb9+/Rg8eDB9+/alX7/6s42JiIjEB1/7nx+yrqHfj78ksKC8N2y2anS3X1cPXJwYPnx4+CwaYODAgQwcOLDa67t168asWYeetJuSksL7779fq8++9957uffee8PKHnrooeBxVlZWlR0dypcsKXfxxRdz8cUXh5V16tSJGTNmhC3kO378+FrFJCIiUlv+pu3D93YK0dLnw1+4FQDvhq9DbvJGdQhVPXAiIiKS0Pwb5gaPkyp1hrT1+vD7SqEgjz178ysqory5vRI4ERERSVwFeby5c3Hw1F+puqG1+JPT+PKd4fx6T8gkvShvbq8ETkRERBJXfi7fpVRMrPOZ8HfbkhqlY42LLxq4w++L8moTSuBEREQk4ZTkf03ZV09B8b4ar3O16orPuCislNixcErkgqsFJXAiIiKSWAry6PPlbxj+w6vwzZ/4xcGiQ17qxoUt3V91zum3r0c0xMPRLFQRERFJLPm5AKxLTgK/j9IaVgQx67/En+ypmjA1PqG6y+uMeuBEREQksYTOHnW58dawpluS38fGpCSMrVRx8vmRia2WlMCJiIhIYgmdgHDhpCoTF0J9mtYQgJyGqWHlRR/fDQV5EQmvNpTAiYiISOLqMxZfNcOhd+/czT07d1HkCqRK3ko5Xkn5Qr5RogROgh566CF69OgR8c/5+uuv6dmzJ8nJyfTv3z/inyciIlITn6tqD1z/gwe5el8hGWVlALT3esPqjStJC/nK0Rs7dizGGB599NGw8pycHIwx7Nixo9bPGj9+PF9++eXxDrGK22+/naysLNauXcv06dMj/nmRZIyp9ZZjIiJST1Qa+vQnpdG/qITBhQeDZUmuJGjfm4d27gGgQaV34Py/elAL+cqxadCgAU899RTbt28/puc0atSIli1bHqeoDm3NmjWcd955ZGRk0KJFi6N6Rmlp6XGOSkREEkJBHnbqr8POvUkpuDL64m5bMQrlufwNGPQ4DU1g/mmZCU+Z/J8/qnfg5Nj88pe/JDMzs0ovXCifz8d1113HiSeeSGpqKl26dOHJJ5/E76/YNCR0CPXTTz8lOTmZnTt3hj3nvvvuo2fPnsHz//znP5x77rk0bNiQ9u3bc9NNN7FvX/WLIubn52OMYe/evVx77bUYY5gyZQoAX331FWeeeSYNGjQgPT2d//3f/w1L0vr3789NN93E+PHjad26NWeffTYAK1as4KKLLqJx48a0adOGESNGsGXLlrDPnTp1Kj/72c9ISUkhPT2dMWPGBOueeeYZevbsSVpaGu3bt+f6669nz549wfq9e/cyatQo2rRpQ4MGDejcuTOTJ08GIDMzE4DLLrsMY0zwXERE6rH8XHKSXWHnfr8fd1orXOkhCZzLDRnZuIc8C0Bps4ywx/j9ZVF9B07rwNXgibwnWLVrVZ1+5qktTuV32b87ontcLhePP/44l1xyCbfffjsnnXRSlWv8fj/t27fn3XffpXXr1uTl5TFu3DhatmzJddddV+X6AQMG0KpVK9577z1+85vfAGCt5a233uLmm28GYNmyZQwcOJCHH36YV155hV27dnHHHXdw7bXXVjusmJGRwebNmznppJN47LHHuOKKK2jatCmbNm1i8ODBjBo1iilTprB27Vquv/56XC4XDz30UPD+N954g3HjxpGbm4u1ls2bN/OLX/yC6667jqeffpqysjImTJjA0KFD+eabb3C5XLz44ovcfvvtPPbYY1x00UUUFhby+eefh7Xd5MmT6dy5Mxs2bOC2227jtttu4+9//zsA999/P8uWLWPmzJmkp6ezfv36YE/nggULaNOmDS+//DJDhgzB7a60zYqIiNQ/mf3Yv+D5sHPfjhzcxo3rYEWnhWva1TD6Q9wnZAFQ5gr/b7w/ypvZK4GLExdeeCFnn302EyZM4O23365Sn5SUxCOPPBI8z8zMZPHixUybNq3aBM7tdnPllVfy5ptvBhO4r7/+moKCAq666ioAnnrqKa644gruvPPO4H1/+ctfOOOMM9i2bRtt2rSp8sy2bdtijKFp06a0bdsWgBdeeIF27drxwgsv4HK56NatG48//jg33ngjd999N40bNwbgxBNPZNKkScHnTZw4kaysLJ544olg2euvv06LFi1YuHAh2dnZPProo9xxxx389re/DV7Tu3fv4PEdd9wR1iZPPvkkQ4cOZerUqbhcLjZs2ECvXr3Izg6859CpU6fg9a1btwagWbNmwe8iIiL1XEY2yb+4C5a/GDz3LfDhdrlxFW4LXtbAWwL5uXh6/g8AO4vCX1PyD381qu/AKYGrwZH2hEXbE088wVlnncVdd91Vbf1f//pXXnnlFTZs2EBRURFlZWVhCUllI0eOZPLkyWzYsIFOnTrx5ptvcu6559KhQwcAFi1axJo1a3jnnXeC91gbeMtz7dq1VRK4Q1m5ciV9+/bF5aro0j7nnHMoLS1l3bp1pKenA+GJV/nnf/XVVzRq1KjKM9euXUtmZiabNm1iwIABh/zs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\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["#Plot naive forecast\n","plt.figure(figsize = (10, 7))\n","plot_time_series(timesteps = X_train, values = y_train, label = \"Train data\")\n","plot_time_series(timesteps = X_test, values = y_test, label = \"Test data\")\n","plot_time_series(timesteps = X_test[1:], values = naive_forecast, format = \"-\", label = \"Naive forecast\")"]},{"cell_type":"markdown","metadata":{"id":"4mi8bP6V8GFf"},"source":["## Evaluating a time series model\n","\n","Time series forecasting often involves predicting a number (in our case, the price of Bitcoin).\n","\n","And what kind of problem is predicting a number?\n","\n","Ten points if you said regression.\n","\n","With this known, we can use regression evaluation metrics to evaluate our time series forecasts.\n","\n","The main thing we will be evaluating is: **how do our model's predictions (`y_pred`) compare against the actual values (`y_true` or *ground truth values*)**? \n","\n","\u003e üìñ **Resource:** We're going to be using several metrics to evaluate our different model's time series forecast accuracy. Many of them are sourced and explained mathematically and conceptually in [Forecasting: Principles and Practice chapter 5.8](https://otexts.com/fpp3/accuracy.html), I'd recommend reading through here for a more in-depth overview of what we're going to practice.\n","\n","For all of the following metrics, **lower is better** (for example an MAE of 0 is better than an MAE 100).\n","\n","### Scale-dependent errors\n","\n","These are metrics which can be used to compare time series values and forecasts that are on the same scale.\n","\n","For example, Bitcoin historical prices in USD veresus Bitcoin forecast values in USD.\n","\n","| Metric | Details | Code |\n","| ----- | ----- | ----- |\n","| **MAE** (mean absolute error) | Easy to interpret (a forecast is X amount different from actual amount). Forecast methods which minimises the MAE will lead to forecasts of the median. | [`tf.keras.metrics.mean_absolute_error()`](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/MeanAbsoluteError) |\n","| **RMSE** (root mean square error) | Forecasts which minimise the RMSE lead to forecasts of the mean. | `tf.sqrt(`[`tf.keras.metrics.mean_square_error()`](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/RootMeanSquaredError)`)`|\n","\n","### Percentage errors\n","\n","Percentage errors do not have units, this means they can be used to compare forecasts across different datasets.\n","\n","| **Metric** | **Details** | **Code** |\n","| ----- | ----- | ----- |\n","| **MAPE** (mean absolute percentage error) | Most commonly used percentage error. May explode (not work) if `y=0`. | [`tf.keras.metrics.mean_absolute_percentage_error()`](https://www.tensorflow.org/api_docs/python/tf/keras/losses/MAPE) | \n","| **sMAPE** (symmetric mean absolute percentage error) | Recommended not to be used by [Forecasting: Principles and Practice](https://otexts.com/fpp3/accuracy.html#percentage-errors), though it is used in forecasting competitions. | Custom implementation |\n","\n","### Scaled errors\n","\n","Scaled errors are an alternative to percentage errors when comparing forecast performance across different time series.\n","\n","| **Metric** | **Details** | **Code** |\n","| ----- | ----- | ----- |\n","| **MASE** (mean absolute scaled error). | MASE equals one for the naive forecast (or very close to one). A forecast which performs better than the na√Øve should get \u003c1 MASE. | See sktime's [`mase_loss()`](https://github.com/alan-turing-institute/sktime/blob/ee7a06843a44f4aaec7582d847e36073a9ab0566/sktime/performance_metrics/forecasting/_functions.py#L16) |\n","\n","\u003e ü§î **Question:** There are so many metrics... which one should I pay most attention to? It's going to depend on your problem. However, since its ease of interpretation (you can explain it in a sentence to your grandma), MAE is often a very good place to start.\n","\n","Since we're going to be evaluing a lot of models, let's write a function to help us calculate evaluation metrics on their forecasts.\n","\n","First we'll need TensorFlow.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oHQWgddG_x7T"},"outputs":[],"source":["import tensorflow as tf\n"]},{"cell_type":"markdown","metadata":{"id":"mrn2xcnH_1Xy"},"source":["And since TensorFlow doesn't have a ready made version of MASE (mean aboslute scaled error), how about we create our own?\n","\n","We'll take inspiration from [sktime](https://github.com/alan-turing-institute/sktime)'s (Scikit-Learn for time series) [`MeanAbsoluteScaledError`](https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.performance_metrics.forecasting.MeanAbsoluteScaledError.html#sktime.performance_metrics.forecasting.MeanAbsoluteScaledError) class which calculates the MASE."]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":136,"status":"ok","timestamp":1642356556272,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"OlyD1hmj_--i"},"outputs":[],"source":["# MASE implemented courtesy of sktime - https://github.com/alan-turing-institute/sktime/blob/ee7a06843a44f4aaec7582d847e36073a9ab0566/sktime/performance_metrics/forecasting/_functions.py#L16\n","def mean_absolute_scaled_error(y_true, y_pred):\n","  \"\"\"\n","  Implement MASE\n","  \"\"\"\n","  mae = tf.reduce_mean(tf.abs(y_true-y_pred))\n","\n","  #Find MAE of naive forcast (no seasonality)\n","  mase_naive_no_season = tf.reduce_mean(tf.abs(y_true[1:] - y_true[:-1])) # our seasonality is 1 day (hence the shifting of 1 day)\n","  return mae / mase_naive_no_season"]},{"cell_type":"markdown","metadata":{"id":"bl3NEoB9Avx3"},"source":["You'll notice the version of MASE above doesn't take in the training values like sktime's `mae_loss()`. In our case, we're comparing the MAE of our predictions on the test to the MAE of the na√Øve forecast on the test set.\n","\n","In practice, if we've created the function correctly, the na√Øve model should achieve an MASE of 1 (or very close to 1). Any model worse than the na√Øve forecast will achieve an MASE of \u003e1 and any model better than the na√Øve forecast will achieve an MASE of \u003c1.\n","\n","Let's put each of our different evaluation metrics together into a function."]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1642356522340,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"S5Km9MPkA7Bw"},"outputs":[],"source":["def evaluate_preds(y_true, y_pred):\n","  # Make sure float32 (for metric calculations)\n","  y_true = tf.cast(y_true, dtype=tf.float32)\n","  y_pred = tf.cast(y_pred, dtype=tf.float32)\n","\n","  # Calculate various metrics\n","  mae = tf.keras.metrics.mean_absolute_error(y_true, y_pred)\n","  mse = tf.keras.metrics.mean_squared_error(y_true, y_pred) # puts and emphasis on outliers (all errors get squared)\n","  rmse = tf.sqrt(mse)\n","  mape = tf.keras.metrics.mean_absolute_percentage_error(y_true, y_pred)\n","  mase = mean_absolute_scaled_error(y_true, y_pred)\n","  \n","  return {\"mae\": mae.numpy(),\n","          \"mse\": mse.numpy(),\n","          \"rmse\": rmse.numpy(),\n","          \"mape\": mape.numpy(),\n","          \"mase\": mase.numpy()}"]},{"cell_type":"markdown","metadata":{"id":"_802aTF9E6HO"},"source":["Looking good! How about we test our function on the naive forecast?"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":135,"status":"ok","timestamp":1642356557548,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"tcDWhNtEE9zW","outputId":"7084a3f6-862b-4a9c-d807-96354b3688d8"},"outputs":[{"data":{"text/plain":["{'mae': 567.9802,\n"," 'mape': 2.516525,\n"," 'mase': 0.99957,\n"," 'mse': 1147547.0,\n"," 'rmse': 1071.2362}"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["naive_results = evaluate_preds(y_true=y_test[1:],\n","                               y_pred=naive_forecast)\n","naive_results"]},{"cell_type":"markdown","metadata":{"id":"Bnu6wj2oE-HK"},"source":["Alright, looks like we've got some baselines to beat.\n","\n","Taking a look at the na√Øve forecast's MAE, it seems on average each forecast is ~$567 different than the actual Bitcoin price.\n","\n","How does this compare to the average price of Bitcoin in the test dataset?"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":232,"status":"ok","timestamp":1642356577951,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"DvbCvew2FI9t","outputId":"1ff4c1e1-cccc-4ff7-f9fc-0a710d26f6e7"},"outputs":[{"data":{"text/plain":["20056.632963737226"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["# Find average price of Bitcoin in test dataset\n","tf.reduce_mean(y_test).numpy()"]},{"cell_type":"markdown","metadata":{"id":"MrgNi1naFJTK"},"source":["Okay, looking at these two values is starting to give us an idea of how our model is performing:\n","* The average price of Bitcoin in the test dataset is: $20,056 (note: average may not be the best measure here, since the highest price is over 3x this value and the lowest price is over 4x lower)\n","\n","* Each prediction in naive forecast is on average off by: $567\n","\n","Is this enough to say it's a good model?\n","\n","That's up your own interpretation. Personally, I'd prefer a model which was closer to the mark.\n","\n","How about we try and build one?\n"]},{"cell_type":"markdown","metadata":{"id":"ybm-uA96FNIi"},"source":["## Other kinds of time series forecasting models which can be used for baselines and actual forecasts\n","\n","Since we've got a na√Øve forecast baseline to work with, it's time we start building models to try and beat it.\n","\n","And because this course is focused on TensorFlow and deep learning, we're going to be using TensorFlow to build deep learning models to try and improve on our na√Øve forecasting results.\n","\n","That being said, there are many other kinds of models you may want to look into for building baselines/performing forecasts.\n","\n","Some of them may even beat our best performing models in this notebook, however, I'll leave trying them out for extra-curriculum.\n","\n","| **Model/Library Name** | **Resource** |\n","| ----- | ----- |\n","| Moving average | https://machinelearningmastery.com/moving-average-smoothing-for-time-series-forecasting-python/ |\n","| ARIMA (Autoregression Integrated Moving Average) | https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/ |\n","| sktime (Scikit-Learn for time series) | https://github.com/alan-turing-institute/sktime |\n","| TensorFlow Decision Forests (random forest, gradient boosting trees) | https://www.tensorflow.org/decision_forests |\n","| Facebook Kats (purpose-built forecasting and time series analysis library by Facebook) | https://github.com/facebookresearch/Kats | \n","| LinkedIn Greykite (flexible, intuitive and fast forecasts) | https://github.com/linkedin/greykite |"]},{"cell_type":"markdown","metadata":{"id":"WwuBGAiXFVfq"},"source":["## Format Data Part 2: Windowing dataset\n","\n","Surely we'd be ready to start building models by now?\n","\n","We're so close! Only one more step (really two) to go.\n","\n","We've got to window our time series.\n","\n","Why do we window?\n","\n","Windowing is a method to turn a time series dataset into **supervised learning problem**. \n","\n","In other words, we want to use windows of the past to predict the future.\n","\n","For example for a univariate time series, windowing for one week (`window=7`) to predict the next single value (`horizon=1`) might look like:\n","\n","```\n","Window for one week (univariate time series)\n","\n","[0, 1, 2, 3, 4, 5, 6] -\u003e [7]\n","[1, 2, 3, 4, 5, 6, 7] -\u003e [8]\n","[2, 3, 4, 5, 6, 7, 8] -\u003e [9]\n","```\n","\n","Or for the price of Bitcoin, it'd look like:\n","\n","```\n","Window for one week with the target of predicting the next day (Bitcoin prices)\n","\n","[123.654, 125.455, 108.584, 118.674, 121.338, 120.655, 121.795] -\u003e [123.033]\n","[125.455, 108.584, 118.674, 121.338, 120.655, 121.795, 123.033] -\u003e [124.049]\n","[108.584, 118.674, 121.338, 120.655, 121.795, 123.033, 124.049] -\u003e [125.961]\n","```\n","\n","![windows and horizons for turning time series data into a supervised learning problem](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-time-series-windows-and-horizons.png)\n","*Example of windows and horizons for Bitcoin data. Windowing can be used to turn time series data into a supervised learning problem.*\n","\n","Let's build some functions which take in a univariate time series and turn it into windows and horizons of specified sizes.\n","\n","We'll start with the default horizon size of 1 and a window size of 7 (these aren't necessarily the best values to use, I've just picked them)."]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":111,"status":"ok","timestamp":1642356694203,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"FOr4dJBcFkjS"},"outputs":[],"source":["HORIZON = 1 # predict 1 step at a time\n","WINDOW_SIZE = 7 # use a week worth of timesteps to predict the horizon"]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":118,"status":"ok","timestamp":1642356763890,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ukdUNe-sFlup"},"outputs":[],"source":["#function to turn array into window and horizon\n","def get_labelled_windows(x, horizon=1):\n","  \"\"\"\n","  Creates labels for windowed dataset.\n","\n","  E.g. if horizon=1 (default)\n","  Input: [1, 2, 3, 4, 5, 6] -\u003e Output: ([1, 2, 3, 4, 5], [6])\n","  \"\"\"\n","  return x[:, :-horizon], x[:, -horizon:]"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":132,"status":"ok","timestamp":1642356767855,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"fUBq4j8SF2vP","outputId":"5895b1ea-948a-4d94-9aea-31268121bda1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Window: [1 2 3 4 5 6 7] -\u003e Label: 8\n"]}],"source":["# Test out the window labelling function\n","test_window, test_label = get_labelled_windows(tf.expand_dims(tf.range(8)+1, axis=0), horizon=HORIZON)\n","print(f\"Window: {tf.squeeze(test_window).numpy()} -\u003e Label: {tf.squeeze(test_label).numpy()}\")"]},{"cell_type":"markdown","metadata":{"id":"OF0_y3I_GTm4"},"source":["Oh yeah, that's what I'm talking about!\n","\n","Now we need a way to make windows for an entire time series.\n","\n","We could do this with Python for loops, however, for large time series, that'd be quite slow.\n","\n","To speed things up, we'll leverage [NumPy's array indexing](https://numpy.org/doc/stable/reference/arrays.indexing.html).\n","\n","Let's write a function which:\n","1. Creates a window step of specific window size, for example: `[[0, 1, 2, 3, 4, 5, 6, 7]]`\n","2. Uses NumPy indexing to create a 2D of multiple window steps, for example: \n","```\n","[[0, 1, 2, 3, 4, 5, 6, 7],\n"," [1, 2, 3, 4, 5, 6, 7, 8],\n"," [2, 3, 4, 5, 6, 7, 8, 9]]\n","```\n","3. Uses the 2D array of multuple window steps to index on a target series\n","4. Uses the `get_labelled_windows()` function we created above to turn the window steps into windows with a specified horizon\n","\n","\u003e üìñ **Resource:** The function created below has been adapted from Syafiq Kamarul Azman's article [*Fast and Robust Sliding Window Vectorization with NumPy*](https://towardsdatascience.com/fast-and-robust-sliding-window-vectorization-with-numpy-3ad950ed62f5)."]},{"cell_type":"code","execution_count":44,"metadata":{"executionInfo":{"elapsed":148,"status":"ok","timestamp":1642356973804,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"cPNCZuNLGpng"},"outputs":[],"source":["# Create function to view NumPy arrays as windows \n","def make_windows(x, window_size=7, horizon=1):\n","  \"\"\"\n","  Turns a 1D array into a 2D array of sequential windows of window_size.\n","  \"\"\"\n","  # 1. Create a window of specific window_size (add the horizon on the end for later labelling)\n","  window_step = np.expand_dims(np.arange(window_size+horizon), axis=0)\n","  # print(f\"Window step:\\n {window_step}\")\n","\n","  # 2. Create a 2D array of multiple window steps (minus 1 to account for 0 indexing)\n","  window_indexes = window_step + np.expand_dims(np.arange(len(x)-(window_size+horizon-1)), axis=0).T # create 2D array of windows of size window_size\n","  # print(f\"Window indexes:\\n {window_indexes[:3], window_indexes[-3:], window_indexes.shape}\")\n","\n","  # 3. Index on the target array (time series) with 2D array of multiple window steps\n","  windowed_array = x[window_indexes]\n","\n","  # 4. Get the labelled windows\n","  windows, labels = get_labelled_windows(windowed_array, horizon=horizon)\n","\n","  return windows, labels"]},{"cell_type":"markdown","metadata":{"id":"46JFbEW3Gp93"},"source":["Phew! A few steps there... let's see how it goes."]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":153,"status":"ok","timestamp":1642357312138,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"DqF7paicH6rM","outputId":"53c07ab7-8bb5-41eb-e381-a8701e02826f"},"outputs":[{"data":{"text/plain":["(2780, 2780)"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["full_windows, full_labels = make_windows(prices, window_size=WINDOW_SIZE, horizon=HORIZON)\n","len(full_windows), len(full_labels)"]},{"cell_type":"markdown","metadata":{"id":"jUv0q8alH8lK"},"source":["Of course we have to visualize, visualize, visualize!"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":135,"status":"ok","timestamp":1642357369524,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"_CdGXUIqII76","outputId":"6e5cb6bb-3617-4501-febf-acdd4bf9e3d4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Window: [123.65499 125.455   108.58483 118.67466 121.33866 120.65533 121.795  ] -\u003e Label: [123.033]\n","Window: [125.455   108.58483 118.67466 121.33866 120.65533 121.795   123.033  ] -\u003e Label: [124.049]\n","Window: [108.58483 118.67466 121.33866 120.65533 121.795   123.033   124.049  ] -\u003e Label: [125.96116]\n"]}],"source":["# View the first 3 windows/labels\n","for i in range(3):\n","  print(f\"Window: {full_windows[i]} -\u003e Label: {full_labels[i]}\")"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":139,"status":"ok","timestamp":1642357378468,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"1u6JvovdIKmC","outputId":"d28b7f21-4660-4587-96f8-3efa2450c6b9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Window: [58788.20967893 58102.19142623 55715.54665129 56573.5554719\n"," 52147.82118698 49764.1320816  50032.69313676] -\u003e Label: [47885.62525472]\n","Window: [58102.19142623 55715.54665129 56573.5554719  52147.82118698\n"," 49764.1320816  50032.69313676 47885.62525472] -\u003e Label: [45604.61575361]\n","Window: [55715.54665129 56573.5554719  52147.82118698 49764.1320816\n"," 50032.69313676 47885.62525472 45604.61575361] -\u003e Label: [43144.47129086]\n"]}],"source":["# View the last 3 windows/labels\n","for i in range(3):\n","  print(f\"Window: {full_windows[i-3]} -\u003e Label: {full_labels[i-3]}\")"]},{"cell_type":"markdown","metadata":{"id":"V6SHt8rOIMxK"},"source":["\u003e üîë **Note:** You can find a function which achieves similar results to the ones we implemented above at [`tf.keras.preprocessing.timeseries_dataset_from_array()`](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/timeseries_dataset_from_array). Just like ours, it takes in an array and returns a windowed dataset. It has the benefit of returning data in the form of a tf.data.Dataset instance (we'll see how to do this with our own data later).\n","\n","## Turning windows into training and test sets \n","\n","Look how good those windows look! Almost like the stain glass windows on the Sistine Chapel, well, maybe not that good but still.\n","\n","Time to turn our windows into training and test splits.\n","\n","We could've windowed our existing training and test splits, however, with the nature of windowing (windowing often requires an offset at some point in the data), it usually works better to window the data first, then split it into training and test sets.\n","\n","Let's write a function which takes in full sets of windows and their labels and splits them into train and test splits."]},{"cell_type":"code","execution_count":50,"metadata":{"executionInfo":{"elapsed":158,"status":"ok","timestamp":1642357522987,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"yNN0EmAZIuSl"},"outputs":[],"source":["# Make the train/test splits\n","def make_train_test_splits(windows, labels, test_split=0.2):\n","  \"\"\"\n","  Splits matching pairs of windows and labels into train and test splits.\n","  \"\"\"\n","  split_size = int(len(windows) * (1-test_split)) # this will default to 80% train/20% test\n","  train_windows = windows[:split_size]\n","  train_labels = labels[:split_size]\n","  test_windows = windows[split_size:]\n","  test_labels = labels[split_size:]\n","  return train_windows, test_windows, train_labels, test_labels"]},{"cell_type":"markdown","metadata":{"id":"ExXgAqgJIwDT"},"source":["Look at that amazing function, lets test it."]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":139,"status":"ok","timestamp":1642357645029,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"aKqzgv-UJNkD","outputId":"e7f6c130-8deb-4e0b-b902-63706a35cfa4"},"outputs":[{"data":{"text/plain":["(2224, 556, 2224, 556)"]},"execution_count":51,"metadata":{},"output_type":"execute_result"}],"source":["train_windows, test_windows, train_labels, test_labels = make_train_test_splits(full_windows, full_labels)\n","len(train_windows), len(test_windows), len(train_labels), len(test_labels)"]},{"cell_type":"markdown","metadata":{"id":"kFrxdoltJN26"},"source":["Notice the default split of 80% training data and 20% testing data (this split can be adjusted if needed).\n","\n","How do the first 5 samples of the training windows and labels looks?"]},{"cell_type":"code","execution_count":52,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":156,"status":"ok","timestamp":1642357670106,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"3zNWgJvRJSXB","outputId":"2ac30c09-4317-4e0c-8853-e1998358dbf5"},"outputs":[{"data":{"text/plain":["(array([[123.65499, 125.455  , 108.58483, 118.67466, 121.33866, 120.65533,\n","         121.795  ],\n","        [125.455  , 108.58483, 118.67466, 121.33866, 120.65533, 121.795  ,\n","         123.033  ],\n","        [108.58483, 118.67466, 121.33866, 120.65533, 121.795  , 123.033  ,\n","         124.049  ],\n","        [118.67466, 121.33866, 120.65533, 121.795  , 123.033  , 124.049  ,\n","         125.96116],\n","        [121.33866, 120.65533, 121.795  , 123.033  , 124.049  , 125.96116,\n","         125.27966]]), array([[123.033  ],\n","        [124.049  ],\n","        [125.96116],\n","        [125.27966],\n","        [125.9275 ]]))"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["train_windows[:5], train_labels[:5]"]},{"cell_type":"code","execution_count":53,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":136,"status":"ok","timestamp":1642358057282,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"yQB18WLnJT-C","outputId":"ccc7a850-e31d-4a94-8813-add163a21fb7"},"outputs":[{"data":{"text/plain":["True"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["#Check to see if same (accounting for horizon and window size)\n","np.array_equal(np.squeeze(train_labels[:-HORIZON-1]), y_train[WINDOW_SIZE:])"]},{"cell_type":"markdown","metadata":{"id":"FZFNXgMpNmmQ"},"source":["## Make a modelling checkpoint\n","\n","We're so close to building models. So so so close.\n","\n","Because our model's performance will fluctuate from experiment to experiment, we'll want to make sure we're comparing apples to apples.\n","\n","What I mean by this is in order for a fair comparison, we want to compare each model's best performance against each model's best performance.\n","\n","For example, if `model_1` performed incredibly well on epoch 55 but its performance fell off toward epoch 100, we want the version of the model from epoch 55 to compare to other models rather than the version of the model from epoch 100.\n","\n","And the same goes for each of our other models: compare the best against the best.\n","\n","To take of this, we'll implement a [`ModelCheckpoint`](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint) callback.\n","\n","The `ModelCheckpoint` callback will monitor our model's performance during training and save the best model to file by setting `save_best_only=True`.\n","\n","That way when evaluating our model we could restore its best performing configuration from file.\n","\n","\u003e üîë **Note:** Because of the size of the dataset (smaller than usual), you'll notice our modelling experiment results fluctuate quite a bit during training (hence the implementation of the `ModelCheckpoint` callback to save the best model).\n","\n","Because we're going to be running multiple experiments, it makes sense to keep track of them by saving models to file under different names.\n","\n","To do this, we'll write a small function to create a `ModelCheckpoint` callback which saves a model to specified filename."]},{"cell_type":"code","execution_count":61,"metadata":{"executionInfo":{"elapsed":131,"status":"ok","timestamp":1642359063595,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"u19A5Ct5ORvx"},"outputs":[],"source":["import os\n","\n","#Create a function to implement a ModelCheckpoint callback with a specific filename\n","def create_model_checkpoint(model_name, save_path = \"model_experiment\"):\n","  return tf.keras.callbacks.ModelCheckpoint(filepath=os.path.join(save_path, model_name), # create filepath to save model\n","                                            verbose = 0, # only output a limited amount of text\n","                                            save_best_only = True) # save only the best model to file"]},{"cell_type":"markdown","metadata":{"id":"g-WXCEXMOo1w"},"source":["## Model 1: Dense model (window = 7, horizon = 1)\n","\n","Finally!\n","\n","Time to build one of our models.\n","\n","If you think we've been through a fair bit of preprocessing before getting here, you're right.\n","\n","Often, preparing data for a model is one of the largest parts of any machine learning project.\n","\n","And once you've got a good model in place, you'll probably notice far more improvements from manipulating the data (e.g. collecting more, improving the quality) than manipulating the model.\n","\n","We're going to start by keeping it simple, `model_1` will have:\n","* A single dense layer with 128 hidden units and ReLU (rectified linear unit) activation\n","* An output layer with linear activation (or no activation)\n","* Adam optimizer and MAE loss function\n","* Batch size of 128\n","* 100 epochs\n","\n","Why these values?\n","\n","I picked them out of experimentation. \n","\n","A batch size of 32 works pretty well too and we could always train for less epochs but since the model runs so fast (you'll see in a second, it's because the number of samples we have isn't massive) we might as well train for more.\n","\n","\u003e üîë **Note:** As always, many of the values for machine learning problems are experimental. A reminder that the values you can set yourself in a machine learning algorithm (the hidden units, the batch size, horizon size, window size) are called [**hyperparameters**](https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning). And experimenting to find the best values for hyperparameters is called **hyperparameter tuning**. Where as parameters learned by a model itself (patterns in the data, formally called weights \u0026 biases) are referred to as **parameters**.\n","\n","Let's import TensorFlow and build our first deep learning model for time series."]},{"cell_type":"code","execution_count":62,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30145,"status":"ok","timestamp":1642359470346,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"QHZYA6eAOvbZ","outputId":"11b20ab4-0770-4d75-f0bb-aa8b3a6c862d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n"," 1/18 [\u003e.............................] - ETA: 10s - loss: 2111.0571 - mae: 2111.0571INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 2s 58ms/step - loss: 780.3469 - mae: 780.3469 - val_loss: 2279.5828 - val_mae: 2279.5828\n","Epoch 2/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 348.8778 - mae: 348.8778INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 247.6765 - mae: 247.6765 - val_loss: 1005.9864 - val_mae: 1005.9864\n","Epoch 3/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 134.4844 - mae: 134.4844INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 188.4107 - mae: 188.4107 - val_loss: 923.2859 - val_mae: 923.2859\n","Epoch 4/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 211.3675 - mae: 211.3675INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 169.4334 - mae: 169.4334 - val_loss: 900.5932 - val_mae: 900.5932\n","Epoch 5/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 155.7283 - mae: 155.7283INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 39ms/step - loss: 165.0899 - mae: 165.0899 - val_loss: 895.2405 - val_mae: 895.2405\n","Epoch 6/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 117.3697 - mae: 117.3697INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 35ms/step - loss: 158.5206 - mae: 158.5206 - val_loss: 855.1868 - val_mae: 855.1868\n","Epoch 7/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 180.3330 - mae: 180.3330INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 151.3568 - mae: 151.3568 - val_loss: 840.9290 - val_mae: 840.9290\n","Epoch 8/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 121.1151 - mae: 121.1151INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 145.2560 - mae: 145.2560 - val_loss: 803.6005 - val_mae: 803.6005\n","Epoch 9/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 126.2221 - mae: 126.2221INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 144.3546 - mae: 144.3546 - val_loss: 799.5592 - val_mae: 799.5592\n","Epoch 10/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 148.4517 - mae: 148.4517INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 52ms/step - loss: 141.2944 - mae: 141.2944 - val_loss: 763.5060 - val_mae: 763.5060\n","Epoch 11/100\n","18/18 [==============================] - 0s 5ms/step - loss: 135.6591 - mae: 135.6591 - val_loss: 771.3525 - val_mae: 771.3525\n","Epoch 12/100\n","18/18 [==============================] - 0s 4ms/step - loss: 134.1702 - mae: 134.1702 - val_loss: 782.8326 - val_mae: 782.8325\n","Epoch 13/100\n","18/18 [==============================] - 0s 4ms/step - loss: 134.6014 - mae: 134.6014 - val_loss: 784.4728 - val_mae: 784.4728\n","Epoch 14/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 136.5616 - mae: 136.5616INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 130.6125 - mae: 130.6125 - val_loss: 751.3470 - val_mae: 751.3470\n","Epoch 15/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 131.5395 - mae: 131.5395INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 35ms/step - loss: 128.8352 - mae: 128.8352 - val_loss: 696.5837 - val_mae: 696.5837\n","Epoch 16/100\n","18/18 [==============================] - 0s 4ms/step - loss: 124.8667 - mae: 124.8667 - val_loss: 707.2988 - val_mae: 707.2988\n","Epoch 17/100\n","18/18 [==============================] - 0s 3ms/step - loss: 123.6096 - mae: 123.6096 - val_loss: 714.2291 - val_mae: 714.2291\n","Epoch 18/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 138.5527 - mae: 138.5527INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 35ms/step - loss: 122.3023 - mae: 122.3023 - val_loss: 669.1414 - val_mae: 669.1414\n","Epoch 19/100\n","18/18 [==============================] - 0s 5ms/step - loss: 121.4932 - mae: 121.4932 - val_loss: 721.5452 - val_mae: 721.5452\n","Epoch 20/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 135.4132 - mae: 135.4132INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 119.2384 - mae: 119.2384 - val_loss: 658.0786 - val_mae: 658.0786\n","Epoch 21/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 128.8736 - mae: 128.8736INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 39ms/step - loss: 121.5293 - mae: 121.5293 - val_loss: 638.3386 - val_mae: 638.3386\n","Epoch 22/100\n","18/18 [==============================] - 0s 4ms/step - loss: 119.3422 - mae: 119.3422 - val_loss: 678.8881 - val_mae: 678.8881\n","Epoch 23/100\n","18/18 [==============================] - 0s 5ms/step - loss: 122.8203 - mae: 122.8203 - val_loss: 651.8512 - val_mae: 651.8512\n","Epoch 24/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 125.6553 - mae: 125.6553INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 117.0774 - mae: 117.0774 - val_loss: 623.5611 - val_mae: 623.5611\n","Epoch 25/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 122.1502 - mae: 122.1502INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 115.1816 - mae: 115.1816 - val_loss: 618.5576 - val_mae: 618.5576\n","Epoch 26/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 109.7064 - mae: 109.7064INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 36ms/step - loss: 115.0673 - mae: 115.0673 - val_loss: 616.4918 - val_mae: 616.4918\n","Epoch 27/100\n","18/18 [==============================] - 0s 5ms/step - loss: 116.6431 - mae: 116.6431 - val_loss: 619.0472 - val_mae: 619.0472\n","Epoch 28/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 102.1523 - mae: 102.1523INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 35ms/step - loss: 114.0328 - mae: 114.0328 - val_loss: 610.3879 - val_mae: 610.3879\n","Epoch 29/100\n","18/18 [==============================] - 0s 4ms/step - loss: 113.4892 - mae: 113.4892 - val_loss: 617.2401 - val_mae: 617.2401\n","Epoch 30/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 124.6252 - mae: 124.6252INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 116.4094 - mae: 116.4094 - val_loss: 603.6490 - val_mae: 603.6490\n","Epoch 31/100\n","18/18 [==============================] - 0s 4ms/step - loss: 112.3454 - mae: 112.3454 - val_loss: 623.4434 - val_mae: 623.4434\n","Epoch 32/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 110.3431 - mae: 110.3431INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 113.2056 - mae: 113.2056 - val_loss: 600.0261 - val_mae: 600.0261\n","Epoch 33/100\n","18/18 [==============================] - 0s 4ms/step - loss: 112.9528 - mae: 112.9528 - val_loss: 653.0604 - val_mae: 653.0604\n","Epoch 34/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 140.4313 - mae: 140.4313INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 112.1157 - mae: 112.1157 - val_loss: 594.7913 - val_mae: 594.7913\n","Epoch 35/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 100.0623 - mae: 100.0623INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 36ms/step - loss: 110.7447 - mae: 110.7447 - val_loss: 592.7401 - val_mae: 592.7401\n","Epoch 36/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 149.3917 - mae: 149.3917INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 116.3301 - mae: 116.3301 - val_loss: 592.4697 - val_mae: 592.4697\n","Epoch 37/100\n","18/18 [==============================] - 0s 5ms/step - loss: 110.7676 - mae: 110.7676 - val_loss: 618.5350 - val_mae: 618.5350\n","Epoch 38/100\n","18/18 [==============================] - 0s 4ms/step - loss: 112.5935 - mae: 112.5935 - val_loss: 613.9557 - val_mae: 613.9557\n","Epoch 39/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 128.7077 - mae: 128.7077INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 110.1321 - mae: 110.1321 - val_loss: 586.6888 - val_mae: 586.6888\n","Epoch 40/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.4753 - mae: 109.4753 - val_loss: 593.9153 - val_mae: 593.9153\n","Epoch 41/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 105.0374 - mae: 105.0374INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 36ms/step - loss: 110.1777 - mae: 110.1777 - val_loss: 586.4465 - val_mae: 586.4465\n","Epoch 42/100\n","18/18 [==============================] - 0s 5ms/step - loss: 111.5192 - mae: 111.5192 - val_loss: 649.3650 - val_mae: 649.3650\n","Epoch 43/100\n","18/18 [==============================] - 0s 4ms/step - loss: 115.8939 - mae: 115.8939 - val_loss: 686.8293 - val_mae: 686.8293\n","Epoch 44/100\n","18/18 [==============================] - 0s 5ms/step - loss: 123.0945 - mae: 123.0945 - val_loss: 661.1304 - val_mae: 661.1304\n","Epoch 45/100\n","18/18 [==============================] - 0s 4ms/step - loss: 113.8169 - mae: 113.8169 - val_loss: 626.8177 - val_mae: 626.8177\n","Epoch 46/100\n","18/18 [==============================] - 0s 5ms/step - loss: 114.0971 - mae: 114.0971 - val_loss: 588.7769 - val_mae: 588.7769\n","Epoch 47/100\n","18/18 [==============================] - 0s 3ms/step - loss: 108.9936 - mae: 108.9936 - val_loss: 636.0583 - val_mae: 636.0583\n","Epoch 48/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.2967 - mae: 109.2967 - val_loss: 604.1586 - val_mae: 604.1586\n","Epoch 49/100\n","18/18 [==============================] - 0s 5ms/step - loss: 111.7787 - mae: 111.7787 - val_loss: 591.5096 - val_mae: 591.5096\n","Epoch 50/100\n","18/18 [==============================] - 0s 4ms/step - loss: 111.7319 - mae: 111.7319 - val_loss: 636.4677 - val_mae: 636.4677\n","Epoch 51/100\n","18/18 [==============================] - 0s 4ms/step - loss: 110.7498 - mae: 110.7498 - val_loss: 589.2878 - val_mae: 589.2878\n","Epoch 52/100\n","18/18 [==============================] - 0s 4ms/step - loss: 111.5193 - mae: 111.5193 - val_loss: 609.5289 - val_mae: 609.5289\n","Epoch 53/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 63.2880 - mae: 63.2880INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 113.9868 - mae: 113.9868 - val_loss: 584.7471 - val_mae: 584.7471\n","Epoch 54/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 98.4018 - mae: 98.4018INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 54ms/step - loss: 110.1075 - mae: 110.1075 - val_loss: 578.7416 - val_mae: 578.7416\n","Epoch 55/100\n","18/18 [==============================] - 0s 3ms/step - loss: 110.6423 - mae: 110.6423 - val_loss: 581.5333 - val_mae: 581.5333\n","Epoch 56/100\n","18/18 [==============================] - 0s 4ms/step - loss: 107.6537 - mae: 107.6537 - val_loss: 759.0189 - val_mae: 759.0189\n","Epoch 57/100\n","18/18 [==============================] - 0s 4ms/step - loss: 119.2012 - mae: 119.2012 - val_loss: 603.5953 - val_mae: 603.5953\n","Epoch 58/100\n","18/18 [==============================] - 0s 4ms/step - loss: 116.4417 - mae: 116.4417 - val_loss: 583.7296 - val_mae: 583.7296\n","Epoch 59/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.9014 - mae: 109.9014 - val_loss: 592.8416 - val_mae: 592.8416\n","Epoch 60/100\n","18/18 [==============================] - 0s 4ms/step - loss: 107.7859 - mae: 107.7859 - val_loss: 593.4969 - val_mae: 593.4969\n","Epoch 61/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 130.6454 - mae: 130.6454INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 107.6960 - mae: 107.6960 - val_loss: 575.5123 - val_mae: 575.5123\n","Epoch 62/100\n","18/18 [==============================] - 0s 4ms/step - loss: 107.1257 - mae: 107.1257 - val_loss: 580.2645 - val_mae: 580.2645\n","Epoch 63/100\n","18/18 [==============================] - 0s 4ms/step - loss: 111.8451 - mae: 111.8451 - val_loss: 654.6143 - val_mae: 654.6143\n","Epoch 64/100\n","18/18 [==============================] - 0s 5ms/step - loss: 110.3121 - mae: 110.3121 - val_loss: 610.7810 - val_mae: 610.7810\n","Epoch 65/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 131.5208 - mae: 131.5208INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 39ms/step - loss: 109.7098 - mae: 109.7098 - val_loss: 573.9960 - val_mae: 573.9960\n","Epoch 66/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 112.4866 - mae: 112.4866INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 36ms/step - loss: 106.8139 - mae: 106.8139 - val_loss: 572.9989 - val_mae: 572.9989\n","Epoch 67/100\n","18/18 [==============================] - 0s 4ms/step - loss: 106.1394 - mae: 106.1394 - val_loss: 602.1524 - val_mae: 602.1524\n","Epoch 68/100\n","18/18 [==============================] - 0s 5ms/step - loss: 112.9245 - mae: 112.9245 - val_loss: 687.6375 - val_mae: 687.6375\n","Epoch 69/100\n","18/18 [==============================] - 0s 5ms/step - loss: 126.9916 - mae: 126.9916 - val_loss: 664.9473 - val_mae: 664.9473\n","Epoch 70/100\n","18/18 [==============================] - 0s 4ms/step - loss: 124.8734 - mae: 124.8734 - val_loss: 619.6686 - val_mae: 619.6686\n","Epoch 71/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.8522 - mae: 109.8522 - val_loss: 582.3637 - val_mae: 582.3637\n","Epoch 72/100\n","18/18 [==============================] - 0s 4ms/step - loss: 107.6717 - mae: 107.6717 - val_loss: 573.4947 - val_mae: 573.4947\n","Epoch 73/100\n","18/18 [==============================] - 0s 5ms/step - loss: 109.6036 - mae: 109.6036 - val_loss: 583.9045 - val_mae: 583.9045\n","Epoch 74/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 165.4990 - mae: 165.4990INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 107.7049 - mae: 107.7049 - val_loss: 572.9933 - val_mae: 572.9933\n","Epoch 75/100\n","18/18 [==============================] - 0s 3ms/step - loss: 108.1179 - mae: 108.1179 - val_loss: 583.9372 - val_mae: 583.9372\n","Epoch 76/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.5447 - mae: 109.5447 - val_loss: 592.8235 - val_mae: 592.8235\n","Epoch 77/100\n","18/18 [==============================] - 0s 4ms/step - loss: 108.3639 - mae: 108.3639 - val_loss: 575.4260 - val_mae: 575.4260\n","Epoch 78/100\n","18/18 [==============================] - 0s 3ms/step - loss: 108.0055 - mae: 108.0055 - val_loss: 574.3941 - val_mae: 574.3941\n","Epoch 79/100\n","18/18 [==============================] - 0s 4ms/step - loss: 107.3223 - mae: 107.3223 - val_loss: 597.2478 - val_mae: 597.2478\n","Epoch 80/100\n","18/18 [==============================] - 0s 4ms/step - loss: 108.1452 - mae: 108.1452 - val_loss: 586.6866 - val_mae: 586.6866\n","Epoch 81/100\n","18/18 [==============================] - 0s 3ms/step - loss: 106.1153 - mae: 106.1153 - val_loss: 575.1765 - val_mae: 575.1765\n","Epoch 82/100\n","18/18 [==============================] - 0s 4ms/step - loss: 116.6344 - mae: 116.6344 - val_loss: 575.4340 - val_mae: 575.4340\n","Epoch 83/100\n","18/18 [==============================] - 0s 3ms/step - loss: 110.8731 - mae: 110.8731 - val_loss: 654.5366 - val_mae: 654.5366\n","Epoch 84/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 118.1785 - mae: 118.1785INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 38ms/step - loss: 111.9106 - mae: 111.9106 - val_loss: 572.3373 - val_mae: 572.3373\n","Epoch 85/100\n","18/18 [==============================] - 0s 3ms/step - loss: 106.6154 - mae: 106.6154 - val_loss: 574.2833 - val_mae: 574.2833\n","Epoch 86/100\n","18/18 [==============================] - 0s 3ms/step - loss: 108.4299 - mae: 108.4299 - val_loss: 583.3530 - val_mae: 583.3530\n","Epoch 87/100\n","18/18 [==============================] - 0s 3ms/step - loss: 105.7481 - mae: 105.7481 - val_loss: 593.0121 - val_mae: 593.0121\n","Epoch 88/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 133.8443 - mae: 133.8443INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 36ms/step - loss: 107.2604 - mae: 107.2604 - val_loss: 571.7658 - val_mae: 571.7658\n","Epoch 89/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 102.2973 - mae: 102.2973INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 40ms/step - loss: 106.7823 - mae: 106.7823 - val_loss: 568.6370 - val_mae: 568.6370\n","Epoch 90/100\n","18/18 [==============================] - 0s 4ms/step - loss: 105.8682 - mae: 105.8682 - val_loss: 602.9690 - val_mae: 602.9690\n","Epoch 91/100\n","18/18 [==============================] - 0s 5ms/step - loss: 110.6365 - mae: 110.6365 - val_loss: 605.6947 - val_mae: 605.6947\n","Epoch 92/100\n","18/18 [==============================] - 0s 5ms/step - loss: 109.4668 - mae: 109.4668 - val_loss: 572.4370 - val_mae: 572.4370\n","Epoch 93/100\n","18/18 [==============================] - 0s 5ms/step - loss: 113.0063 - mae: 113.0063 - val_loss: 617.3001 - val_mae: 617.3001\n","Epoch 94/100\n","18/18 [==============================] - 0s 4ms/step - loss: 112.4903 - mae: 112.4903 - val_loss: 599.9803 - val_mae: 599.9803\n","Epoch 95/100\n","18/18 [==============================] - 0s 5ms/step - loss: 106.0053 - mae: 106.0053 - val_loss: 570.6210 - val_mae: 570.6210\n","Epoch 96/100\n","18/18 [==============================] - 0s 4ms/step - loss: 109.5910 - mae: 109.5910 - val_loss: 676.3395 - val_mae: 676.3395\n","Epoch 97/100\n","18/18 [==============================] - 0s 4ms/step - loss: 110.2213 - mae: 110.2213 - val_loss: 574.2988 - val_mae: 574.2988\n","Epoch 98/100\n","18/18 [==============================] - 0s 5ms/step - loss: 106.7290 - mae: 106.7290 - val_loss: 576.7734 - val_mae: 576.7734\n","Epoch 99/100\n"," 1/18 [\u003e.............................] - ETA: 0s - loss: 151.1014 - mae: 151.1014INFO:tensorflow:Assets written to: model_experiment/model_1_dense/assets\n","18/18 [==============================] - 1s 37ms/step - loss: 106.9889 - mae: 106.9889 - val_loss: 568.5499 - val_mae: 568.5499\n","Epoch 100/100\n","18/18 [==============================] - 0s 4ms/step - loss: 117.7622 - mae: 117.7622 - val_loss: 662.5322 - val_mae: 662.5322\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f657967a490\u003e"]},"execution_count":62,"metadata":{},"output_type":"execute_result"}],"source":["import tensorflow as tf\n","from tensorflow.keras import layers\n","\n","#Set random seed for as reproducible results as possible\n","tf.random.set_seed(42)\n","\n","#Construct model\n","model_1 = tf.keras.Sequential([\n","   layers.Dense(128, activation = \"relu\"),\n","   layers.Dense(HORIZON, activation = \"linear\") # linear activation is the same as having no activation                            \n","], name = \"model_1_dense\") # give the model a name so we can save it\n","\n","#Compile model\n","model_1.compile(loss = \"mae\",\n","                optimizer = tf.keras.optimizers.Adam(),\n","                metrics = [\"mae\"]) # we don't necessarily need this when the loss function is already MAE\n","\n","#Fit model\n","model_1.fit(x = train_windows,\n","            y = train_labels,\n","            epochs = 100,\n","            verbose = 1,\n","            batch_size = 128,\n","            validation_data = (test_windows, test_labels),\n","            callbacks = [create_model_checkpoint(model_name = model_1.name)])"]},{"cell_type":"markdown","metadata":{"id":"ro0tARCJQEKR"},"source":["Because of the small size of our data (less than 3000 total samples), the model trains very fast.\n","\n","Let's evaluate it."]},{"cell_type":"code","execution_count":64,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":140,"status":"ok","timestamp":1642359546273,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"wQ574X2QQXfq","outputId":"6870a2e4-20a9-4fe8-a7bc-db1657e69bba"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 662.5322 - mae: 662.5322\n"]},{"data":{"text/plain":["[662.5322265625, 662.5322265625]"]},"execution_count":64,"metadata":{},"output_type":"execute_result"}],"source":["#Evaluate model on test data\n","model_1.evaluate(test_windows, test_labels)"]},{"cell_type":"markdown","metadata":{"id":"fns-PvvpQbAz"},"source":["You'll notice the model achieves the same `val_loss` (in this case, this is MAE) as the last epoch.\n","\n","But if we load in the version of `model_1` which was saved to file using the `ModelCheckpoint` callback, we should see an improvement in results."]},{"cell_type":"code","execution_count":67,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":631,"status":"ok","timestamp":1642359692611,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"XQREIN8-QpR0","outputId":"0434c0a5-4de2-4d6a-97a8-0fd8c5ca4408"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 568.5499 - mae: 568.5499\n"]},{"data":{"text/plain":["[568.5498657226562, 568.5498657226562]"]},"execution_count":67,"metadata":{},"output_type":"execute_result"}],"source":["#Load in saved best performing model_1 and evaluate on test data\n","model_1 = tf.keras.models.load_model(\"/content/model_experiment/model_1_dense\")\n","model_1.evaluate(test_windows, test_labels)"]},{"cell_type":"markdown","metadata":{"id":"o1g3Ch0eQ4fl"},"source":["Much better! Due to the fluctuating performance of the model during training, loading back in the best performing model see's a sizeable improvement in MAE."]},{"cell_type":"markdown","metadata":{"id":"Bmhf2G56RFF8"},"source":["## Making forecasts with a model (on the test dataset)\n","\n","We've trained a model and evaluated the it on the test data, but the project we're working on is called BitPredict üí∞üìà so how do you think we could use our model to make predictions?\n","\n","Since we're going to be running more modelling experiments, let's write a function which: \n","1. Takes in a trained model (just like `model_1`)\n","2. Takes in some input data (just like the data the model was trained on) \n","3. Passes the input data to the model's `predict()` method\n","4. Returns the predictions\n","\n"]},{"cell_type":"code","execution_count":69,"metadata":{"executionInfo":{"elapsed":107,"status":"ok","timestamp":1642359982569,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"fmL3KYwqRHGF"},"outputs":[],"source":["def make_preds(model, input_data):\n","  \"\"\"\n","  Uses model to make predictions on input_data.\n","\n","  Parameters\n","  ----------\n","  model: trained model \n","  input_data: windowed input data (same kind of data model was trained on)\n","\n","  Returns model predictions on input_data.\n","  \"\"\"\n","  forecast = model.predict(input_data)\n","  return tf.squeeze(forecast) #return 1D array of predictions"]},{"cell_type":"markdown","metadata":{"id":"XaUNnuttSIjd"},"source":["Nice! \n","\n","Now let's use our `make_preds()` and see how it goes.\n"]},{"cell_type":"code","execution_count":70,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":278,"status":"ok","timestamp":1642360037822,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"znwC1ewiSLJg","outputId":"e9e7473d-33c3-4f05-aa4d-43e57da0c526"},"outputs":[{"data":{"text/plain":["(556, \u003ctf.Tensor: shape=(10,), dtype=float32, numpy=\n"," array([8874.493, 8789.944, 9040.986, 8804.829, 8741.21 , 8749.835,\n","        8705.865, 8513.171, 8478.415, 8536.302], dtype=float32)\u003e)"]},"execution_count":70,"metadata":{},"output_type":"execute_result"}],"source":["#Make prediction using model_1 on the test dataset and view the results\n","model_1_preds = make_preds(model_1, test_windows)\n","len(model_1_preds), model_1_preds[:10]"]},{"cell_type":"markdown","metadata":{"id":"W0_Ji-YISWAN"},"source":["\u003e üîë **Note:** With these outputs, our model isn't *forecasting* yet. It's only making predictions on the test dataset. Forecasting would involve a model making predictions into the future, however, the test dataset is only a pseudofuture.\n","\n","Excellent! Now we've got some prediction values, let's use the `evaluate_preds()` we created before to compare them to the ground truth."]},{"cell_type":"code","execution_count":71,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":119,"status":"ok","timestamp":1642360073799,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"MFO8J6COSdJH","outputId":"a947c921-a74c-4983-e008-e1ddda5a9c24"},"outputs":[{"data":{"text/plain":["{'mae': 568.5498,\n"," 'mape': 2.549229,\n"," 'mase': 0.99878454,\n"," 'mse': 1172587.6,\n"," 'rmse': 1082.8608}"]},"execution_count":71,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate preds\n","model_1_results = evaluate_preds(y_true=tf.squeeze(test_labels), # reduce to right shape\n","                                 y_pred=model_1_preds)\n","model_1_results"]},{"cell_type":"markdown","metadata":{"id":"pngUsNo1Se0p"},"source":["How did our model go? Did it beat the naive forecast"]},{"cell_type":"code","execution_count":73,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":131,"status":"ok","timestamp":1642360096436,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"EVG2U1wkSiu9","outputId":"ce2a6076-6ae9-4348-9674-0a53599ff93e"},"outputs":[{"data":{"text/plain":["{'mae': 567.9802,\n"," 'mape': 2.516525,\n"," 'mase': 0.99957,\n"," 'mse': 1147547.0,\n"," 'rmse': 1071.2362}"]},"execution_count":73,"metadata":{},"output_type":"execute_result"}],"source":["naive_results"]},{"cell_type":"markdown","metadata":{"id":"_-TR7BXKSjjM"},"source":["It looks like our na√Øve model beats our first deep model on nearly every metric.\n","\n","That goes to show the power of the na√Øve model and the reason for having a baseline for any machine learning project.\n","\n","And of course, no evaluation would be finished without visualizing the results.\n","\n","Let's use the `plot_time_series()` function to plot `model_1_preds` against the test data."]},{"cell_type":"code","execution_count":96,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":462,"status":"ok","timestamp":1642361362195,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"AbHrWtBkSsIU","outputId":"5940a9c9-5683-413f-f4f4-ae4bb67b63e7"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["offset = 300 #Offset moves the x axis to the right, and shortens it\n","plt.figure(figsize = (10, 7))\n","#Account for the test_window offset and index into test_labels to ensure correct plotting\n","plot_time_series(timesteps = X_test[-len(model_1_preds):], values = test_labels[:, 0], start = offset, label = \"Test data\")\n","plot_time_series(timesteps = X_test[-len(model_1_preds):], values = model_1_preds, start = offset, format=\"-\", label=\"model_1_preds\")"]},{"cell_type":"markdown","metadata":{"id":"Vl2EVOI2UW6n"},"source":["What's wrong with these predictions?\n","\n","As mentioned before, they're on the test dataset. So they're not actual forecasts.\n","\n","With our current model setup, how do you think we'd make forecasts for the future?\n","\n","Have a think about it for now, we'll cover this later on."]},{"cell_type":"markdown","metadata":{"id":"MUzQLKyXTZqn"},"source":["## Model 2: Dense (window = 30, horizon = 1)\n","\n","A na√Øve model is currently beating our handcrafted deep learning model. \n","\n","We can't let this happen.\n","\n","Let's continue our modelling experiments.\n","\n","We'll keep the previous model architecture but use a window size of 30.\n","\n","In other words, we'll use the previous 30 days of Bitcoin prices to try and predict the next day price.\n","\n","![bitcoin prices windowed for 30 days to predict a horizon of 1 day](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-bitcoin-price-window-for-one-month.png)\n","*Example of Bitcoin prices windowed for 30 days to predict a horizon of 1.*\n","\n","\u003e üîë **Note:** Recall from before, the window size (how many timesteps to use to fuel a forecast) and the horizon (how many timesteps to predict into the future) are **hyperparameters**. This means you can tune them to try and find values will result in better performance.\n","\n","We'll start our second modelling experiment by preparing datasets using the functions we created earlier."]},{"cell_type":"code","execution_count":104,"metadata":{"executionInfo":{"elapsed":120,"status":"ok","timestamp":1642361573345,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"2hFDWoPqYH7I"},"outputs":[],"source":["HORIZON = 1 # predict one step at a time\n","WINDOW_SIZE = 30 # use 30 timesteps in the past"]},{"cell_type":"code","execution_count":105,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":120,"status":"ok","timestamp":1642361622213,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"3HU7DgbKYM6_","outputId":"52c70313-1a0b-419f-c916-bf334a5165f0"},"outputs":[{"data":{"text/plain":["(2757, 2757)"]},"execution_count":105,"metadata":{},"output_type":"execute_result"}],"source":["#Make windowed data with appropriate horizon and window sizes\n","full_windows, full_labels = make_windows(prices, window_size = WINDOW_SIZE, horizon = HORIZON)\n","len(full_windows), len(full_labels)"]},{"cell_type":"code","execution_count":107,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":141,"status":"ok","timestamp":1642361667058,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ew-cjUbFYY2X","outputId":"e18d68b2-81f4-47f1-84cd-40c2cc193170"},"outputs":[{"data":{"text/plain":["(2205, 552, 2205, 552)"]},"execution_count":107,"metadata":{},"output_type":"execute_result"}],"source":["#Make trian and testing windows\n","train_windows, test_windows, train_labels, test_labels = make_train_test_splits(windows = full_windows, labels = full_labels)\n","len(train_windows), len(test_windows), len(train_labels), len(test_labels)"]},{"cell_type":"markdown","metadata":{"id":"sYQsBXCQYiKv"},"source":["Data prepared!\n","\n","Now let's construct `model_2`, a model with the same architecture as `model_1` as well as the same training routine."]},{"cell_type":"code","execution_count":108,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22720,"status":"ok","timestamp":1642361910881,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"OB78JcgUYmHg","outputId":"b0f0ce6e-4714-4b73-8084-405fe2e7af7e"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_2_dense/assets\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f65758ac850\u003e"]},"execution_count":108,"metadata":{},"output_type":"execute_result"}],"source":["tf.random.set_seed(42)\n","\n","#Create model (same model as model 1 but data input will be different)\n","model_2 = tf.keras.Sequential([\n","      layers.Dense(128, activation = \"relu\"),\n","      layers.Dense(HORIZON) # need to predict horizon number of steps into the future                         \n","], name = \"model_2_dense\")\n","\n","model_2.compile(loss = \"mae\",\n","                optimizer = tf.keras.optimizers.Adam())\n","\n","model_2.fit(train_windows,\n","            train_labels,\n","            epochs = 100,\n","            batch_size = 128,\n","            verbose = 0,\n","            validation_data = (test_windows, test_labels),\n","            callbacks = [create_model_checkpoint(model_name = model_2.name)])"]},{"cell_type":"code","execution_count":109,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":144,"status":"ok","timestamp":1642361911387,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"E3fvcdBrZZxw","outputId":"c4612ba4-32d5-43dc-f711-76baa2bb6c1c"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 658.0289\n"]},{"data":{"text/plain":["658.0288696289062"]},"execution_count":109,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate model 2 preds\n","model_2.evaluate(test_windows, test_labels)"]},{"cell_type":"markdown","metadata":{"id":"OD8u_RxLZcMv"},"source":["Hmmm... is that the best it did?\n","\n","How about we try loading in the best performing `model_2` which was saved to file thanks to our `ModelCheckpoint` callback."]},{"cell_type":"code","execution_count":110,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":496,"status":"ok","timestamp":1642361928483,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Sca9WeNBZgIA","outputId":"eff08919-f992-44db-ce64-9b2d878a4bb8"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 608.8480\n"]},{"data":{"text/plain":["608.8480224609375"]},"execution_count":110,"metadata":{},"output_type":"execute_result"}],"source":["# Load in best performing model\n","model_2 = tf.keras.models.load_model(\"/content/model_experiment/model_2_dense\")\n","model_2.evaluate(test_windows, test_labels)"]},{"cell_type":"code","execution_count":111,"metadata":{"executionInfo":{"elapsed":296,"status":"ok","timestamp":1642361949128,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"OcB2_UeLZlSw"},"outputs":[],"source":["# Get forecast predictions\n","model_2_preds = make_preds(model_2,\n","                           input_data=test_windows)"]},{"cell_type":"code","execution_count":112,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":115,"status":"ok","timestamp":1642361952977,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"u__6o2S3Zong","outputId":"d0771f9c-1503-4764-cc53-f62d24d12578"},"outputs":[{"data":{"text/plain":["{'mae': 608.8481,\n"," 'mape': 2.7680666,\n"," 'mase': 1.0642723,\n"," 'mse': 1284314.4,\n"," 'rmse': 1133.276}"]},"execution_count":112,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate results for model 2 predictions\n","model_2_results = evaluate_preds(y_true=tf.squeeze(test_labels), # remove 1 dimension of test labels\n","                                 y_pred=model_2_preds)\n","model_2_results"]},{"cell_type":"markdown","metadata":{"id":"yS0ud731Zu-X"},"source":["It looks like `model_2` performs worse than the na√Øve model as well as `model_1`!\n","\n","Does this mean a smaller window size is better? (I'll leave this as a challenge you can experiment with)\n","\n","How do the predictions look?"]},{"cell_type":"code","execution_count":114,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":497,"status":"ok","timestamp":1642361999060,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"pdb7XKvYZzde","outputId":"991e5b66-e817-4dd4-d1b9-7107ae4f7e82"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["offset = 300\n","plt.figure(figsize=(10, 7))\n","# Account for the test_window offset\n","plot_time_series(timesteps=X_test[-len(test_windows):], values=test_labels[:, 0], start=offset, label=\"test_data\")\n","plot_time_series(timesteps=X_test[-len(test_windows):], values=model_2_preds, start=offset, format=\"-\", label=\"model_2_preds\") "]},{"cell_type":"markdown","metadata":{"id":"DoCBIz4RZ0v-"},"source":["## Model 3: Dense (window = 30, horizon = 7)\n","\n","Let's try and predict 7 days ahead given the previous 30 days.\n","\n","First, we'll update the `HORIZON` and `WINDOW_SIZE` variables and create windowed data.\n"]},{"cell_type":"code","execution_count":120,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":109,"status":"ok","timestamp":1642362376581,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ci2406Mnaqpa","outputId":"96fb2e6f-9a10-40f0-86c7-86af3741751b"},"outputs":[{"data":{"text/plain":["(2751, 2751)"]},"execution_count":120,"metadata":{},"output_type":"execute_result"}],"source":["HORIZON = 7\n","WINDOW_SIZE = 30\n","\n","full_windows, full_labels = make_windows(prices, window_size=WINDOW_SIZE, horizon=HORIZON)\n","len(full_windows), len(full_labels)"]},{"cell_type":"code","execution_count":121,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":146,"status":"ok","timestamp":1642362782952,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"mD073ODha4P-","outputId":"c7df3513-3719-47de-b67b-08a1831d4192"},"outputs":[{"data":{"text/plain":["(2200, 551, 2200, 551)"]},"execution_count":121,"metadata":{},"output_type":"execute_result"}],"source":["train_windows, test_windows, train_labels, test_labels = make_train_test_splits(windows=full_windows, labels=full_labels, test_split=0.2)\n","len(train_windows), len(test_windows), len(train_labels), len(test_labels)"]},{"cell_type":"code","execution_count":122,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21109,"status":"ok","timestamp":1642362821630,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Mfn5RCZ7c0Ot","outputId":"602009b4-5a90-4850-9c4e-812f7c10dfe2"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_3_dense/assets\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f6575b617d0\u003e"]},"execution_count":122,"metadata":{},"output_type":"execute_result"}],"source":["tf.random.set_seed(42)\n","\n","# Create model (same as model_1 except with different data input size)\n","model_3 = tf.keras.Sequential([\n","  layers.Dense(128, activation=\"relu\"),\n","  layers.Dense(HORIZON)\n","], name=\"model_3_dense\")\n","\n","model_3.compile(loss=\"mae\",\n","                optimizer=tf.keras.optimizers.Adam())\n","\n","model_3.fit(train_windows,\n","            train_labels,\n","            batch_size=128,\n","            epochs=100,\n","            verbose=0,\n","            validation_data=(test_windows, test_labels),\n","            callbacks=[create_model_checkpoint(model_name=model_3.name)])"]},{"cell_type":"code","execution_count":123,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":274,"status":"ok","timestamp":1642362823035,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"FqtwnXAxc4jA","outputId":"ae8d3add-f640-47fc-cd9a-eed515951886"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 1ms/step - loss: 1322.7781\n"]},{"data":{"text/plain":["1322.778076171875"]},"execution_count":123,"metadata":{},"output_type":"execute_result"}],"source":["# How did our model with a larger window size and horizon go?\n","model_3.evaluate(test_windows, test_labels)"]},{"cell_type":"code","execution_count":125,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":557,"status":"ok","timestamp":1642362853254,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"d1NoTpofc9-m","outputId":"3da203a8-294c-4807-cd6a-a0086efa3470"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 1228.1417\n"]},{"data":{"text/plain":["1228.1417236328125"]},"execution_count":125,"metadata":{},"output_type":"execute_result"}],"source":["# Load in best version of model_3 and evaluate\n","model_3 = tf.keras.models.load_model(\"/content/model_experiment/model_3_dense\")\n","model_3.evaluate(test_windows, test_labels)"]},{"cell_type":"code","execution_count":126,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":527,"status":"ok","timestamp":1642362860732,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"0547lDs0dBHP","outputId":"2733199b-338e-4e5a-de65-0cacb1a02cce"},"outputs":[{"data":{"text/plain":["\u003ctf.Tensor: shape=(5, 7), dtype=float32, numpy=\n","array([[9233.328 , 9332.702 , 9363.651 , 9442.775 , 9401.978 , 9414.001 ,\n","        9280.01  ],\n","       [8911.084 , 9065.984 , 9113.08  , 9026.601 , 8990.093 , 9000.148 ,\n","        9053.433 ],\n","       [8848.506 , 9018.2295, 9006.146 , 8934.578 , 8929.888 , 8856.351 ,\n","        8958.367 ],\n","       [9048.449 , 9058.819 , 8966.749 , 9127.248 , 8982.123 , 9056.629 ,\n","        9002.575 ],\n","       [8958.309 , 9008.146 , 8827.891 , 8995.736 , 9129.433 , 9099.142 ,\n","        8881.021 ]], dtype=float32)\u003e"]},"execution_count":126,"metadata":{},"output_type":"execute_result"}],"source":["# The predictions are going to be 7 steps at a time (this is the HORIZON size)\n","model_3_preds = make_preds(model_3,\n","                           input_data=test_windows)\n","model_3_preds[:5]"]},{"cell_type":"code","execution_count":127,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":159,"status":"ok","timestamp":1642362869718,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"VFZdk4_9dHHf","outputId":"19e4f5fa-4ba8-4134-c076-58489517e624"},"outputs":[{"data":{"text/plain":["{'mae': array([  559.42004 ,   276.0053  ,   298.20258 ,   408.06152 ,\n","          431.32047 ,   526.28064 ,   542.41644 ,   459.79108 ,\n","          490.63736 ,   631.6582  ,   802.51654 ,   731.79333 ,\n","          684.06476 ,   789.71857 ,   563.4593  ,   271.9013  ,\n","          231.86858 ,   258.64767 ,   277.65277 ,   291.5478  ,\n","          105.425575,   132.63156 ,   205.97643 ,   262.20816 ,\n","          169.8651  ,   165.05127 ,   110.21959 ,    83.64655 ,\n","          115.86182 ,   152.87025 ,   279.98862 ,   380.96127 ,\n","          280.21414 ,   271.9101  ,   264.43088 ,   261.91315 ,\n","          330.29108 ,   242.21861 ,   253.72746 ,   245.38596 ,\n","          412.562   ,   128.63539 ,    88.56452 ,    92.15639 ,\n","          100.39704 ,   102.41455 ,    74.52804 ,    94.00349 ,\n","           84.86837 ,    76.64781 ,   108.49679 ,   144.869   ,\n","          187.69133 ,   162.5261  ,   265.83133 ,   391.21323 ,\n","          552.2943  ,   541.77313 ,   522.20886 ,   523.98157 ,\n","          430.13052 ,   276.80893 ,   263.94058 ,   346.60178 ,\n","          449.3755  ,   494.68695 ,   524.3805  ,   532.446   ,\n","          147.137   ,   232.74303 ,   213.22754 ,   407.64008 ,\n","          528.1755  ,   381.76352 ,   288.17203 ,   365.8348  ,\n","          332.32047 ,   393.45953 ,   525.2578  ,   656.50446 ,\n","          811.64105 ,   640.2487  ,   293.96652 ,   163.34152 ,\n","          214.56223 ,   211.33469 ,   237.02092 ,   322.86914 ,\n","          365.69547 ,   561.3761  ,   439.0353  ,   436.3436  ,\n","          359.31528 ,   248.87918 ,   167.8086  ,   263.49414 ,\n","          310.0152  ,   507.3171  ,   621.88586 ,   777.44714 ,\n","          512.9869  ,   292.40332 ,   202.28111 ,   327.75348 ,\n","          356.55942 ,   364.2507  ,   453.20215 ,   574.33777 ,\n","          966.9287  ,   940.8019  ,   871.2143  ,   374.3736  ,\n","          174.17635 ,   241.6317  ,   192.01842 ,   354.8773  ,\n","          305.95822 ,   407.91135 ,   562.78625 ,  1000.76465 ,\n","         1604.6038  ,  2171.9666  ,  1956.6292  ,  2101.5525  ,\n","         2263.4653  ,  2644.0884  ,  1284.6072  ,   680.17303 ,\n","          450.15256 ,   391.20877 ,   514.96826 ,   414.87408 ,\n","          485.30225 ,   301.8972  ,   314.97287 ,   298.2189  ,\n","          351.74908 ,   286.78683 ,   316.8676  ,   322.0376  ,\n","          342.37445 ,   373.64133 ,   283.48422 ,   587.4204  ,\n","          666.5479  ,   415.29117 ,   351.52155 ,   228.57352 ,\n","          281.31793 ,   207.98508 ,   233.22957 ,   522.5366  ,\n","          344.37173 ,   535.6847  ,   403.58908 ,   351.62738 ,\n","          196.2786  ,   204.0111  ,   210.801   ,   162.25252 ,\n","          284.53592 ,   245.85555 ,   225.53348 ,   272.62347 ,\n","          321.16434 ,   365.74408 ,   523.12604 ,   706.972   ,\n","          516.4347  ,   604.03156 ,   827.5575  ,   887.2248  ,\n","          991.22644 ,  1084.594   ,   499.86246 ,   265.87973 ,\n","          353.98926 ,   401.75015 ,   416.3312  ,   392.2098  ,\n","          466.42563 ,   458.61328 ,   622.09735 ,   973.6868  ,\n","          865.1095  ,   278.56168 ,   516.1124  ,   737.87164 ,\n","          363.9961  ,   231.46066 ,   265.72015 ,   234.37752 ,\n","          366.99582 ,   436.41098 ,   645.9733  ,   610.24457 ,\n","          342.28433 ,   262.02386 ,   323.00375 ,   306.09793 ,\n","          523.2842  ,   736.6734  ,   707.1592  ,   451.09836 ,\n","          301.78976 ,   144.70912 ,   199.37123 ,   336.74512 ,\n","          146.3319  ,   138.04367 ,   307.15137 ,   179.54256 ,\n","          165.28293 ,   204.35352 ,   271.4813  ,   372.5491  ,\n","          525.0003  ,   147.24805 ,   107.68108 ,   150.50168 ,\n","          137.84389 ,   209.29674 ,   181.5173  ,   185.5844  ,\n","          145.70578 ,   140.22517 ,   158.3178  ,   177.3323  ,\n","          274.27832 ,   572.3242  ,   270.27078 ,   279.54477 ,\n","          133.47781 ,    55.439594,    81.092636,    68.80943 ,\n","          103.634346,   153.1716  ,   149.0791  ,   168.81125 ,\n","           74.92425 ,   162.96986 ,    56.424107,    93.80176 ,\n","          210.05315 ,   146.7373  ,   143.01674 ,    74.46889 ,\n","           83.6822  ,   123.72587 ,   171.18959 ,   152.87207 ,\n","          176.66936 ,   192.75906 ,   269.69754 ,   310.21527 ,\n","          603.6744  ,   699.2436  ,   812.1265  ,   911.0148  ,\n","         1125.0621  ,  1342.5162  ,  1313.9249  ,   521.97644 ,\n","          205.17201 ,   259.8019  ,   227.63268 ,   301.16617 ,\n","          385.06558 ,   150.06682 ,   131.36873 ,   206.08928 ,\n","          130.17215 ,   285.26996 ,   290.4891  ,   284.52246 ,\n","          233.101   ,   336.17328 ,   216.41406 ,   185.488   ,\n","          164.74861 ,   193.0219  ,   168.33244 ,   244.41086 ,\n","          427.41226 ,   597.6722  ,   279.71664 ,   304.67145 ,\n","          176.03697 ,   239.18875 ,   355.67758 ,   290.50726 ,\n","          171.10756 ,   184.33385 ,   261.0728  ,   350.27106 ,\n","          577.03156 ,   771.4784  ,  1050.9551  ,  1481.2781  ,\n","         1378.0541  ,   883.13226 ,   572.96063 ,   130.63058 ,\n","          206.059   ,   197.40959 ,   295.65317 ,   404.69308 ,\n","          398.2896  ,   417.95145 ,   438.75586 ,   388.33496 ,\n","          214.90555 ,   105.01005 ,   325.9368  ,   447.4184  ,\n","          361.00977 ,   496.7426  ,   307.85727 ,   158.863   ,\n","          169.79129 ,   313.21262 ,   134.87863 ,   118.55971 ,\n","          148.13351 ,   215.45215 ,   311.0682  ,   274.3397  ,\n","          205.59319 ,   154.73787 ,   170.1815  ,   233.73215 ,\n","          328.0646  ,   456.9986  ,   544.226   ,   657.4069  ,\n","          596.3923  ,   493.66547 ,   158.6808  ,    92.03822 ,\n","          306.65457 ,   252.29018 ,   425.00195 ,   607.69196 ,\n","          757.7344  ,  1028.1162  ,  1196.5586  ,  1187.6671  ,\n","         1222.1669  ,   399.41867 ,   264.33035 ,   223.53445 ,\n","          348.61246 ,   267.4036  ,   292.8566  ,   226.46219 ,\n","          163.67912 ,   388.74594 ,   616.5091  ,   715.7144  ,\n","          884.2673  ,  1118.2787  ,  1178.191   ,  1176.8744  ,\n","          447.41656 ,   517.2567  ,   402.29672 ,   321.86285 ,\n","          541.6454  ,   816.1635  ,   814.1642  ,   806.601   ,\n","         1098.4758  ,  1303.5609  ,  1819.226   ,  1520.301   ,\n","          975.065   ,   500.0745  ,   451.08258 ,   624.44836 ,\n","          932.54913 ,  1119.5061  ,  1098.8876  ,  1111.4788  ,\n","          981.3917  ,   774.1716  ,  1216.6174  ,  1347.8223  ,\n","         1275.0948  ,   297.71875 ,   200.9509  ,   508.31027 ,\n","          814.637   ,   605.5293  ,   654.36163 ,   563.6462  ,\n","          596.4467  ,   581.3574  ,   830.5762  ,  1476.597   ,\n","         2502.964   ,  2741.3472  ,  3085.4458  ,  3333.7878  ,\n","         3539.5178  ,  2340.6372  ,   909.3376  ,   490.21567 ,\n","          972.10657 ,  1305.3005  ,  1392.7361  ,  1755.094   ,\n","         2546.695   ,  3059.948   ,  3003.2554  ,  2345.634   ,\n","         2578.2778  ,  2814.2083  ,  3490.5386  ,  3260.6985  ,\n","         4013.9187  ,  4978.504   ,  4385.956   ,  4103.263   ,\n","         4391.792   ,  3081.4644  ,  2669.2148  ,  2414.4084  ,\n","         4396.1475  ,  5788.4326  ,  5140.9053  ,  1273.4592  ,\n","         1228.788   ,   701.4922  ,  2658.4453  ,  3027.572   ,\n","         3027.8152  ,  3052.0781  ,  3045.396   ,  3537.386   ,\n","         3745.5918  ,   900.0968  ,  1300.6917  ,  1302.6451  ,\n","         1263.2556  ,  1302.2109  ,  2369.464   ,  3758.8523  ,\n","         3492.7053  ,  2445.4978  ,  2877.3337  ,  3181.6016  ,\n","         4807.9404  ,  5343.167   ,  4497.2007  ,  4869.027   ,\n","         6087.3286  ,  6035.864   ,  8042.9697  ,  4592.853   ,\n","         1518.462   ,  1500.4481  ,  1698.0397  ,  2548.5916  ,\n","         2541.6692  ,  3393.869   ,  2871.6948  ,  3457.3716  ,\n","         2717.7974  ,  3099.4827  ,  5651.3228  ,  6983.054   ,\n","        10184.632   ,  8898.209   ,  4790.104   ,  2860.8967  ,\n","         2013.5424  ,  1576.1022  ,  2593.8655  ,  3928.4883  ,\n","         2703.8203  ,  2768.889   ,  3018.4146  ,  3906.845   ,\n","         5233.6826  ,  6350.7373  ,  6068.0386  ,  5488.909   ,\n","         4320.8374  ,  2024.2377  ,  1894.8945  ,  1482.7812  ,\n","         1518.4553  ,  2880.513   ,  1606.4152  ,  1566.9939  ,\n","         2957.5447  ,  4173.5615  ,  5676.796   ,  5417.197   ,\n","         5249.5586  ,  1434.1613  ,  2133.1199  ,  2881.859   ,\n","         3821.452   ,  4351.3306  ,  2311.1194  ,  2531.862   ,\n","         1582.3064  ,   743.0675  ,   740.6685  ,   830.79297 ,\n","          862.8683  ,   569.9665  ,  1134.5519  ,  1382.0139  ,\n","         1559.6451  ,  2509.4558  ,  3264.3242  ,  3508.3386  ,\n","         2416.577   ,  2335.6223  ,  2526.2778  ,  3310.1401  ,\n","         5526.7583  ,  7300.811   ,  8667.999   ,  8214.251   ,\n","         6219.2544  ,  4510.4214  ,  4505.271   ,  2656.5486  ,\n","         1991.4564  ,  3071.716   ,  4366.595   ,  6207.0596  ,\n","         3825.3962  ,  1774.5725  ,  2043.5586  ,  2223.3137  ,\n","         1501.3549  ,  1830.9236  ,  1363.1423  ,  2061.2495  ,\n","         2064.8828  ,  1645.9509  ,  2415.7795  ,  3431.0178  ,\n","         5687.66    ,  7175.9517  ,  7918.8955  ], dtype=float32),\n"," 'mape': array([ 6.383133  ,  3.1873055 ,  3.4441986 ,  4.7474217 ,  5.087393  ,\n","         6.2807307 ,  6.541848  ,  5.720405  ,  6.363076  ,  8.315235  ,\n","        10.800634  , 10.020564  ,  9.454184  , 10.886435  ,  7.8023076 ,\n","         3.7682526 ,  3.155776  ,  3.437866  ,  3.6989737 ,  3.8828704 ,\n","         1.3986939 ,  1.7881403 ,  2.8099759 ,  3.586232  ,  2.3180187 ,\n","         2.242667  ,  1.4899626 ,  1.1336712 ,  1.5688592 ,  2.1066084 ,\n","         3.8841438 ,  5.2990785 ,  3.9507866 ,  3.9636142 ,  3.8526888 ,\n","         3.8195531 ,  4.802899  ,  3.5313706 ,  3.6780703 ,  3.46592   ,\n","         5.6844716 ,  1.781396  ,  1.2288109 ,  1.2746593 ,  1.3930616 ,\n","         1.4077994 ,  1.0244621 ,  1.2907869 ,  1.1759014 ,  1.0764247 ,\n","         1.5163736 ,  2.0254838 ,  2.6292856 ,  2.2210493 ,  3.4710693 ,\n","         5.017667  ,  7.0700006 ,  6.8297133 ,  6.527853  ,  6.520673  ,\n","         5.3245935 ,  3.3024843 ,  3.071215  ,  3.98927   ,  5.1149187 ,\n","         5.61996   ,  5.953922  ,  6.0512958 ,  1.6630603 ,  2.6762862 ,\n","         2.4792778 ,  4.7584987 ,  6.204536  ,  4.5032034 ,  3.402323  ,\n","         4.296131  ,  3.8193192 ,  4.302126  ,  5.675283  ,  7.0431447 ,\n","         8.695885  ,  6.8402886 ,  3.1351395 ,  1.7247756 ,  2.2906337 ,\n","         2.239771  ,  2.4867249 ,  3.3104722 ,  3.7112315 ,  5.63722   ,\n","         4.333159  ,  4.287891  ,  3.5142124 ,  2.4285538 ,  1.6611431 ,\n","         2.6178567 ,  3.1315804 ,  5.1447906 ,  6.353043  ,  7.9626427 ,\n","         5.287782  ,  3.019717  ,  2.0546832 ,  3.4092698 ,  3.8586323 ,\n","         4.0400887 ,  5.076718  ,  6.4802604 , 11.007784  , 10.7414465 ,\n","         9.975953  ,  4.3021564 ,  1.9976255 ,  2.7215734 ,  2.1505435 ,\n","         4.012396  ,  3.618029  ,  4.9309316 ,  6.8522887 , 14.579784  ,\n","        24.689518  , 35.3894    , 34.018784  , 38.566185  , 41.93856   ,\n","        49.170227  , 23.934246  , 12.76731   ,  8.060933  ,  6.7705026 ,\n","         8.406375  ,  6.574843  ,  7.4993    ,  4.5726724 ,  5.019635  ,\n","         4.6231947 ,  5.3266654 ,  4.374331  ,  5.0321302 ,  5.182704  ,\n","         5.5057526 ,  5.9565516 ,  4.374629  ,  8.735546  ,  9.690324  ,\n","         5.9229927 ,  4.960857  ,  3.2358913 ,  3.916653  ,  2.960389  ,\n","         3.2594497 ,  7.427887  ,  4.961269  ,  7.767851  ,  5.8759427 ,\n","         5.0899153 ,  2.7828124 ,  2.8943253 ,  2.9632704 ,  2.2983522 ,\n","         3.979706  ,  3.4080956 ,  3.0998034 ,  3.7605264 ,  4.432523  ,\n","         4.82497   ,  6.85255   ,  8.808609  ,  6.1029444 ,  6.961776  ,\n","         9.447651  , 10.045695  , 11.199372  , 12.213851  ,  5.522779  ,\n","         2.7715328 ,  3.6357415 ,  4.1950994 ,  4.3852634 ,  4.1972456 ,\n","         4.983673  ,  5.084654  ,  7.0168824 , 10.815913  ,  9.642549  ,\n","         3.1320593 ,  5.3848643 ,  7.675372  ,  3.774346  ,  2.4561572 ,\n","         2.8501215 ,  2.5092413 ,  3.9920144 ,  4.77418   ,  7.1354446 ,\n","         6.7556424 ,  3.8018935 ,  2.8637733 ,  3.509565  ,  3.2845404 ,\n","         5.372305  ,  7.5835423 ,  7.2673955 ,  4.5891204 ,  3.0293348 ,\n","         1.4613218 ,  1.9975586 ,  3.4842055 ,  1.5093697 ,  1.4179296 ,\n","         3.2048676 ,  1.8887612 ,  1.7362866 ,  2.1689427 ,  2.8873942 ,\n","         3.9644148 ,  5.5802307 ,  1.5622852 ,  1.149674  ,  1.6047982 ,\n","         1.4754645 ,  2.231686  ,  1.9317787 ,  1.9744525 ,  1.5439414 ,\n","         1.4976854 ,  1.6820679 ,  1.897119  ,  2.9943423 ,  6.2459874 ,\n","         2.953745  ,  3.064406  ,  1.4674717 ,  0.60568035,  0.8881008 ,\n","         0.74896526,  1.1339073 ,  1.6680954 ,  1.608187  ,  1.8191533 ,\n","         0.8100192 ,  1.7489618 ,  0.6075544 ,  1.0088054 ,  2.2717352 ,\n","         1.5915908 ,  1.5513337 ,  0.80798715,  0.91097534,  1.3482684 ,\n","         1.8638477 ,  1.6469681 ,  1.8685368 ,  2.02392   ,  2.8186364 ,\n","         3.1947546 ,  5.8327208 ,  6.557446  ,  7.4054317 ,  8.245705  ,\n","        10.09411   , 11.89811   , 11.6254015 ,  4.5898523 ,  1.7863373 ,\n","         2.2723162 ,  1.9803488 ,  2.6221123 ,  3.3960602 ,  1.3109515 ,\n","         1.1341455 ,  1.759563  ,  1.128492  ,  2.4649835 ,  2.5131893 ,\n","         2.4598405 ,  2.0161705 ,  2.8633106 ,  1.7830117 ,  1.5193297 ,\n","         1.3595337 ,  1.614378  ,  1.4105192 ,  2.059183  ,  3.6486063 ,\n","         5.1331215 ,  2.424635  ,  2.6510155 ,  1.5341433 ,  2.09643   ,\n","         3.1137257 ,  2.539438  ,  1.4683777 ,  1.568614  ,  2.2879937 ,\n","         3.1728706 ,  5.3861685 ,  7.392792  , 10.086266  , 14.331542  ,\n","        13.409384  ,  8.636568  ,  5.616763  ,  1.2732922 ,  1.9986842 ,\n","         1.8976632 ,  2.7845583 ,  3.754111  ,  3.6711032 ,  3.8447108 ,\n","         4.0184684 ,  3.5524209 ,  1.9625986 ,  0.98632026,  3.0846426 ,\n","         4.236171  ,  3.4315605 ,  4.7224817 ,  2.9343495 ,  1.5163301 ,\n","         1.5953581 ,  2.9111507 ,  1.2543285 ,  1.1071885 ,  1.3919702 ,\n","         2.0292516 ,  2.9253087 ,  2.5853817 ,  1.9386241 ,  1.4526908 ,\n","         1.5694046 ,  2.1026871 ,  2.9367437 ,  4.04099   ,  4.7796817 ,\n","         5.770069  ,  5.2124357 ,  4.3052373 ,  1.3792781 ,  0.8005689 ,\n","         2.684975  ,  2.188901  ,  3.448495  ,  4.792791  ,  5.909497  ,\n","         7.955139  ,  9.233251  ,  9.119957  ,  9.261035  ,  2.9975643 ,\n","         1.9903    ,  1.6718756 ,  2.58726   ,  1.9542675 ,  2.1405175 ,\n","         1.6731445 ,  1.178066  ,  2.6046596 ,  4.0535207 ,  4.755552  ,\n","         5.835533  ,  7.3285947 ,  7.6915874 ,  7.6137385 ,  2.8398395 ,\n","         3.3314493 ,  2.5113592 ,  2.0298178 ,  3.3189912 ,  4.8585114 ,\n","         4.7158113 ,  4.6272564 ,  6.2273393 ,  7.223699  ,  9.988826  ,\n","         8.288783  ,  5.237044  ,  2.6687312 ,  2.4694824 ,  3.5809126 ,\n","         5.3039985 ,  6.3736773 ,  6.23859   ,  6.344448  ,  5.5967784 ,\n","         4.148265  ,  6.354063  ,  7.0523105 ,  6.644291  ,  1.5557402 ,\n","         1.0602225 ,  2.6997712 ,  4.3472815 ,  3.2732253 ,  3.5330117 ,\n","         3.0514553 ,  3.2215595 ,  3.1218312 ,  4.204726  ,  6.9420166 ,\n","        11.60342   , 12.176869  , 13.453348  , 14.439218  , 15.278827  ,\n","        10.020564  ,  3.8659077 ,  2.0333557 ,  3.9704196 ,  5.2561073 ,\n","         5.4017196 ,  6.697758  ,  9.399555  , 11.09861   , 10.672504  ,\n","         7.815193  ,  8.272939  ,  8.983307  , 10.819359  ,  9.587128  ,\n","        11.14034   , 13.304127  , 11.300749  , 10.6548    , 11.274142  ,\n","         7.8193297 ,  6.9860325 ,  6.769106  , 12.204499  , 16.113087  ,\n","        14.353757  ,  3.5346606 ,  3.313356  ,  1.8951993 ,  7.7469826 ,\n","         9.033199  ,  9.231903  ,  9.467803  ,  9.404374  , 11.023445  ,\n","        11.800318  ,  2.8124304 ,  4.0199337 ,  3.950694  ,  3.7909858 ,\n","         3.9367132 ,  6.9262767 , 10.6855    ,  9.707618  ,  6.670374  ,\n","         7.674061  ,  8.309083  , 11.966503  , 12.519148  , 10.110762  ,\n","        10.707312  , 13.19876   , 12.978641  , 17.091331  ,  9.630076  ,\n","         3.1794276 ,  2.9887314 ,  3.3808594 ,  4.881789  ,  4.761776  ,\n","         6.241043  ,  5.2421517 ,  6.347189  ,  5.175462  ,  6.029026  ,\n","        11.695898  , 14.624441  , 21.540733  , 18.883375  , 10.238024  ,\n","         6.1705375 ,  4.2898383 ,  3.2523804 ,  5.2908754 ,  7.9320273 ,\n","         5.3697076 ,  5.336057  ,  5.5906935 ,  7.074054  ,  9.375492  ,\n","        11.086345  , 10.371183  ,  9.408301  ,  7.407569  ,  3.3996441 ,\n","         3.2378588 ,  2.5028694 ,  2.6447754 ,  5.0076265 ,  2.8739963 ,\n","         2.8070548 ,  5.404184  ,  7.739886  , 10.505011  , 10.031975  ,\n","         9.742052  ,  2.6674068 ,  3.8989453 ,  5.0200095 ,  6.615648  ,\n","         7.476633  ,  3.9717202 ,  4.3323865 ,  2.6973286 ,  1.2728416 ,\n","         1.2849373 ,  1.4467553 ,  1.4952526 ,  0.98913246,  1.9539042 ,\n","         2.3853426 ,  2.5916712 ,  4.069341  ,  5.2415066 ,  5.630094  ,\n","         3.8688655 ,  3.7874763 ,  4.2134275 ,  5.7756824 ,  9.770691  ,\n","        13.159069  , 16.036814  , 15.505876  , 12.111253  ,  8.840368  ,\n","         8.823597  ,  5.2454715 ,  3.878957  ,  5.697788  ,  7.8928275 ,\n","        11.124117  ,  6.7739263 ,  3.14318   ,  3.6283498 ,  3.892282  ,\n","         2.6967316 ,  3.2670074 ,  2.4376302 ,  3.6690652 ,  3.585248  ,\n","         2.9584897 ,  4.53231   ,  6.682528  , 11.290611  , 14.65142   ,\n","        16.85183   ], dtype=float32),\n"," 'mase': 2.1854093,\n"," 'mse': array([3.33394000e+05, 1.03724445e+05, 9.75477734e+04, 1.80555578e+05,\n","        2.26793469e+05, 3.19683781e+05, 3.31785156e+05, 2.79899312e+05,\n","        3.70252281e+05, 5.32036625e+05, 7.95682000e+05, 6.82951375e+05,\n","        5.56032125e+05, 6.60285000e+05, 3.52380906e+05, 1.16671945e+05,\n","        8.00336719e+04, 9.34664531e+04, 9.21393672e+04, 1.04041875e+05,\n","        1.96615488e+04, 2.64791699e+04, 6.18707188e+04, 1.02955797e+05,\n","        4.36306016e+04, 3.45583516e+04, 1.73448262e+04, 1.06492334e+04,\n","        1.50544912e+04, 3.00173652e+04, 9.54852891e+04, 1.50687219e+05,\n","        9.55566953e+04, 1.24640773e+05, 1.22260398e+05, 1.22192852e+05,\n","        1.64926156e+05, 1.04291938e+05, 1.04716102e+05, 7.14317812e+04,\n","        1.85622641e+05, 2.40555898e+04, 1.04443379e+04, 1.08766943e+04,\n","        1.81710645e+04, 1.34194131e+04, 7.59755225e+03, 1.30255479e+04,\n","        9.67257910e+03, 1.21373447e+04, 1.71709180e+04, 2.91904902e+04,\n","        5.34009375e+04, 4.30802227e+04, 1.54338922e+05, 2.63090000e+05,\n","        3.92752844e+05, 3.85401812e+05, 3.42097688e+05, 3.03134500e+05,\n","        2.02138109e+05, 1.61282828e+05, 1.68757281e+05, 2.24789250e+05,\n","        3.34351000e+05, 3.17256219e+05, 3.24330469e+05, 2.94770938e+05,\n","        3.21403379e+04, 7.15406328e+04, 6.01047383e+04, 1.94125781e+05,\n","        2.96338000e+05, 1.73771594e+05, 1.10524422e+05, 1.69625984e+05,\n","        1.34109234e+05, 2.44139016e+05, 3.85172812e+05, 5.37043375e+05,\n","        6.99801562e+05, 4.24303656e+05, 9.64800000e+04, 4.17386289e+04,\n","        5.79252109e+04, 5.76000039e+04, 7.16003516e+04, 1.40586828e+05,\n","        1.72043281e+05, 3.53915438e+05, 2.63749906e+05, 2.47050219e+05,\n","        1.52179578e+05, 8.25143125e+04, 3.97282109e+04, 7.46978125e+04,\n","        1.56581328e+05, 3.18724781e+05, 4.61892062e+05, 6.32013812e+05,\n","        3.03695938e+05, 1.08098164e+05, 5.32101680e+04, 1.21410133e+05,\n","        2.14644328e+05, 2.69117562e+05, 3.37814000e+05, 4.53375344e+05,\n","        1.08349212e+06, 9.69460000e+05, 7.77834312e+05, 1.66238922e+05,\n","        4.37044336e+04, 7.97520547e+04, 5.02197266e+04, 1.45318984e+05,\n","        1.32896734e+05, 2.33199766e+05, 3.67667812e+05, 1.87499225e+06,\n","        3.82544675e+06, 6.11114400e+06, 5.20348900e+06, 5.72459100e+06,\n","        5.94761650e+06, 7.06636100e+06, 1.77607712e+06, 5.71786875e+05,\n","        2.38541328e+05, 1.96971125e+05, 3.72253031e+05, 2.90039969e+05,\n","        3.16406531e+05, 1.58819891e+05, 1.78927250e+05, 1.23254617e+05,\n","        1.53376625e+05, 1.07515883e+05, 1.52277422e+05, 1.95200203e+05,\n","        2.03025844e+05, 2.16209500e+05, 1.07583070e+05, 4.19026469e+05,\n","        5.16380344e+05, 2.37964578e+05, 1.60922766e+05, 6.32510664e+04,\n","        1.01699102e+05, 6.11560195e+04, 5.93905352e+04, 3.07242906e+05,\n","        1.51582078e+05, 3.16971906e+05, 2.01775000e+05, 1.35609594e+05,\n","        4.69756445e+04, 5.22583164e+04, 6.42655742e+04, 3.81848828e+04,\n","        1.08177227e+05, 9.06808047e+04, 6.81520859e+04, 8.95860234e+04,\n","        1.13006180e+05, 1.79956609e+05, 3.22909750e+05, 7.15943688e+05,\n","        5.49820938e+05, 6.98467312e+05, 1.05350462e+06, 1.06671038e+06,\n","        1.13801400e+06, 1.18490050e+06, 3.22156281e+05, 2.08278234e+05,\n","        2.85719562e+05, 2.43085984e+05, 2.06137266e+05, 2.00610203e+05,\n","        2.55878719e+05, 3.12861438e+05, 6.31455375e+05, 1.10615862e+06,\n","        9.01712938e+05, 1.76444016e+05, 3.40770812e+05, 5.88025688e+05,\n","        1.55192500e+05, 7.37252344e+04, 1.07882586e+05, 7.47378125e+04,\n","        2.11414594e+05, 2.25098469e+05, 4.67451500e+05, 3.93355188e+05,\n","        1.56228234e+05, 8.65428203e+04, 1.18756789e+05, 1.16208570e+05,\n","        4.17561219e+05, 6.82756562e+05, 5.77383688e+05, 2.78386688e+05,\n","        1.91040875e+05, 4.51314023e+04, 9.66046719e+04, 1.35987234e+05,\n","        3.46512305e+04, 2.73080371e+04, 1.20861430e+05, 5.39484766e+04,\n","        4.05714727e+04, 7.52649922e+04, 9.88261641e+04, 1.81728578e+05,\n","        2.87719406e+05, 3.26745312e+04, 1.88171465e+04, 3.13027598e+04,\n","        3.67352773e+04, 5.45493164e+04, 4.20905508e+04, 3.76223359e+04,\n","        2.50840273e+04, 3.01902812e+04, 3.87692148e+04, 4.62195898e+04,\n","        9.53595703e+04, 3.34977250e+05, 8.52137344e+04, 8.93841406e+04,\n","        2.57094395e+04, 4.94461572e+03, 8.79626367e+03, 8.49029102e+03,\n","        1.57091475e+04, 3.55610195e+04, 3.16384863e+04, 3.69771133e+04,\n","        6.76249902e+03, 3.62076914e+04, 4.05944751e+03, 1.35008799e+04,\n","        4.68076211e+04, 2.68615254e+04, 2.30234590e+04, 7.54533350e+03,\n","        9.36424023e+03, 1.82010156e+04, 3.38128711e+04, 2.85906777e+04,\n","        5.20125000e+04, 6.49524297e+04, 1.04471016e+05, 1.46007438e+05,\n","        7.14144688e+05, 9.58125312e+05, 1.22509600e+06, 1.29478712e+06,\n","        1.68467775e+06, 2.08443112e+06, 1.80137138e+06, 3.43922781e+05,\n","        8.38062969e+04, 8.79114766e+04, 6.41988086e+04, 1.04314453e+05,\n","        2.05045047e+05, 3.14043750e+04, 2.54131523e+04, 4.96176289e+04,\n","        3.26739727e+04, 1.10487914e+05, 1.30131867e+05, 1.24735758e+05,\n","        9.50999453e+04, 1.58834859e+05, 9.33186641e+04, 9.37423594e+04,\n","        5.72294297e+04, 5.36821914e+04, 4.13911602e+04, 7.44215391e+04,\n","        2.05739219e+05, 3.66187438e+05, 1.16855016e+05, 1.17204914e+05,\n","        4.12653633e+04, 9.10168750e+04, 1.75218281e+05, 1.09306273e+05,\n","        5.18959297e+04, 9.13076484e+04, 1.20695414e+05, 2.13619031e+05,\n","        4.99358281e+05, 9.10010562e+05, 1.38975025e+06, 2.40428150e+06,\n","        1.95363112e+06, 8.23527188e+05, 3.59575312e+05, 2.67775332e+04,\n","        4.69525234e+04, 7.13935547e+04, 1.49703359e+05, 2.84783344e+05,\n","        2.56093453e+05, 2.42521719e+05, 2.33469703e+05, 1.67033984e+05,\n","        5.82417461e+04, 2.51238906e+04, 1.46595703e+05, 2.57371109e+05,\n","        1.79850125e+05, 3.15337250e+05, 1.43075406e+05, 5.45757695e+04,\n","        4.02590859e+04, 1.04498383e+05, 2.46403535e+04, 1.82447305e+04,\n","        3.22257832e+04, 7.33687812e+04, 1.17344664e+05, 9.29680547e+04,\n","        5.05981641e+04, 3.16992832e+04, 4.74245938e+04, 1.20601891e+05,\n","        1.93126094e+05, 3.08337844e+05, 4.02318344e+05, 4.99645938e+05,\n","        3.91438750e+05, 2.66566938e+05, 3.88146797e+04, 1.24275049e+04,\n","        1.16664797e+05, 7.14946953e+04, 3.96406812e+05, 7.48489312e+05,\n","        9.75264562e+05, 1.51613375e+06, 1.74917412e+06, 1.57698800e+06,\n","        1.58133600e+06, 2.45576719e+05, 9.23140078e+04, 6.55380859e+04,\n","        1.31787750e+05, 1.15113414e+05, 1.02307930e+05, 7.25379219e+04,\n","        5.40419141e+04, 5.24896812e+05, 9.50770125e+05, 9.26232125e+05,\n","        1.11365888e+06, 1.60103862e+06, 1.57692200e+06, 1.47775112e+06,\n","        3.83324469e+05, 3.69744031e+05, 2.38819047e+05, 1.43169625e+05,\n","        4.32763156e+05, 1.06803788e+06, 1.17400338e+06, 1.00694612e+06,\n","        1.58363538e+06, 2.21012875e+06, 3.77491825e+06, 2.50035525e+06,\n","        1.18956588e+06, 3.58880188e+05, 3.03592812e+05, 8.44406500e+05,\n","        1.34112062e+06, 1.83813462e+06, 1.75363200e+06, 1.99065762e+06,\n","        1.55192062e+06, 7.54376062e+05, 1.98689962e+06, 1.98100862e+06,\n","        1.75947562e+06, 1.28232172e+05, 5.40807266e+04, 3.39730281e+05,\n","        7.68867188e+05, 5.17358750e+05, 5.58042312e+05, 4.50932219e+05,\n","        4.61642469e+05, 4.06037281e+05, 1.20640425e+06, 4.41879750e+06,\n","        9.13147900e+06, 1.13353390e+07, 1.30212570e+07, 1.33741100e+07,\n","        1.30366630e+07, 5.69693500e+06, 1.04668162e+06, 5.55939375e+05,\n","        1.45060125e+06, 2.21110100e+06, 2.93645750e+06, 4.17465325e+06,\n","        8.86809600e+06, 1.12878900e+07, 1.06687820e+07, 9.75505400e+06,\n","        1.13975120e+07, 1.14823420e+07, 1.65296480e+07, 1.71318060e+07,\n","        2.64630180e+07, 3.67715960e+07, 2.96931160e+07, 2.13515460e+07,\n","        2.45664100e+07, 1.40850790e+07, 7.98280700e+06, 1.00049820e+07,\n","        2.39863500e+07, 3.69922320e+07, 2.79343300e+07, 2.16239375e+06,\n","        1.95902162e+06, 9.66099125e+05, 8.49763400e+06, 1.26890310e+07,\n","        1.31594640e+07, 1.40178720e+07, 1.10246220e+07, 1.47196250e+07,\n","        1.47363250e+07, 1.04302138e+06, 2.51192675e+06, 2.82747050e+06,\n","        2.01651562e+06, 2.33862700e+06, 6.62512800e+06, 1.67676470e+07,\n","        1.61179680e+07, 8.83295300e+06, 1.08211450e+07, 1.35291040e+07,\n","        3.16443400e+07, 4.43336120e+07, 3.55703480e+07, 3.59946480e+07,\n","        4.78694120e+07, 4.24167600e+07, 6.63626600e+07, 2.33264860e+07,\n","        3.14468200e+06, 4.87435350e+06, 4.78159750e+06, 1.07451600e+07,\n","        1.08128370e+07, 1.72822160e+07, 1.14444390e+07, 1.49543870e+07,\n","        8.87318500e+06, 1.16514550e+07, 4.61954440e+07, 6.23508280e+07,\n","        1.12169384e+08, 8.19101200e+07, 2.64749020e+07, 1.25423810e+07,\n","        5.62378700e+06, 3.60028975e+06, 7.83456250e+06, 1.69358820e+07,\n","        1.06481170e+07, 1.23299020e+07, 1.75144200e+07, 2.47907220e+07,\n","        3.78497200e+07, 5.26399120e+07, 4.78895560e+07, 3.45402760e+07,\n","        2.01211540e+07, 7.52182800e+06, 4.23857350e+06, 3.06185050e+06,\n","        3.44073350e+06, 9.38222300e+06, 5.84576100e+06, 4.33842200e+06,\n","        1.37386530e+07, 2.51135820e+07, 3.83723960e+07, 3.33786180e+07,\n","        3.01767680e+07, 3.73629075e+06, 6.47484450e+06, 1.15425380e+07,\n","        1.68360760e+07, 2.10577000e+07, 5.81830550e+06, 6.72836650e+06,\n","        3.22983575e+06, 6.79807688e+05, 7.93674000e+05, 1.18572462e+06,\n","        9.69263312e+05, 6.35788812e+05, 1.58890925e+06, 2.93819975e+06,\n","        4.41733200e+06, 1.04396230e+07, 1.59341440e+07, 1.58365250e+07,\n","        8.02327050e+06, 6.90858150e+06, 7.81497500e+06, 1.88693180e+07,\n","        4.18421640e+07, 6.20995120e+07, 8.48631200e+07, 7.41613920e+07,\n","        4.62633920e+07, 2.55688940e+07, 2.45755620e+07, 1.02823180e+07,\n","        5.33402050e+06, 1.16097650e+07, 2.34686680e+07, 4.12730560e+07,\n","        1.70490560e+07, 3.89742050e+06, 4.65160700e+06, 6.30977050e+06,\n","        3.60876825e+06, 4.55321650e+06, 3.40397625e+06, 5.22099650e+06,\n","        5.63631050e+06, 4.36895950e+06, 9.38240800e+06, 2.11363800e+07,\n","        4.66035280e+07, 6.60825960e+07, 8.01464320e+07], dtype=float32),\n"," 'rmse': array([  577.4028  ,   322.0628  ,   312.32635 ,   424.9183  ,\n","          476.2284  ,   565.4059  ,   576.00793 ,   529.05505 ,\n","          608.4836  ,   729.4084  ,   892.01    ,   826.4087  ,\n","          745.67566 ,   812.5792  ,   593.6168  ,   341.57275 ,\n","          282.90222 ,   305.72284 ,   303.54468 ,   322.55524 ,\n","          140.21965 ,   162.72421 ,   248.73827 ,   320.86728 ,\n","          208.87941 ,   185.89874 ,   131.69975 ,   103.195114,\n","          122.69674 ,   173.2552  ,   309.00693 ,   388.18454 ,\n","          309.12244 ,   353.045   ,   349.65756 ,   349.56097 ,\n","          406.11105 ,   322.94263 ,   323.59863 ,   267.26724 ,\n","          430.83945 ,   155.09865 ,   102.19755 ,   104.29139 ,\n","          134.8001  ,   115.84219 ,    87.16393 ,   114.129524,\n","           98.349266,   110.16961 ,   131.03784 ,   170.85223 ,\n","          231.08643 ,   207.55775 ,   392.8599  ,   512.92303 ,\n","          626.7     ,   620.80743 ,   584.8912  ,   550.5765  ,\n","          449.59775 ,   401.60034 ,   410.80078 ,   474.11948 ,\n","          578.23083 ,   563.255   ,   569.5002  ,   542.92816 ,\n","          179.27727 ,   267.4708  ,   245.16267 ,   440.59705 ,\n","          544.3694  ,   416.85922 ,   332.45215 ,   411.85672 ,\n","          366.20926 ,   494.10425 ,   620.623   ,   732.83234 ,\n","          836.54144 ,   651.3859  ,   310.6123  ,   204.30034 ,\n","          240.67656 ,   239.99997 ,   267.58243 ,   374.9491  ,\n","          414.78098 ,   594.9079  ,   513.56586 ,   497.04144 ,\n","          390.102   ,   287.25305 ,   199.31937 ,   273.309   ,\n","          395.70358 ,   564.5571  ,   679.62646 ,   794.9929  ,\n","          551.0861  ,   328.78287 ,   230.6733  ,   348.43958 ,\n","          463.29724 ,   518.76544 ,   581.2177  ,   673.3315  ,\n","         1040.9092  ,   984.61163 ,   881.9492  ,   407.7241  ,\n","          209.05605 ,   282.40405 ,   224.09758 ,   381.20724 ,\n","          364.55005 ,   482.90762 ,   606.3562  ,  1369.3035  ,\n","         1955.875   ,  2472.0725  ,  2281.1157  ,  2392.6116  ,\n","         2438.7737  ,  2658.263   ,  1332.6954  ,   756.1659  ,\n","          488.4069  ,   443.81427 ,   610.1254  ,   538.5535  ,\n","          562.5002  ,   398.52213 ,   422.99796 ,   351.07635 ,\n","          391.63327 ,   327.89615 ,   390.2274  ,   441.81464 ,\n","          450.58386 ,   464.98334 ,   327.99857 ,   647.3225  ,\n","          718.596   ,   487.81613 ,   401.15176 ,   251.49767 ,\n","          318.90295 ,   247.29744 ,   243.70172 ,   554.295   ,\n","          389.33542 ,   563.00256 ,   449.1937  ,   368.2521  ,\n","          216.73863 ,   228.60077 ,   253.50656 ,   195.40953 ,\n","          328.90305 ,   301.13254 ,   261.05954 ,   299.30923 ,\n","          336.1639  ,   424.21292 ,   568.2515  ,   846.1345  ,\n","          741.4991  ,   835.74347 ,  1026.4037  ,  1032.8168  ,\n","         1066.7773  ,  1088.5314  ,   567.58813 ,   456.37512 ,\n","          534.5274  ,   493.03748 ,   454.0234  ,   447.89532 ,\n","          505.8445  ,   559.34015 ,   794.6417  ,  1051.7407  ,\n","          949.5857  ,   420.0524  ,   583.75574 ,   766.8283  ,\n","          393.9448  ,   271.5239  ,   328.45486 ,   273.38217 ,\n","          459.79843 ,   474.44547 ,   683.7042  ,   627.1803  ,\n","          395.25717 ,   294.1816  ,   344.61108 ,   340.8938  ,\n","          646.18976 ,   826.29083 ,   759.8577  ,   527.62366 ,\n","          437.08224 ,   212.44153 ,   310.81293 ,   368.76447 ,\n","          186.14839 ,   165.25143 ,   347.65128 ,   232.26811 ,\n","          201.4236  ,   274.34467 ,   314.36627 ,   426.29636 ,\n","          536.3948  ,   180.76097 ,   137.17561 ,   176.92586 ,\n","          191.66447 ,   233.55795 ,   205.15982 ,   193.96477 ,\n","          158.37938 ,   173.75351 ,   196.899   ,   214.98743 ,\n","          308.80344 ,   578.7722  ,   291.9139  ,   298.9718  ,\n","          160.34163 ,    70.31796 ,    93.7884  ,    92.14277 ,\n","          125.336136,   188.57628 ,   177.87212 ,   192.29436 ,\n","           82.23441 ,   190.28319 ,    63.71379 ,   116.19328 ,\n","          216.35071 ,   163.89487 ,   151.73482 ,    86.863884,\n","           96.769005,   134.91113 ,   183.88277 ,   169.08778 ,\n","          228.06248 ,   254.85767 ,   323.2198  ,   382.1092  ,\n","          845.0708  ,   978.83875 ,  1106.8406  ,  1137.8871  ,\n","         1297.9513  ,  1443.756   ,  1342.1517  ,   586.4493  ,\n","          289.49316 ,   296.49872 ,   253.37482 ,   322.97748 ,\n","          452.819   ,   177.2128  ,   159.41504 ,   222.75017 ,\n","          180.75943 ,   332.39722 ,   360.73795 ,   353.17947 ,\n","          308.38278 ,   398.5409  ,   305.48105 ,   306.17374 ,\n","          239.22673 ,   231.69418 ,   203.4482  ,   272.8031  ,\n","          453.58484 ,   605.1342  ,   341.84064 ,   342.35202 ,\n","          203.13878 ,   301.69    ,   418.59082 ,   330.615   ,\n","          227.8068  ,   302.17157 ,   347.41245 ,   462.18936 ,\n","          706.6529  ,   953.94476 ,  1178.8766  ,  1550.5745  ,\n","         1397.7235  ,   907.484   ,   599.64594 ,   163.63843 ,\n","          216.6853  ,   267.19574 ,   386.9152  ,   533.65094 ,\n","          506.05673 ,   492.46497 ,   483.18704 ,   408.6979  ,\n","          241.33325 ,   158.50517 ,   382.8782  ,   507.31757 ,\n","          424.08734 ,   561.549   ,   378.2531  ,   233.61456 ,\n","          200.64667 ,   323.2621  ,   156.97244 ,   135.07304 ,\n","          179.51541 ,   270.8667  ,   342.5561  ,   304.90665 ,\n","          224.94034 ,   178.04294 ,   217.77187 ,   347.27786 ,\n","          439.46112 ,   555.2818  ,   634.2857  ,   706.8563  ,\n","          625.65063 ,   516.3012  ,   197.0144  ,   111.47874 ,\n","          341.5623  ,   267.38492 ,   629.60846 ,   865.1527  ,\n","          987.55475 ,  1231.3138  ,  1322.5634  ,  1255.7819  ,\n","         1257.5118  ,   495.557   ,   303.8322  ,   256.00403 ,\n","          363.02582 ,   339.28366 ,   319.8561  ,   269.32864 ,\n","          232.46918 ,   724.49756 ,   975.0744  ,   962.40955 ,\n","         1055.3004  ,  1265.3215  ,  1255.7555  ,  1215.6279  ,\n","          619.132   ,   608.0658  ,   488.69116 ,   378.37762 ,\n","          657.84735 ,  1033.4591  ,  1083.5144  ,  1003.4671  ,\n","         1258.4258  ,  1486.6501  ,  1942.9149  ,  1581.2511  ,\n","         1090.6722  ,   599.0661  ,   550.99255 ,   918.9159  ,\n","         1158.0676  ,  1355.7782  ,  1324.2477  ,  1410.9067  ,\n","         1245.7611  ,   868.5482  ,  1409.5743  ,  1407.4832  ,\n","         1326.4523  ,   358.0952  ,   232.55263 ,   582.8639  ,\n","          876.85065 ,   719.2765  ,   747.0222  ,   671.51483 ,\n","          679.44275 ,   637.2106  ,  1098.3644  ,  2102.0935  ,\n","         3021.8337  ,  3366.7996  ,  3608.4978  ,  3657.063   ,\n","         3610.6318  ,  2386.8252  ,  1023.07465 ,   745.6134  ,\n","         1204.409   ,  1486.9772  ,  1713.6095  ,  2043.1968  ,\n","         2977.9348  ,  3359.7454  ,  3266.3103  ,  3123.308   ,\n","         3376.0203  ,  3388.5605  ,  4065.6672  ,  4139.0586  ,\n","         5144.2217  ,  6063.9585  ,  5449.139   ,  4620.7734  ,\n","         4956.4517  ,  3753.0093  ,  2825.3862  ,  3163.0654  ,\n","         4897.586   ,  6082.1235  ,  5285.2935  ,  1470.5078  ,\n","         1399.6504  ,   982.9033  ,  2915.0703  ,  3562.1665  ,\n","         3627.598   ,  3744.0452  ,  3320.3347  ,  3836.6165  ,\n","         3838.7922  ,  1021.2842  ,  1584.906   ,  1681.5083  ,\n","         1420.0408  ,  1529.257   ,  2573.9324  ,  4094.8315  ,\n","         4014.719   ,  2972.0286  ,  3289.5508  ,  3678.1934  ,\n","         5625.3306  ,  6658.349   ,  5964.0884  ,  5999.554   ,\n","         6918.7725  ,  6512.815   ,  8146.3286  ,  4829.75    ,\n","         1773.3251  ,  2207.7937  ,  2186.6865  ,  3277.9807  ,\n","         3288.2878  ,  4157.1885  ,  3382.9626  ,  3867.0903  ,\n","         2978.789   ,  3413.4229  ,  6796.723   ,  7896.2534  ,\n","        10591.005   ,  9050.421   ,  5145.3765  ,  3541.5222  ,\n","         2371.4524  ,  1897.4427  ,  2799.0288  ,  4115.3228  ,\n","         3263.1453  ,  3511.3958  ,  4185.023   ,  4979.0283  ,\n","         6152.212   ,  7255.3374  ,  6920.228   ,  5877.097   ,\n","         4485.6606  ,  2742.5952  ,  2058.7795  ,  1749.8142  ,\n","         1854.9214  ,  3063.0415  ,  2417.8008  ,  2082.8877  ,\n","         3706.5693  ,  5011.345   ,  6194.545   ,  5777.4233  ,\n","         5493.339   ,  1932.9486  ,  2544.5715  ,  3397.431   ,\n","         4103.1787  ,  4588.8667  ,  2412.1162  ,  2593.9094  ,\n","         1797.1744  ,   824.5045  ,   890.88385 ,  1088.9098  ,\n","          984.5117  ,   797.36365 ,  1260.5194  ,  1714.1178  ,\n","         2101.745   ,  3231.0405  ,  3991.7598  ,  3979.513   ,\n","         2832.5378  ,  2628.4182  ,  2795.5276  ,  4343.883   ,\n","         6468.552   ,  7880.3247  ,  9212.118   ,  8611.701   ,\n","         6801.7197  ,  5056.5693  ,  4957.374   ,  3206.6055  ,\n","         2309.5498  ,  3407.3103  ,  4844.4473  ,  6424.411   ,\n","         4129.0503  ,  1974.1885  ,  2156.7583  ,  2511.9255  ,\n","         1899.6758  ,  2133.827   ,  1844.9868  ,  2284.95    ,\n","         2374.0916  ,  2090.2056  ,  3063.0718  ,  4597.432   ,\n","         6826.6777  ,  8129.12    ,  8952.454   ], dtype=float32)}"]},"execution_count":127,"metadata":{},"output_type":"execute_result"}],"source":["# Calculate model_3 results - these are going to be multi-dimensional because\n","# we're trying to predict more than one step at a time.\n","model_3_results = evaluate_preds(y_true=tf.squeeze(test_labels),\n","                                 y_pred=model_3_preds)\n","model_3_results"]},{"cell_type":"markdown","metadata":{"id":"1nx99i2QdJaO"},"source":["## Make our evaluation function work for larger horizons\n","\n","You'll notice the outputs for `model_3_results` are multi-dimensional. \n","\n","This is because the predictions are getting evaluated across the `HORIZON` timesteps (7 predictions at a time).\n","\n","To fix this, let's adjust our `evaluate_preds()` function to work with multiple shapes of data."]},{"cell_type":"code","execution_count":128,"metadata":{"executionInfo":{"elapsed":163,"status":"ok","timestamp":1642362967723,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"pcS6kjV4dg9f"},"outputs":[],"source":["def evaluate_preds(y_true, y_pred):\n","  # Make sure float32 (for metric calculations)\n","  y_true = tf.cast(y_true, dtype=tf.float32)\n","  y_pred = tf.cast(y_pred, dtype=tf.float32)\n","\n","  # Calculate various metrics\n","  mae = tf.keras.metrics.mean_absolute_error(y_true, y_pred)\n","  mse = tf.keras.metrics.mean_squared_error(y_true, y_pred)\n","  rmse = tf.sqrt(mse)\n","  mape = tf.keras.metrics.mean_absolute_percentage_error(y_true, y_pred)\n","  mase = mean_absolute_scaled_error(y_true, y_pred)\n","\n","  # Account for different sized metrics (for longer horizons, reduce to single number)\n","  if mae.ndim \u003e 0: # if mae isn't already a scalar, reduce it to one by aggregating tensors to mean\n","    mae = tf.reduce_mean(mae)\n","    mse = tf.reduce_mean(mse)\n","    rmse = tf.reduce_mean(rmse)\n","    mape = tf.reduce_mean(mape)\n","    mase = tf.reduce_mean(mase)\n","\n","  return {\"mae\": mae.numpy(),\n","          \"mse\": mse.numpy(),\n","          \"rmse\": rmse.numpy(),\n","          \"mape\": mape.numpy(),\n","          \"mase\": mase.numpy()}"]},{"cell_type":"code","execution_count":129,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":129,"status":"ok","timestamp":1642362988747,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Qco3m9QadhVM","outputId":"1f25fe76-e6e0-4ed7-e1e9-a658c9790d93"},"outputs":[{"data":{"text/plain":["{'mae': 1228.1416,\n"," 'mape': 5.4698334,\n"," 'mase': 2.1854093,\n"," 'mse': 5323686.5,\n"," 'rmse': 1412.9114}"]},"execution_count":129,"metadata":{},"output_type":"execute_result"}],"source":["# Get model_3 results aggregated to single values\n","model_3_results = evaluate_preds(y_true=tf.squeeze(test_labels),\n","                                 y_pred=model_3_preds)\n","model_3_results"]},{"cell_type":"code","execution_count":130,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":578,"status":"ok","timestamp":1642363001537,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"n7iepGZVdmeb","outputId":"285ef07d-57eb-4a81-950d-71b505e98174"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["offset = 300\n","plt.figure(figsize=(10, 7))\n","plot_time_series(timesteps=X_test[-len(test_windows):], values=test_labels[:, 0], start=offset, label=\"Test_data\")\n","# Checking the shape of model_3_preds results in [n_test_samples, HORIZON] (this will screw up the plot)\n","plot_time_series(timesteps=X_test[-len(test_windows):], values=model_3_preds, start=offset, label=\"model_3_preds\")"]},{"cell_type":"markdown","metadata":{"id":"Wy08cgc5dpeG"},"source":["When we try to plot our multi-horizon predicts, we get a funky looking plot.\n","\n","Again, we can fix this by aggregating our model's predictions.\n","\n","\u003e üîë **Note:** Aggregating the predictions (e.g. reducing a 7-day horizon to one value such as the mean) loses information from the original prediction. As in, the model predictions were trained to be made for 7-days but by reducing them to one, we gain the ability to plot them visually but we lose the extra information contained across multiple days."]},{"cell_type":"code","execution_count":131,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":450,"status":"ok","timestamp":1642363028231,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"6zHLWNDXduaa","outputId":"6f3d9287-af94-4c92-eb80-3aed1a7104ca"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["offset = 300\n","plt.figure(figsize=(10, 7))\n","# Plot model_3_preds by aggregating them (note: this condenses information so the preds will look fruther ahead than the test data)\n","plot_time_series(timesteps=X_test[-len(test_windows):], \n","                 values=test_labels[:, 0], \n","                 start=offset, \n","                 label=\"Test_data\")\n","plot_time_series(timesteps=X_test[-len(test_windows):], \n","                 values=tf.reduce_mean(model_3_preds, axis=1), \n","                 format=\"-\",\n","                 start=offset, \n","                 label=\"model_3_preds\")"]},{"cell_type":"markdown","metadata":{"id":"zMR4LH1ndwCc"},"source":["## Which of our models is performing best so far?\n","\n","So far, we've trained 3 models which use the same architecture but use different data inputs.\n","\n","Let's compare them with the na√Øve model to see which model is performing the best so far."]},{"cell_type":"code","execution_count":132,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":440},"executionInfo":{"elapsed":259,"status":"ok","timestamp":1642363073179,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ZQMjlmmXd5nO","outputId":"61fc0821-1081-43d7-8009-8e69699c2c58"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["pd.DataFrame({\"naive\": naive_results[\"mae\"], \n","              \"horizon_1_window_7\": model_1_results[\"mae\"], \n","              \"horizon_1_window_30\": model_2_results[\"mae\"], \n","              \"horizon_7_window_30\": model_3_results[\"mae\"]}, index=[\"mae\"]).plot(figsize=(10, 7), kind=\"bar\");"]},{"cell_type":"markdown","metadata":{"id":"VoLuPs_kd7Dc"},"source":["Woah, our na√Øve model is performing best (it's very hard to beat a na√Øve model in open systems) but the dense model with a horizon of 1 and a window size of 7 looks to be performing cloest.\n","\n","Because of this, let's use `HORIZON=1` and `WINDOW_SIZE=7` for our next series of modelling experiments (in other words, we'll use the previous week of Bitcoin prices to try and predict the next day).\n","\n","\u003e üîë **Note:** You might be wondering, why are the na√Øve results so good? One of the reasons could be due the presence of **autocorrelation** in the data. If a time series has **autocorrelation** it means the value at `t+1` (the next timestep) is typically close to the value at `t` (the current timestep). In other words, today's value is probably pretty close to yesterday's value. Of course, this isn't always the case but when it is, a na√Øve model will often get fairly good results.\n","\n","\u003e üìñ **Resource:** For more on how autocorrelation influences a model's predictions, see the article [*How (not) to use Machine Learning for time series forecasting: Avoiding the pitfalls*](https://towardsdatascience.com/how-not-to-use-machine-learning-for-time-series-forecasting-avoiding-the-pitfalls-19f9d7adf424) by Vegard Flovik"]},{"cell_type":"markdown","metadata":{"id":"V3vkkv8feIVd"},"source":["## Model 4: Conv1D\n","\n","Onto the next modelling experiment!\n","\n","This time, we'll be using a Conv1D model. Because as we saw in the sequence modelling notebook, Conv1D models can be used for seq2seq (sequence to sequence) problems.\n","\n","In our case, the input sequence is the previous 7 days of Bitcoin price data and the output is the next day (in seq2seq terms this is called a many to one problem).\n","\n","![bitcoin prediction in seq2seq terms](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-bitcoin-forecast-in-seq2seq-terms.png)\n","*Framing Bitcoin forecasting in seq2seq (sequence to sequence) terms. Using a window size of 7 and a horizon of one results in a many to one problem. Using a window size of \u003e1 and a horizon of \u003e1 results in a many to many problem. The diagram comes from Andrei Karpathy's [The Unreasonable Effectiveness of Recurrent Neural Networks](http://karpathy.github.io/2015/05/21/rnn-effectiveness/)*.\n","\n","Before we build a Conv1D model, let's recreate our datasets."]},{"cell_type":"code","execution_count":133,"metadata":{"executionInfo":{"elapsed":239,"status":"ok","timestamp":1642363155580,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"u0ihZ4uVeOmL"},"outputs":[],"source":["HORIZON = 1 # predict next day\n","WINDOW_SIZE = 7 # use previous week worth of data"]},{"cell_type":"code","execution_count":142,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":111,"status":"ok","timestamp":1642363340701,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"9HT8fnjHetqf","outputId":"5a6c64e5-49d9-412a-dd80-4a36cb6e4d9f"},"outputs":[{"data":{"text/plain":["(2780, 2780)"]},"execution_count":142,"metadata":{},"output_type":"execute_result"}],"source":["# Create windowed dataset\n","full_windows, full_labels = make_windows(prices, window_size=WINDOW_SIZE, horizon=HORIZON)\n","len(full_windows), len(full_labels)"]},{"cell_type":"code","execution_count":143,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":207,"status":"ok","timestamp":1642363341605,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Zvsn7rVoePK0","outputId":"e8f275aa-d3a5-4d0f-e22d-21fefa3da9c1"},"outputs":[{"data":{"text/plain":["(2224, 556, 2224, 556)"]},"execution_count":143,"metadata":{},"output_type":"execute_result"}],"source":["#Create windowed dataset\n","train_windows, test_windows, train_labels, test_labels = make_train_test_splits(full_windows, full_labels)\n","len(train_windows), len(test_windows), len(train_labels), len(test_labels)"]},{"cell_type":"markdown","metadata":{"id":"6LuiTjhremnq"},"source":["Data windowed!\n","\n","Now, since we're going to be using [Conv1D layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv1D), we need to make sure our input shapes are correct.\n","\n","The Conv1D layer in TensorFlow takes an input of: `(batch_size, timesteps, input_dim)`.\n","\n","In our case, the `batch_size` (by default this is 32 but we can change it) is handled for us but the other values will be:\n","* `timesteps = WINDOW_SIZE` - the `timesteps` is also often referred to as `features`, our features are the previous `WINDOW_SIZE` values of Bitcoin \n","* `input_dim = HORIZON` - our model views `WINDOW_SIZE` (one week) worth of data at a time to predict `HORIZON` (one day)\n","\n","Right now, our data has the `timesteps` dimension ready but we'll have to adjust it to have the `input_dim` dimension. "]},{"cell_type":"markdown","metadata":{"id":"JWf43b1ZhJ2T"},"source":["In other words, timestep is the number of elements that is inputted, and the input_dim, is the dimension of each element. We are inputting 7 timesteps, each elemement containing 1 price. Since we are predicting 1 value."]},{"cell_type":"code","execution_count":144,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":115,"status":"ok","timestamp":1642363359723,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"9VmSNrRXfA0i","outputId":"df731d81-916a-404a-a45b-a42f97d608de"},"outputs":[{"data":{"text/plain":["(7,)"]},"execution_count":144,"metadata":{},"output_type":"execute_result"}],"source":["# Check data sample shapes\n","train_windows[0].shape # returns (WINDOW_SIZE, )"]},{"cell_type":"markdown","metadata":{"id":"Ryz-G15QfBDH"},"source":["To fix this, we could adjust the shape of all of our `train_windows` or we could use a [`tf.keras.layers.Lamdba`](https://keras.io/api/layers/core_layers/lambda/) (called a Lambda layer) to do this for us in our model.\n","\n","The Lambda layer wraps a function into a layer which can be used with a model.\n","\n","Let's try it out."]},{"cell_type":"code","execution_count":145,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":142,"status":"ok","timestamp":1642363822132,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"4uExpQ_7gxo9","outputId":"7c7882d0-9b0e-41fe-ad43-9f51efaf0646"},"outputs":[{"name":"stdout","output_type":"stream","text":["Original shape: (7,)\n","Expanded shape: (7, 1)\n","Original values with expanded shape:\n"," [[123.65499]\n"," [125.455  ]\n"," [108.58483]\n"," [118.67466]\n"," [121.33866]\n"," [120.65533]\n"," [121.795  ]]\n"]}],"source":["# Before we pass our data to the Conv1D layer, we have to reshape it in order to make sure it works\n","x = tf.constant(train_windows[0])\n","expand_dims_layer = layers.Lambda(lambda x: tf.expand_dims(x, axis=1)) # add an extra dimension for timesteps\n","print(f\"Original shape: {x.shape}\") # (WINDOW_SIZE)\n","print(f\"Expanded shape: {expand_dims_layer(x).shape}\") # (WINDOW_SIZE, input_dim) \n","print(f\"Original values with expanded shape:\\n {expand_dims_layer(x)}\")"]},{"cell_type":"markdown","metadata":{"id":"_ShqOTCQgx7m"},"source":["Looking good!\n","\n","Now we've got a Lambda layer, let's build, compile, fit and evaluate a Conv1D model on our data.\n","\n","\u003e üîë **Note:** If you run the model below without the Lambda layer, you'll get an input shape error (one of the most common errors when building neural networks)."]},{"cell_type":"code","execution_count":146,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41659,"status":"ok","timestamp":1642364113690,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"yFLL0Uu0hujU","outputId":"6114e68f-0f58-4395-bebb-c7883313d72e"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n","INFO:tensorflow:Assets written to: model_experiment/model_4_conv1D/assets\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f6576afa850\u003e"]},"execution_count":146,"metadata":{},"output_type":"execute_result"}],"source":["tf.random.set_seed(42)\n","\n","# Create model\n","model_4 = tf.keras.Sequential([\n","  # Create Lambda layer to reshape inputs, without this layer, the model will error\n","  layers.Lambda(lambda x: tf.expand_dims(x, axis=1)), # resize the inputs to adjust for window size / Conv1D 3D input requirements\n","  layers.Conv1D(filters=128, kernel_size=5, padding=\"causal\", activation=\"relu\"),\n","  layers.Dense(HORIZON)\n","], name=\"model_4_conv1D\")\n","\n","# Compile model\n","model_4.compile(loss=\"mae\",\n","                optimizer=tf.keras.optimizers.Adam())\n","\n","# Fit model\n","model_4.fit(train_windows,\n","            train_labels,\n","            batch_size=128, \n","            epochs=100,\n","            verbose=0,\n","            validation_data=(test_windows, test_labels),\n","            callbacks=[create_model_checkpoint(model_name=model_4.name)])"]},{"cell_type":"code","execution_count":147,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":128,"status":"ok","timestamp":1642364130066,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ap5nkmujhu-S","outputId":"4fe3eb22-bef3-4757-cd04-9efb18661881"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model_4_conv1D\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lambda_1 (Lambda)           (None, 1, 7)              0         \n","                                                                 \n"," conv1d (Conv1D)             (None, 1, 128)            4608      \n","                                                                 \n"," dense_6 (Dense)             (None, 1, 1)              129       \n","                                                                 \n","=================================================================\n","Total params: 4,737\n","Trainable params: 4,737\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model_4.summary()"]},{"cell_type":"code","execution_count":149,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":734,"status":"ok","timestamp":1642364161982,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"BgVZEmOxh9Hi","outputId":"761e22c3-bea6-4cff-add8-35251be7cd71"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 569.0326\n"]},{"data":{"text/plain":["569.0325927734375"]},"execution_count":149,"metadata":{},"output_type":"execute_result"}],"source":["# Load in best performing Conv1D model and evaluate it on the test data\n","model_4 = tf.keras.models.load_model(\"/content/model_experiment/model_4_conv1D\")\n","model_4.evaluate(test_windows, test_labels)"]},{"cell_type":"code","execution_count":150,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1642364166251,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"yRJa4BOUiBWh","outputId":"48d92179-e91c-412e-d474-d0eef1064cf9"},"outputs":[{"data":{"text/plain":["\u003ctf.Tensor: shape=(10,), dtype=float32, numpy=\n","array([8847.293, 8757.503, 8997.469, 8762.801, 8707.722, 8713.594,\n","       8664.935, 8496.83 , 8439.473, 8499.395], dtype=float32)\u003e"]},"execution_count":150,"metadata":{},"output_type":"execute_result"}],"source":["# Make predictions\n","model_4_preds = make_preds(model_4, test_windows)\n","model_4_preds[:10]"]},{"cell_type":"code","execution_count":151,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":125,"status":"ok","timestamp":1642364170615,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"RMXhX5wEiF6A","outputId":"3d4b5104-e890-4632-e079-14409e3e42eb"},"outputs":[{"data":{"text/plain":["{'mae': 569.03265,\n"," 'mape': 2.5515254,\n"," 'mase': 0.9996328,\n"," 'mse': 1169841.0,\n"," 'rmse': 1081.5919}"]},"execution_count":151,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate predictions\n","model_4_results = evaluate_preds(y_true=tf.squeeze(test_labels),\n","                                 y_pred=model_4_preds)\n","model_4_results"]},{"cell_type":"markdown","metadata":{"id":"Rt2mOLu-iHBK"},"source":["## Model 5: RNN (LSTM)\n","\n","As you might've guessed, we can also use a recurrent neural network to model our sequential time series data.\n","\n","\u003e üìñ **Resource:** For more on the different types of recurrent neural networks you can use for sequence problems, see the [Recurrent Neural Networks section of notebook 08](https://dev.mrdbourke.com/tensorflow-deep-learning/08_introduction_to_nlp_in_tensorflow/#recurrent-neural-networks-rnns).\n","\n","Let's reuse the same data we used for the Conv1D model, except this time we'll create an [LSTM-cell](https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTM) powered RNN to model our Bitcoin data. \n","\n","Once again, one of the most important steps for the LSTM model will be getting our data into the right shape.\n","\n","The [`tf.keras.layers.LSTM()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTM) layer takes a tensor with `[batch, timesteps, feature]` dimensions.\n","\n","As mentioned earlier, the `batch` dimension gets taken care of for us but our data is currently only has the `feature` dimension (`WINDOW_SIZE`).\n","\n","To fix this, just like we did with the `Conv1D` model, we can use a `tf.keras.layers.Lambda()` layer to adjust the shape of our input tensors to the LSTM layer.\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":152,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":110039,"status":"ok","timestamp":1642364361006,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"-0XN_Bg0iXi_","outputId":"0763f8c1-2773-4825-ba47-8a4b79b34639"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_5_lstm/assets\n","WARNING:absl:\u003ckeras.layers.recurrent.LSTMCell object at 0x7f6572e6a790\u003e has the same name 'LSTMCell' as a built-in Keras object. Consider renaming \u003cclass 'keras.layers.recurrent.LSTMCell'\u003e to avoid naming conflicts when loading with `tf.keras.models.load_model`. If renaming is not possible, pass the object in the `custom_objects` parameter of the load function.\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f6575931950\u003e"]},"execution_count":152,"metadata":{},"output_type":"execute_result"}],"source":["tf.random.set_seed(42)\n","\n","# Let's build an LSTM model with the Functional API\n","inputs = layers.Input(shape=(WINDOW_SIZE))\n","x = layers.Lambda(lambda x: tf.expand_dims(x, axis=1))(inputs) # expand input dimension to be compatible with LSTM\n","# print(x.shape)\n","# x = layers.LSTM(128, activation=\"relu\", return_sequences=True)(x) # this layer will error if the inputs are not the right shape\n","x = layers.LSTM(128, activation=\"relu\")(x) # using the tanh loss function results in a massive error\n","# print(x.shape)\n","# Add another optional dense layer (you could add more of these to see if they improve model performance)\n","# x = layers.Dense(32, activation=\"relu\")(x)\n","output = layers.Dense(HORIZON)(x)\n","model_5 = tf.keras.Model(inputs=inputs, outputs=output, name=\"model_5_lstm\")\n","\n","# Compile model\n","model_5.compile(loss=\"mae\",\n","                optimizer=tf.keras.optimizers.Adam())\n","\n","# Seems when saving the model several warnings are appearing: https://github.com/tensorflow/tensorflow/issues/47554 \n","model_5.fit(train_windows,\n","            train_labels,\n","            epochs=100,\n","            verbose=0,\n","            batch_size=128,\n","            validation_data=(test_windows, test_labels),\n","            callbacks=[create_model_checkpoint(model_name=model_5.name)])"]},{"cell_type":"code","execution_count":154,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1552,"status":"ok","timestamp":1642364369555,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"e9QVP5_xiaqf","outputId":"771ad2b2-3a94-41a6-ef1f-7bf6fe08d177"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 591.6655\n"]},{"data":{"text/plain":["591.6654663085938"]},"execution_count":154,"metadata":{},"output_type":"execute_result"}],"source":["# Load in best version of model 5 and evaluate on the test data\n","model_5 = tf.keras.models.load_model(\"/content/model_experiment/model_5_lstm\")\n","model_5.evaluate(test_windows, test_labels)"]},{"cell_type":"code","execution_count":155,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":316,"status":"ok","timestamp":1642364369990,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"hWxHsSroikxl","outputId":"5a03f3c6-f39a-4cba-d0b5-722a80956f2d"},"outputs":[{"data":{"text/plain":["\u003ctf.Tensor: shape=(10,), dtype=float32, numpy=\n","array([8970.957, 8815.352, 9026.793, 8831.478, 8736.686, 8804.464,\n","       8733.207, 8540.421, 8518.281, 8544.508], dtype=float32)\u003e"]},"execution_count":155,"metadata":{},"output_type":"execute_result"}],"source":["# Make predictions with our LSTM model\n","model_5_preds = make_preds(model_5, test_windows)\n","model_5_preds[:10]"]},{"cell_type":"code","execution_count":156,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":162,"status":"ok","timestamp":1642364372622,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"JkRel4Enil8o","outputId":"a8d1c473-f4e5-49ee-8550-9ab3ff5b1b0a"},"outputs":[{"data":{"text/plain":["{'mae': 591.6655,\n"," 'mape': 2.66558,\n"," 'mase': 1.0393925,\n"," 'mse': 1250831.6,\n"," 'rmse': 1118.4059}"]},"execution_count":156,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate model 5 preds\n","model_5_results = evaluate_preds(y_true=tf.squeeze(test_labels),\n","                                 y_pred=model_5_preds)\n","model_5_results"]},{"cell_type":"markdown","metadata":{"id":"xgFs8smbirLl"},"source":["Hmmm... it seems even with an LSTM-powered RNN we weren't able to beat our na√Øve models results.\n","\n","Perhaps adding another variable will help?\n","\n","\u003e üîë **Note:** I'm putting this here again as a reminder that because neural networks are such powerful algorithms, they can be used for almost any problem, however, that doesn't mean they'll achieve performant or usable results. You're probably starting to clue onto this now.\n"]},{"cell_type":"markdown","metadata":{"id":"eL1gwbfJi-Eu"},"source":["## Make a multivariate time series \n","\n","So far all of our models have barely kept up with the na√Øve forecast.\n","\n","And so far all of them have been trained on a single variable (also called univariate time series): the historical price of Bitcoin.\n","\n","If predicting the price of Bitcoin using the price of Bitcoin hasn't worked out very well, maybe giving our model more information may help.\n","\n","More information is a vague term because we could actually feed almost anything to our model(s) and they would still try to find patterns. \n","\n","For example, we could use the historical price of Bitcoin as well as anyone with the name [Daniel Bourke Tweeted](https://twitter.com/mrdbourke) on that day to predict the future price of Bitcoin.\n","\n","But would this help?\n","\n","Porbably not.\n","\n","What would be better is if we passed our model something related to Bitcoin (again, this is quite vauge, since in an open system like a market, you could argue everything is related).\n","\n","This will be different for almost every time series you work on but in our case, we could try to see if the [Bitcoin block reward size](https://www.investopedia.com/terms/b/block-reward.asp) adds any predictive power to our model(s).\n","\n","What is the Bitcoin block reward size?\n","\n","The Bitcoin block reward size is the number of Bitcoin someone receives from mining a Bitcoin block.\n","\n","At its inception, the Bitcoin block reward size was 50.\n","\n","But every four years or so, the Bitcoin block reward halves.\n","\n","For example, the block reward size went from 50 (starting January 2009) to 25 on November 28 2012.\n","\n","Let's encode this information into our time series data and see if it helps a model's performance.\n","\n","\u003e üîë **Note:** Adding an extra feature to our dataset such as the Bitcoin block reward size will take our data from **univariate** (only the historical price of Bitcoin) to **multivariate** (the price of Bitcoin as well as the block reward size)."]},{"cell_type":"code","execution_count":157,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":115,"status":"ok","timestamp":1642364432122,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"oL4Unb_6jFiw","outputId":"d4daf894-4537-480e-fc05-56b63648872b"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-12ea62ab-e1ec-4e2d-a2c0-584eeda83b0c\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12ea62ab-e1ec-4e2d-a2c0-584eeda83b0c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-12ea62ab-e1ec-4e2d-a2c0-584eeda83b0c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-12ea62ab-e1ec-4e2d-a2c0-584eeda83b0c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price\n","Date                 \n","2013-10-01  123.65499\n","2013-10-02  125.45500\n","2013-10-03  108.58483\n","2013-10-04  118.67466\n","2013-10-05  121.33866"]},"execution_count":157,"metadata":{},"output_type":"execute_result"}],"source":["# Let's make a multivariate time series\n","bitcoin_prices.head()"]},{"cell_type":"markdown","metadata":{"id":"bLLM0K35jG3S"},"source":["Alright, time to add another feature column, the block reward size.\n","\n","First, we'll need to create variables for the different block reward sizes as well as the dates they came into play.\n","\n","The following block rewards and dates were sourced from [cmcmarkets.com](https://www.cmcmarkets.com/en/learn-cryptocurrencies/bitcoin-halving).\n","\n","| Block Reward | Start Date |\n","| ----- | ----- |\n","| 50 | 3 January 2009 (2009-01-03) |\n","| 25 | 28 November 2012 |\n","| 12.5 | 9 July 2016 |\n","| 6.25 | 11 May 2020 |\n","| 3.125 | TBA (expected 2024) |\n","| 1.5625 | TBA (expected 2028) | \n","\n","\u003e üîë **Note:** Since our Bitcoin historical data starts from 01 October 2013, none of the timesteps in our multivariate time series will have a block reward of 50."]},{"cell_type":"code","execution_count":159,"metadata":{"executionInfo":{"elapsed":131,"status":"ok","timestamp":1642364457878,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"CJIIu8w3jLZn"},"outputs":[],"source":["# Block reward values\n","block_reward_1 = 50 # 3 January 2009 (2009-01-03) - this block reward isn't in our dataset (it starts from 01 October 2013)\n","block_reward_2 = 25 # 28 November 2012 \n","block_reward_3 = 12.5 # 9 July 2016\n","block_reward_4 = 6.25 # 11 May 2020\n","\n","# Block reward dates (datetime form of the above date stamps)\n","block_reward_2_datetime = np.datetime64(\"2012-11-28\")\n","block_reward_3_datetime = np.datetime64(\"2016-07-09\")\n","block_reward_4_datetime = np.datetime64(\"2020-05-11\")"]},{"cell_type":"markdown","metadata":{"id":"uo7Zub6XjNJe"},"source":["We're going to get the days (indexes) for different block reward values. \n","\n","This is important because if we're going to use multiple variables for our time series, they have to the same frequency as our original variable. For example, if our Bitcoin prices are daily, we need the block reward values to be daily as well.\n","\n","\u003e üîë **Note:** For using multiple variables, make sure they're the same frequency as each other. If your variables aren't at the same frequency (e.g. Bitcoin prices are daily but block rewards are weekly), you may need to transform them in a way that they can be used with your model."]},{"cell_type":"code","execution_count":161,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":125,"status":"ok","timestamp":1642364641209,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"6Ncsfm64j4hY","outputId":"15c675b7-400e-4578-8ea5-825d68d00611"},"outputs":[{"data":{"text/plain":["(1012, 2414)"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# Get date indexes for when to add in different block dates\n","block_reward_2_days = (block_reward_3_datetime - bitcoin_prices.index[0]).days\n","block_reward_3_days = (block_reward_4_datetime - bitcoin_prices.index[0]).days\n","block_reward_2_days, block_reward_3_days"]},{"cell_type":"markdown","metadata":{"id":"3KpIArypj558"},"source":["Now we can add another feature to our dataset `block_reward` (this gets lower over time so it may lead to increasing prices of Bitcoin)."]},{"cell_type":"code","execution_count":162,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":137,"status":"ok","timestamp":1642365126029,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"g5js2RiGlv_J","outputId":"e3c1ab3e-51b2-45df-a8a8-fac1a7ca14da"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-a01c68eb-dfff-4d5e-84d3-e0e80ebc5818\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","      \u003cth\u003eblock_reward\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a01c68eb-dfff-4d5e-84d3-e0e80ebc5818')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-a01c68eb-dfff-4d5e-84d3-e0e80ebc5818 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a01c68eb-dfff-4d5e-84d3-e0e80ebc5818');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price block_reward\n","Date                              \n","2013-10-01  123.65499           25\n","2013-10-02  125.45500           25\n","2013-10-03  108.58483           25\n","2013-10-04  118.67466           25\n","2013-10-05  121.33866           25"]},"execution_count":162,"metadata":{},"output_type":"execute_result"}],"source":["# Add block_reward column\n","bitcoin_prices_block = bitcoin_prices.copy()\n","bitcoin_prices_block[\"block_reward\"] = None\n","\n","# Set values of block_reward column (it's the last column hence -1 indexing on iloc)\n","bitcoin_prices_block.iloc[:block_reward_2_days, -1] = block_reward_2\n","bitcoin_prices_block.iloc[block_reward_2_days:block_reward_3_days, -1] = block_reward_3\n","bitcoin_prices_block.iloc[block_reward_3_days:, -1] = block_reward_4\n","bitcoin_prices_block.head()"]},{"cell_type":"markdown","metadata":{"id":"JyYHBzLGlwRN"},"source":["Woohoo! We've officially added another variable to our time series data.\n","\n","Let's see what it looks like."]},{"cell_type":"code","execution_count":163,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"executionInfo":{"elapsed":531,"status":"ok","timestamp":1642365232513,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Mx9kGlDfmJV3","outputId":"c9526274-1722-4158-c12a-a527511b5242"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 720x504 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot the block reward/price over time\n","# Note: Because of the different scales of our values we'll scale them to be between 0 and 1.\n","from sklearn.preprocessing import minmax_scale\n","scaled_price_block_df = pd.DataFrame(minmax_scale(bitcoin_prices_block[[\"Price\", \"block_reward\"]]), # we need to scale the data first\n","                                     columns=bitcoin_prices_block.columns,\n","                                     index=bitcoin_prices_block.index)\n","scaled_price_block_df.plot(figsize=(10, 7));"]},{"cell_type":"markdown","metadata":{"id":"uwsJqkOQmKLA"},"source":["When we scale the block reward and the Bitcoin price, we can see the price goes up as the block reward goes down, perhaps this information will be helpful to our model's performance."]},{"cell_type":"markdown","metadata":{"id":"_Rs51t3SmRJF"},"source":["## Making a windowed dataset with pandas\n","\n","Previously, we used some custom made functions to window our **univariate** time series.\n","\n","However, since we've just added another variable to our dataset, these functions won't work.\n","\n","Not to worry though. Since our data is in a pandas DataFrame, we can leverage the [`pandas.DataFrame.shift()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.shift.html) method to create a windowed **multivariate** time series.\n","\n","The `shift()` method offsets an index by a specified number of periods.\n","\n","Let's see it in action."]},{"cell_type":"code","execution_count":165,"metadata":{"executionInfo":{"elapsed":118,"status":"ok","timestamp":1642365279898,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"XWVWuD9wmRVK"},"outputs":[],"source":["# Setup dataset hyperparameters\n","HORIZON = 1\n","WINDOW_SIZE = 7"]},{"cell_type":"code","execution_count":171,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":612},"executionInfo":{"elapsed":140,"status":"ok","timestamp":1642365887666,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"eDgIWTYOmV13","outputId":"06a9bd08-d5c8-4ab3-94a2-4c48710345b8"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-c3f302c4-ffb3-425c-8a6f-ea2630502670\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","      \u003cth\u003eblock_reward\u003c/th\u003e\n","      \u003cth\u003ePrice+1\u003c/th\u003e\n","      \u003cth\u003ePrice+2\u003c/th\u003e\n","      \u003cth\u003ePrice+3\u003c/th\u003e\n","      \u003cth\u003ePrice+4\u003c/th\u003e\n","      \u003cth\u003ePrice+5\u003c/th\u003e\n","      \u003cth\u003ePrice+6\u003c/th\u003e\n","      \u003cth\u003ePrice+7\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-06\u003c/th\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-07\u003c/th\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-08\u003c/th\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-09\u003c/th\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-10\u003c/th\u003e\n","      \u003ctd\u003e125.96116\u003c/td\u003e\n","      \u003ctd\u003e25\u003c/td\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3f302c4-ffb3-425c-8a6f-ea2630502670')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-c3f302c4-ffb3-425c-8a6f-ea2630502670 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c3f302c4-ffb3-425c-8a6f-ea2630502670');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price block_reward    Price+1  ...    Price+5    Price+6    Price+7\n","Date                                           ...                                 \n","2013-10-01  123.65499           25        NaN  ...        NaN        NaN        NaN\n","2013-10-02  125.45500           25  123.65499  ...        NaN        NaN        NaN\n","2013-10-03  108.58483           25  125.45500  ...        NaN        NaN        NaN\n","2013-10-04  118.67466           25  108.58483  ...        NaN        NaN        NaN\n","2013-10-05  121.33866           25  118.67466  ...        NaN        NaN        NaN\n","2013-10-06  120.65533           25  121.33866  ...  123.65499        NaN        NaN\n","2013-10-07  121.79500           25  120.65533  ...  125.45500  123.65499        NaN\n","2013-10-08  123.03300           25  121.79500  ...  108.58483  125.45500  123.65499\n","2013-10-09  124.04900           25  123.03300  ...  118.67466  108.58483  125.45500\n","2013-10-10  125.96116           25  124.04900  ...  121.33866  118.67466  108.58483\n","\n","[10 rows x 9 columns]"]},"execution_count":171,"metadata":{},"output_type":"execute_result"}],"source":["#Make a copy of the Bitcoin historical data with block reward feature\n","bitcoin_prices_windowed = bitcoin_prices_block.copy()\n","\n","#Add windowed columns\n","for i in range(WINDOW_SIZE):\n","  bitcoin_prices_windowed[f\"Price+{i+1}\"] = bitcoin_prices_windowed[\"Price\"].shift(periods = i+1)\n","bitcoin_prices_windowed.head(10)"]},{"cell_type":"markdown","metadata":{"id":"7uLTYDJ9mzOd"},"source":["Now that we've got a windowed dataset, let's separate features (`X`) from labels (`y`).\n","\n","Remember in our windowed dataset, we're trying to use the previous `WINDOW_SIZE` steps to predict `HORIZON` steps.\n","\n","```\n","Window for a week (7) to predict a horizon of 1 (multivariate time series)\n","WINDOW_SIZE \u0026 block_reward -\u003e HORIZON\n","\n","[0, 1, 2, 3, 4, 5, 6, block_reward] -\u003e [7]\n","[1, 2, 3, 4, 5, 6, 7, block_reward] -\u003e [8]\n","[2, 3, 4, 5, 6, 7, 8, block_reward] -\u003e [9]\n","```\n","\n","We'll also remove the `NaN` values using pandas [`dropna()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html) method, this equivalent to starting our windowing function at `sample 0 (the first sample) + WINDOW_SIZE`."]},{"cell_type":"code","execution_count":172,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":134,"status":"ok","timestamp":1642366073458,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"2a1COJ6lpULg","outputId":"292d9718-182c-4852-90ba-3fcf1ae5e8e1"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-02cdf5de-0d95-44ae-ac2c-7323badd5164\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eblock_reward\u003c/th\u003e\n","      \u003cth\u003ePrice+1\u003c/th\u003e\n","      \u003cth\u003ePrice+2\u003c/th\u003e\n","      \u003cth\u003ePrice+3\u003c/th\u003e\n","      \u003cth\u003ePrice+4\u003c/th\u003e\n","      \u003cth\u003ePrice+5\u003c/th\u003e\n","      \u003cth\u003ePrice+6\u003c/th\u003e\n","      \u003cth\u003ePrice+7\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-08\u003c/th\u003e\n","      \u003ctd\u003e25.0\u003c/td\u003e\n","      \u003ctd\u003e121.794998\u003c/td\u003e\n","      \u003ctd\u003e120.655327\u003c/td\u003e\n","      \u003ctd\u003e121.338661\u003c/td\u003e\n","      \u003ctd\u003e118.674660\u003c/td\u003e\n","      \u003ctd\u003e108.584831\u003c/td\u003e\n","      \u003ctd\u003e125.455002\u003c/td\u003e\n","      \u003ctd\u003e123.654991\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-09\u003c/th\u003e\n","      \u003ctd\u003e25.0\u003c/td\u003e\n","      \u003ctd\u003e123.032997\u003c/td\u003e\n","      \u003ctd\u003e121.794998\u003c/td\u003e\n","      \u003ctd\u003e120.655327\u003c/td\u003e\n","      \u003ctd\u003e121.338661\u003c/td\u003e\n","      \u003ctd\u003e118.674660\u003c/td\u003e\n","      \u003ctd\u003e108.584831\u003c/td\u003e\n","      \u003ctd\u003e125.455002\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-10\u003c/th\u003e\n","      \u003ctd\u003e25.0\u003c/td\u003e\n","      \u003ctd\u003e124.049004\u003c/td\u003e\n","      \u003ctd\u003e123.032997\u003c/td\u003e\n","      \u003ctd\u003e121.794998\u003c/td\u003e\n","      \u003ctd\u003e120.655327\u003c/td\u003e\n","      \u003ctd\u003e121.338661\u003c/td\u003e\n","      \u003ctd\u003e118.674660\u003c/td\u003e\n","      \u003ctd\u003e108.584831\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-11\u003c/th\u003e\n","      \u003ctd\u003e25.0\u003c/td\u003e\n","      \u003ctd\u003e125.961159\u003c/td\u003e\n","      \u003ctd\u003e124.049004\u003c/td\u003e\n","      \u003ctd\u003e123.032997\u003c/td\u003e\n","      \u003ctd\u003e121.794998\u003c/td\u003e\n","      \u003ctd\u003e120.655327\u003c/td\u003e\n","      \u003ctd\u003e121.338661\u003c/td\u003e\n","      \u003ctd\u003e118.674660\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-12\u003c/th\u003e\n","      \u003ctd\u003e25.0\u003c/td\u003e\n","      \u003ctd\u003e125.279663\u003c/td\u003e\n","      \u003ctd\u003e125.961159\u003c/td\u003e\n","      \u003ctd\u003e124.049004\u003c/td\u003e\n","      \u003ctd\u003e123.032997\u003c/td\u003e\n","      \u003ctd\u003e121.794998\u003c/td\u003e\n","      \u003ctd\u003e120.655327\u003c/td\u003e\n","      \u003ctd\u003e121.338661\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02cdf5de-0d95-44ae-ac2c-7323badd5164')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-02cdf5de-0d95-44ae-ac2c-7323badd5164 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02cdf5de-0d95-44ae-ac2c-7323badd5164');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["            block_reward     Price+1  ...     Price+6     Price+7\n","Date                                  ...                        \n","2013-10-08          25.0  121.794998  ...  125.455002  123.654991\n","2013-10-09          25.0  123.032997  ...  108.584831  125.455002\n","2013-10-10          25.0  124.049004  ...  118.674660  108.584831\n","2013-10-11          25.0  125.961159  ...  121.338661  118.674660\n","2013-10-12          25.0  125.279663  ...  120.655327  121.338661\n","\n","[5 rows x 8 columns]"]},"execution_count":172,"metadata":{},"output_type":"execute_result"}],"source":["# Let's create X \u0026 y, remove the NaN's and convert to float32 to prevent TensorFlow errors \n","X = bitcoin_prices_windowed.dropna().drop(\"Price\", axis=1).astype(np.float32) \n","y = bitcoin_prices_windowed.dropna()[\"Price\"].astype(np.float32)\n","X.head()"]},{"cell_type":"code","execution_count":173,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":106,"status":"ok","timestamp":1642366081021,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"wVZYFU9KpXkq","outputId":"0463a851-15bd-429f-ea2c-f6d1c4528c49"},"outputs":[{"data":{"text/plain":["Date\n","2013-10-08    123.032997\n","2013-10-09    124.049004\n","2013-10-10    125.961159\n","2013-10-11    125.279663\n","2013-10-12    125.927498\n","Name: Price, dtype: float32"]},"execution_count":173,"metadata":{},"output_type":"execute_result"}],"source":["# View labels\n","y.head()"]},{"cell_type":"code","execution_count":174,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":112,"status":"ok","timestamp":1642366089439,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"wQHeOALApZbQ","outputId":"0f8efac9-af0b-44c9-d0fe-b11775ebd780"},"outputs":[{"data":{"text/plain":["(2224, 2224, 556, 556)"]},"execution_count":174,"metadata":{},"output_type":"execute_result"}],"source":["# Make train and test sets\n","split_size = int(len(X) * 0.8)\n","X_train, y_train = X[:split_size], y[:split_size]\n","X_test, y_test = X[split_size:], y[split_size:]\n","len(X_train), len(y_train), len(X_test), len(y_test)"]},{"cell_type":"markdown","metadata":{"id":"Z0DWI9j8pbe5"},"source":["## Model 6: Dense (multivariate time series)\n","\n","To keep things simple, let's the `model_1` architecture and use it to train and make predictions on our multivariate time series data.\n","\n","By replicating the `model_1` architecture we'll be able to see whether or not adding the block reward feature improves or detracts from model performance."]},{"cell_type":"code","execution_count":175,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41515,"status":"ok","timestamp":1642366145156,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"lgW8d0IxpdcU","outputId":"6f958ccc-8255-4767-fcdb-bcbc9a12a0cc"},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stdout","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"name":"stderr","output_type":"stream","text":["INFO:tensorflow:Assets written to: model_experiment/model_6_dense_multivariate/assets\n"]},{"data":{"text/plain":["\u003ckeras.callbacks.History at 0x7f65725fad90\u003e"]},"execution_count":175,"metadata":{},"output_type":"execute_result"}],"source":["tf.random.set_seed(42)\n","\n","# Make multivariate time series model\n","model_6 = tf.keras.Sequential([\n","  layers.Dense(128, activation=\"relu\"),\n","  # layers.Dense(128, activation=\"relu\"), # adding an extra layer here should lead to beating the naive model\n","  layers.Dense(HORIZON)\n","], name=\"model_6_dense_multivariate\")\n","\n","# Compile\n","model_6.compile(loss=\"mae\",\n","                optimizer=tf.keras.optimizers.Adam())\n","\n","# Fit\n","model_6.fit(X_train, y_train,\n","            epochs=100,\n","            batch_size=128,\n","            verbose=0, # only print 1 line per epoch\n","            validation_data=(X_test, y_test),\n","            callbacks=[create_model_checkpoint(model_name=model_6.name)])"]},{"cell_type":"markdown","metadata":{"id":"a17mQqVgpe-Z"},"source":["Multivariate model fit!\n","\n","You might've noticed that the model inferred the input shape of our data automatically (the data now has an extra feature). Often this will be the case, however, if you're running into shape issues, you can always explicitly define the input shape using `input_shape` parameter of the first layer in a model.\n","\n","Time to evaluate our multivariate model."]},{"cell_type":"code","execution_count":178,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":587,"status":"ok","timestamp":1642366159155,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"mPk9PGqvpkJw","outputId":"4d9ed0c3-fe17-45b8-971e-578e7642a29e"},"outputs":[{"name":"stdout","output_type":"stream","text":["18/18 [==============================] - 0s 2ms/step - loss: 568.3355\n"]},{"data":{"text/plain":["568.3355102539062"]},"execution_count":178,"metadata":{},"output_type":"execute_result"}],"source":["# Make sure best model is loaded and evaluate\n","model_6 = tf.keras.models.load_model(\"/content/model_experiment/model_6_dense_multivariate\")\n","model_6.evaluate(X_test, y_test)"]},{"cell_type":"code","execution_count":179,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":173,"status":"ok","timestamp":1642366159327,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"E9V0BvVepkfg","outputId":"84f52375-1fc4-43e6-c9e9-051bbb7258b4"},"outputs":[{"data":{"text/plain":["\u003ctf.Tensor: shape=(10,), dtype=float32, numpy=\n","array([8845.381 , 8769.115 , 9044.852 , 8745.515 , 8727.0625, 8773.182 ,\n","       8669.289 , 8502.578 , 8469.248 , 8527.997 ], dtype=float32)\u003e"]},"execution_count":179,"metadata":{},"output_type":"execute_result"}],"source":["# Make predictions on multivariate data\n","model_6_preds = tf.squeeze(model_6.predict(X_test))\n","model_6_preds[:10]"]},{"cell_type":"code","execution_count":180,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1642366159707,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"PDN0glSWpkyz","outputId":"9b230181-28e9-4f04-8733-d457eebbcad3"},"outputs":[{"data":{"text/plain":["{'mae': 568.33545,\n"," 'mape': 2.5493133,\n"," 'mase': 0.99840796,\n"," 'mse': 1164860.0,\n"," 'rmse': 1079.2867}"]},"execution_count":180,"metadata":{},"output_type":"execute_result"}],"source":["# Evaluate preds\n","model_6_results = evaluate_preds(y_true=y_test,\n","                                 y_pred=model_6_preds)\n","model_6_results"]},{"cell_type":"markdown","metadata":{"id":"QMZXa77vpmp5"},"source":["Hmmm... how do these results compare to `model_1` (same window size and horizon but without the block reward feature)?"]},{"cell_type":"code","execution_count":181,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":128,"status":"ok","timestamp":1642366174819,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"weuJ3uOrptQW","outputId":"95520fa8-66cf-42e2-a83d-af9df9191e2e"},"outputs":[{"data":{"text/plain":["{'mae': 568.5498,\n"," 'mape': 2.549229,\n"," 'mase': 0.99878454,\n"," 'mse': 1172587.6,\n"," 'rmse': 1082.8608}"]},"execution_count":181,"metadata":{},"output_type":"execute_result"}],"source":["model_1_results"]},{"cell_type":"markdown","metadata":{"id":"SGFYMr4qpwUw"},"source":["It looks like the adding in the block reward may have helped our model slightly.\n","\n","But there a few more things we could try.\n","\n","\u003e üìñ **Resource:** For different ideas on how to improve a neural network model (from a model perspective), refer to the [*Improving a model*](https://dev.mrdbourke.com/tensorflow-deep-learning/02_neural_network_classification_in_tensorflow/#improving-a-model) section in notebook 02.\n","\n","\n","\u003e üõ† **Exercise(s):** \n","\u003e 1. Try adding an extra `tf.keras.layers.Dense()` layer with 128 hidden units to `model_6`, how does this effect model performance?\n","\u003e 2. Is there a better way to create this model? As in, should the `block_reward` feature be bundled in with the Bitcoin historical price feature? Perhaps you could test whether building a multi-input model (e.g. one model input for Bitcoin price history and one model input for `block_reward`)  works better? See [*Model 4: Hybrid embedding*](https://dev.mrdbourke.com/tensorflow-deep-learning/09_SkimLit_nlp_milestone_project_2/#model-4-combining-pretrained-token-embeddings-character-embeddings-hybrid-embedding-layer) section of notebook 09 for an idea on how to create a multi-input model."]},{"cell_type":"markdown","metadata":{"id":"YLnNSsvVpzrx"},"source":["## Model 7: N-BEATS algorithm\n","\n","Time to step things up a notch.\n","\n","So far we've tried a bunch of smaller models, models with only a couple of layers.\n","\n","But one of the best ways to improve a model's performance is to increase the number of layers in it.\n","\n","That's exactly what the [N-BEATS (Neural Basis Expansion Analysis for Interpretable Time Series Forecasting) algorithm](https://arxiv.org/pdf/1905.10437.pdf) does.\n","\n","The N-BEATS algorithm focuses on univariate time series problems and achieved state-of-the-art performance in the winner of the [M4 competition](https://www.sciencedirect.com/science/article/pii/S0169207019301128) (a forecasting competition).\n","\n","For our next modelling experiment we're going to be replicating the **generic architecture** of the N-BEATS algorithm (see [section 3.3 of the N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf)).\n","\n","We're not going to go through all of the details in the paper, instead we're going to focus on:\n","1. Replicating the model architecture in [Figure 1 of the N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf) \n","\n","![figure 1 from N-BBEATS paper, the algorithm we're going to build](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-figure-1-nbeats-paper-annotated.png)\n","*N-BEATS algorithm we're going to replicate with TensorFlow with window (input) and horizon (output) annotations.*\n","\n","2. Using the same hyperparameters as the paper which can be found in [Appendix D of the N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf)\n","\n","Doing this will give us an opportunity to practice:\n","* Creating a custom layer for the `NBeatsBlock` by subclassing [`tf.keras.layers.Layer`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer)\n","  * Creating a custom layer is helpful for when TensorFlow doesn't already have an existing implementation of a layer or if you'd like to make a layer configuration repeat a number of times (e.g. like a stack of N-BEATS blocks)\n","* Implementing a custom architecture using the Functional API \n","* Finding a paper related to our problem and seeing how it goes \n","\n","\u003e üîë **Note:** As you'll see in the paper, the authors state ‚ÄúN-BEATS is implemented and trained in TensorFlow‚Äù, that's what we'll be doing too!\n"]},{"cell_type":"markdown","metadata":{"id":"sE03oUSBqJTB"},"source":["### Building and testing an N-BEATS block layer\n","\n","Let's start by building an N-BEATS block layer, we'll write the code first and then discuss what's going on."]},{"cell_type":"code","execution_count":182,"metadata":{"executionInfo":{"elapsed":115,"status":"ok","timestamp":1642366285582,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"66Fk8lOzqLAB"},"outputs":[],"source":["# Create NBeatsBlock custom layer \n","class NBeatsBlock(tf.keras.layers.Layer):\n","  def __init__(self, # the constructor takes all the hyperparameters for the layer\n","               input_size: int,\n","               theta_size: int,\n","               horizon: int,\n","               n_neurons: int,\n","               n_layers: int,\n","               **kwargs): # the **kwargs argument takes care of all of the arguments for the parent class (input_shape, trainable, name)\n","    super().__init__(**kwargs)\n","    self.input_size = input_size\n","    self.theta_size = theta_size\n","    self.horizon = horizon\n","    self.n_neurons = n_neurons\n","    self.n_layers = n_layers\n","\n","    # Block contains stack of 4 fully connected layers each has ReLU activation\n","    self.hidden = [tf.keras.layers.Dense(n_neurons, activation=\"relu\") for _ in range(n_layers)]\n","    # Output of block is a theta layer with linear activation\n","    self.theta_layer = tf.keras.layers.Dense(theta_size, activation=\"linear\", name=\"theta\")\n","\n","  def call(self, inputs): # the call method is what runs when the layer is called \n","    x = inputs \n","    for layer in self.hidden: # pass inputs through each hidden layer \n","      x = layer(x)\n","    theta = self.theta_layer(x) \n","    # Output the backcast and forecast from theta\n","    backcast, forecast = theta[:, :self.input_size], theta[:, -self.horizon:]\n","    return backcast, forecast"]},{"cell_type":"markdown","metadata":{"id":"2WUAAuqVqLXX"},"source":["Setting up the `NBeatsBlock` custom layer we see: \n","* The class inherits from `tf.keras.layers.Layer` (this gives it all of the methods assosciated with `tf.keras.layers.Layer`)\n","* The constructor (`def __init__(...)`) takes all of the layer hyperparameters as well as the `**kwargs` argument\n","  * The `**kwargs` argument takes care of all of the hyperparameters which aren't mentioned in the constructor such as, `input_shape`, `trainable` and `name`\n","* In the constructor, the block architecture layers are created:\n","  * The hidden layers are created as a stack of fully connected with `n_nuerons` hidden units layers with ReLU activation\n","  * The theta layer uses `theta_size` hidden units as well as linear activation\n","* The `call()` method is what is run when the layer is called:\n","  * It first passes the inputs (the historical Bitcoin data) through each of the hidden layers (a stack of fully connected layers with ReLU activation)\n","  * After the inputs have been through each of the fully connected layers, they get passed through the theta layer where the backcast (backwards predictions, shape: `input_size`) and forecast (forward predictions, shape: `horizon`) are returned\n","\n","![code mapping to image of N-BEATS basic block](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-nbeats-basic-block-replication-with-tensorflow-layer-subclassing.png)\n","*Using TensorFlow layer subclassing to replicate the N-BEATS basic block. See section 3.1 of N-BEATS paper for details.*\n","\n","Let's see our block replica in action by together by creating a toy version of `NBeatsBlock`.\n","\n","\u003e üìñ  **Resource:** Much of the creation of the time series materials (the ones you're going through now), including replicating the N-BEATS algorithm were streamed live on Twitch. If you'd like to see replays of how the algorithm was replicated, check out the [*Time series research and TensorFlow course material creation playlist*](https://youtube.com/playlist?list=PL8IpyNZ21vUSCM7nRAuS-hW_E-sgwdmaI) on the Daniel Bourke arXiv YouTube channel."]},{"cell_type":"code","execution_count":183,"metadata":{"executionInfo":{"elapsed":139,"status":"ok","timestamp":1642366626591,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"O7Jjcmdlrccz"},"outputs":[],"source":["# Set up dummy NBeatsBlock layer to represent inputs and outputs\n","dummy_nbeats_block_layer = NBeatsBlock(input_size=WINDOW_SIZE, \n","                                       theta_size=WINDOW_SIZE+HORIZON, # backcast + forecast \n","                                       horizon=HORIZON,\n","                                       n_neurons=128,\n","                                       n_layers=4)"]},{"cell_type":"code","execution_count":184,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":186,"status":"ok","timestamp":1642366631155,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"vJS68I1HrenP","outputId":"83ed6004-ff12-47c5-c2ba-8d85e2548e6d"},"outputs":[{"data":{"text/plain":["\u003ctf.Tensor: shape=(1, 7), dtype=int32, numpy=array([[1, 2, 3, 4, 5, 6, 7]], dtype=int32)\u003e"]},"execution_count":184,"metadata":{},"output_type":"execute_result"}],"source":["# Create dummy inputs (have to be same size as input_size)\n","dummy_inputs = tf.expand_dims(tf.range(WINDOW_SIZE) + 1, axis=0) # input shape to the model has to reflect Dense layer input requirements (ndim=2)\n","dummy_inputs"]},{"cell_type":"code","execution_count":185,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":123,"status":"ok","timestamp":1642366635480,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"h0to1kF_rfud","outputId":"0555aaeb-5c1c-47f6-b47c-bf7ec05d18df"},"outputs":[{"name":"stdout","output_type":"stream","text":["Backcast: [ 0.19014983  0.8379835  -0.32870027  0.25159904 -0.47540277 -0.7783665\n"," -0.5299448 ]\n","Forecast: -0.7554212808609009\n"]}],"source":["# Pass dummy inputs to dummy NBeatsBlock layer\n","backcast, forecast = dummy_nbeats_block_layer(dummy_inputs)\n","# These are the activation outputs of the theta layer (they'll be random due to no training of the model)\n","print(f\"Backcast: {tf.squeeze(backcast.numpy())}\")\n","print(f\"Forecast: {tf.squeeze(forecast.numpy())}\")"]},{"cell_type":"markdown","metadata":{"id":"-KEDshrargyj"},"source":["### Preparing data for the N-BEATS algorithm using `tf.data`\n","\n","We've got the basic building block for the N-BEATS architecture ready to go.\n","\n","But before we use it to replicate the entire N-BEATS generic architecture, let's create some data.\n","\n","This time, because we're going to be using a larger model architecture, to ensure our model training runs as fast as possible, we'll setup our datasets using the `tf.data` API.\n","\n","And because the N-BEATS algorithm is focused on univariate time series, we'll start by making training and test windowed datasets of Bitcoin prices (just as we've done above).\n"]},{"cell_type":"code","execution_count":186,"metadata":{"executionInfo":{"elapsed":111,"status":"ok","timestamp":1642366651892,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"-aHocSBqrj7V"},"outputs":[],"source":["HORIZON = 1 # how far to predict forward\n","WINDOW_SIZE = 7 # how far to lookback"]},{"cell_type":"code","execution_count":187,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":145,"status":"ok","timestamp":1642366655791,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"iI0gKUC-rkzU","outputId":"2767c04e-4b4a-4ac5-d40f-332da62c4220"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-c9a97f2a-08e6-4244-8018-b33ba56e696d\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-01\u003c/th\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-02\u003c/th\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-03\u003c/th\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-04\u003c/th\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-05\u003c/th\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9a97f2a-08e6-4244-8018-b33ba56e696d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-c9a97f2a-08e6-4244-8018-b33ba56e696d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c9a97f2a-08e6-4244-8018-b33ba56e696d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price\n","Date                 \n","2013-10-01  123.65499\n","2013-10-02  125.45500\n","2013-10-03  108.58483\n","2013-10-04  118.67466\n","2013-10-05  121.33866"]},"execution_count":187,"metadata":{},"output_type":"execute_result"}],"source":["# Create NBEATS data inputs (NBEATS works with univariate time series)\n","bitcoin_prices.head()"]},{"cell_type":"code","execution_count":188,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"elapsed":253,"status":"ok","timestamp":1642366661545,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"XQSXHH-rrlvv","outputId":"7a6e44e3-8915-474b-f1c6-25181c5acee7"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-77dc237a-4cac-4ab1-9226-43d257c18ae0\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ePrice\u003c/th\u003e\n","      \u003cth\u003ePrice+1\u003c/th\u003e\n","      \u003cth\u003ePrice+2\u003c/th\u003e\n","      \u003cth\u003ePrice+3\u003c/th\u003e\n","      \u003cth\u003ePrice+4\u003c/th\u003e\n","      \u003cth\u003ePrice+5\u003c/th\u003e\n","      \u003cth\u003ePrice+6\u003c/th\u003e\n","      \u003cth\u003ePrice+7\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eDate\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-08\u003c/th\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","      \u003ctd\u003e123.65499\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-09\u003c/th\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","      \u003ctd\u003e125.45500\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-10\u003c/th\u003e\n","      \u003ctd\u003e125.96116\u003c/td\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","      \u003ctd\u003e108.58483\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-11\u003c/th\u003e\n","      \u003ctd\u003e125.27966\u003c/td\u003e\n","      \u003ctd\u003e125.96116\u003c/td\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","      \u003ctd\u003e118.67466\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2013-10-12\u003c/th\u003e\n","      \u003ctd\u003e125.92750\u003c/td\u003e\n","      \u003ctd\u003e125.27966\u003c/td\u003e\n","      \u003ctd\u003e125.96116\u003c/td\u003e\n","      \u003ctd\u003e124.04900\u003c/td\u003e\n","      \u003ctd\u003e123.03300\u003c/td\u003e\n","      \u003ctd\u003e121.79500\u003c/td\u003e\n","      \u003ctd\u003e120.65533\u003c/td\u003e\n","      \u003ctd\u003e121.33866\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77dc237a-4cac-4ab1-9226-43d257c18ae0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-77dc237a-4cac-4ab1-9226-43d257c18ae0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-77dc237a-4cac-4ab1-9226-43d257c18ae0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["                Price    Price+1    Price+2  ...    Price+5    Price+6    Price+7\n","Date                                         ...                                 \n","2013-10-08  123.03300  121.79500  120.65533  ...  108.58483  125.45500  123.65499\n","2013-10-09  124.04900  123.03300  121.79500  ...  118.67466  108.58483  125.45500\n","2013-10-10  125.96116  124.04900  123.03300  ...  121.33866  118.67466  108.58483\n","2013-10-11  125.27966  125.96116  124.04900  ...  120.65533  121.33866  118.67466\n","2013-10-12  125.92750  125.27966  125.96116  ...  121.79500  120.65533  121.33866\n","\n","[5 rows x 8 columns]"]},"execution_count":188,"metadata":{},"output_type":"execute_result"}],"source":["# Add windowed columns\n","bitcoin_prices_nbeats = bitcoin_prices.copy()\n","for i in range(WINDOW_SIZE):\n","  bitcoin_prices_nbeats[f\"Price+{i+1}\"] = bitcoin_prices_nbeats[\"Price\"].shift(periods=i+1)\n","bitcoin_prices_nbeats.dropna().head()"]},{"cell_type":"code","execution_count":189,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":149,"status":"ok","timestamp":1642366690856,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Q0KrEzwRrnHM","outputId":"1ec020e7-3e80-4b99-ea35-649d4d99434c"},"outputs":[{"data":{"text/plain":["(2224, 2224, 556, 556)"]},"execution_count":189,"metadata":{},"output_type":"execute_result"}],"source":["# Make features and labels\n","X = bitcoin_prices_nbeats.dropna().drop(\"Price\", axis=1)\n","y = bitcoin_prices_nbeats.dropna()[\"Price\"]\n","\n","# Make train and test sets\n","split_size = int(len(X) * 0.8)\n","X_train, y_train = X[:split_size], y[:split_size]\n","X_test, y_test = X[split_size:], y[split_size:]\n","len(X_train), len(y_train), len(X_test), len(y_test)"]},{"cell_type":"markdown","metadata":{"id":"PeMxOsZsruTZ"},"source":["Train and test sets ready to go!\n","\n","Now let's convert them into TensorFlow `tf.data.Dataset`'s to ensure they run as fast as possible whilst training.\n","\n","We'll do this by:\n","1. Turning the arrays in tensor Datasets using [`tf.data.Dataset.from_tensor_slices()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#from_tensor_slices)\n","  * Note: `from_tensor_slices()` works best when your data fits in memory, for extremely large datasets, you'll want to look into using the [`TFRecord` format](https://www.tensorflow.org/tutorials/load_data/tfrecord)\n","2. Combine the labels and features tensors into a Dataset using [`tf.data.Dataset.zip()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#zip)\n","3. Batch and prefetch the Datasets using [`batch()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#batch) and [`prefetch()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#prefetch)\n","  * Batching and prefetching ensures the loading time from CPU (preparing data) to GPU (computing on data) is as small as possible \n","\n","\u003e üìñ **Resource:** For more on building highly performant TensorFlow data pipelines, I'd recommend reading through the [*Better performance with the tf.data API*](https://www.tensorflow.org/guide/data_performance) guide."]},{"cell_type":"code","execution_count":190,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":119,"status":"ok","timestamp":1642366712654,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"lkFrFfnWrxun","outputId":"e8a301bf-1881-4c92-c104-f0d021ab9877"},"outputs":[{"data":{"text/plain":["(\u003cPrefetchDataset shapes: ((None, 7), (None,)), types: (tf.float64, tf.float64)\u003e,\n"," \u003cPrefetchDataset shapes: ((None, 7), (None,)), types: (tf.float64, tf.float64)\u003e)"]},"execution_count":190,"metadata":{},"output_type":"execute_result"}],"source":["# 1. Turn train and test arrays into tensor Datasets\n","train_features_dataset = tf.data.Dataset.from_tensor_slices(X_train)\n","train_labels_dataset = tf.data.Dataset.from_tensor_slices(y_train)\n","\n","test_features_dataset = tf.data.Dataset.from_tensor_slices(X_test)\n","test_labels_dataset = tf.data.Dataset.from_tensor_slices(y_test)\n","\n","# 2. Combine features \u0026 labels\n","train_dataset = tf.data.Dataset.zip((train_features_dataset, train_labels_dataset))\n","test_dataset = tf.data.Dataset.zip((test_features_dataset, test_labels_dataset))\n","\n","# 3. Batch and prefetch for optimal performance\n","BATCH_SIZE = 1024 # taken from Appendix D in N-BEATS paper\n","train_dataset = train_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\n","test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\n","\n","train_dataset, test_dataset"]},{"cell_type":"markdown","metadata":{"id":"vaHX4FoUrzn_"},"source":["Data prepared! Notice the input shape for the features `(None, 7)`, the `None` leaves space for the batch size where as the `7` represents the `WINDOW_SIZE`.\n","\n","Time to get create the N-BEATS architecture. "]},{"cell_type":"markdown","metadata":{"id":"wHhdGxEVr4ar"},"source":["### Setting up hyperparameters for N-BEATS algorithm\n","\n","Ho ho, would you look at that! Datasets ready, model building block ready, what'd you say we put things together?\n","\n","Good idea.\n","\n","Okay.\n","\n","Let's go.\n","\n","To begin, we'll create variables for each of the hyperparameters we'll be using for our N-BEATS replica.\n","\n","\u003e üìñ **Resource:** The following hyperparameters are taken from Figure 1 and Table 18/Appendix D of the [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf).\n","\n","![table 18 from N-BEATS paper](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-nbeats-table-18-hyperparameters.png)\n","*Table 18 from [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf) describing the hyperparameters used for the different variants of N-BEATS. We're using N-BEATS-G which stands for the generic version of N-BEATS.*\n","\n","\u003e üîë **Note:** If you see variables in a machine learning example in all caps, such as \"`N_EPOCHS = 100`\", these variables are often hyperparameters which are used through the example. You'll usually see them instantiated towards the start of an experiment and then used throughout.\n","\n"]},{"cell_type":"code","execution_count":191,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":127,"status":"ok","timestamp":1642366756991,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"zSwK6Lmsr9Y2","outputId":"a2b259c6-1c8f-4393-afe1-f696b0a6ec8c"},"outputs":[{"data":{"text/plain":["(7, 8)"]},"execution_count":191,"metadata":{},"output_type":"execute_result"}],"source":["# Values from N-BEATS paper Figure 1 and Table 18/Appendix D\n","N_EPOCHS = 5000 # called \"Iterations\" in Table 18\n","N_NEURONS = 512 # called \"Width\" in Table 18\n","N_LAYERS = 4\n","N_STACKS = 30\n","\n","INPUT_SIZE = WINDOW_SIZE * HORIZON # called \"Lookback\" in Table 18\n","THETA_SIZE = INPUT_SIZE + HORIZON\n","\n","INPUT_SIZE, THETA_SIZE"]},{"cell_type":"markdown","metadata":{"id":"aKxRLXgTr-Uh"},"source":["### Getting ready for residual connections\n","\n","Beautiful! Hyperparameters ready, now before we create the N-BEATS model, there are two layers to go through which play a large roll in the architecture.\n","\n","They're what make N-BEATS **double residual stacking** (section 3.2 of the [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf)) possible:\n","* [`tf.keras.layers.subtract(inputs)`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/subtract) - subtracts list of input tensors from each other\n","* [`tf.keras.layers.add(inputs)`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/add) - adds list of input tensors to each other\n","\n","Let's try them out."]},{"cell_type":"code","execution_count":192,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":116,"status":"ok","timestamp":1642366771377,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Zvbb2yNFsBqc","outputId":"83ea253d-35aa-4fed-b35b-55194b4853eb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Input tensors: [10 11 12 13 14 15 16 17 18 19] \u0026 [0 1 2 3 4 5 6 7 8 9]\n","Subtracted: [10 10 10 10 10 10 10 10 10 10]\n","Added: [10 12 14 16 18 20 22 24 26 28]\n"]}],"source":["# Make tensors\n","tensor_1 = tf.range(10) + 10\n","tensor_2 = tf.range(10)\n","\n","# Subtract\n","subtracted = layers.subtract([tensor_1, tensor_2])\n","\n","# Add\n","added = layers.add([tensor_1, tensor_2])\n","\n","print(f\"Input tensors: {tensor_1.numpy()} \u0026 {tensor_2.numpy()}\")\n","print(f\"Subtracted: {subtracted.numpy()}\")\n","print(f\"Added: {added.numpy()}\")"]},{"cell_type":"markdown","metadata":{"id":"a4K-hfJgsB-J"},"source":["Both of these layer functions are straight-forward, subtract or add together their inputs.\n","\n","And as mentioned before, they're what powers N-BEATS double residual stacking.\n","\n","The power of **residual stacking** or **residual connections** was revealed in [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385) where the authors were able to build a deeper but less complex neural network (this is what introduced the popular [ResNet architecture](https://en.wikipedia.org/wiki/Residual_neural_network)) than previous attempts. \n","\n","This deeper neural network led to state of the art results on the ImageNet challenge in 2015 and different versions of residual connections have been present in deep learning ever since.\n","\n","\u003e What is a residual connection?\n","\n","A **residual connection** (also called skip connections) involves a deeper neural network layer receiving the outputs as well as the inputs of a shallower neural network layer.\n","\n","In the case of N-BEATS, the architecture uses residual connections which:\n","* Subtract the backcast outputs from a previous block from the backcast inputs to the current block\n","* Add the forecast outputs from all blocks together in a stack \n","\n","![N-BEATS architecture double residual stacking](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-nbeats-architecture-double-residual-stacking.png)\n","*Annotated version of Figure 1 from the N-BEATS paper highlighting the double residual stacking (section 3.2) of the architecture. Backcast residuals of each block are subtracted from each other and used as the input to the next block where as the forecasts of each block are added together to become the stack forecast.*\n","\n","\u003e What are the benefits of residual connections?\n","\n","In practice, residual connections have been beneficial for training deeper models (N-BEATS reaches ~150 layers, also see \"These approaches provide clear advantages in improving the trainability of deep architectures\" in section 3.2 of the [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf)).  \n","\n","It's thought that they help avoid the problem of [vanishing gradients](https://en.wikipedia.org/wiki/Vanishing_gradient_problem) (patterns learned by a neural network not being passed through to deeper layers).\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-5crw-HKtZQy"},"source":["### Building, compiling and fitting the N-BEATS algorithm \n","\n","Okay, we've finally got all of the pieces of the puzzle ready for building and training the N-BEATS algorithm.\n","\n","We'll do so by going through the following:\n","\n","1. Setup an instance of the N-BEATS block layer using `NBeatsBlock` (this'll be the initial block used for the network, the rest will be created as part of stacks)\n","2. Create an input layer for the N-BEATS stack (we'll be using the [Keras Functional API](https://www.tensorflow.org/guide/keras/functional) for this)\n","3. Make the initial backcast and forecasts for the model with the layer created in (1)\n","4. Use a for loop to create stacks of block layers\n","5. Use the NBeatsBlock class within the for loop created in (4) to create blocks which return backcasts and block-level forecasts\n","6. Create the double residual stacking using subtract and add layers\n","7. Put the model inputs and outputs together using [`tf.keras.Model()`](https://www.tensorflow.org/api_docs/python/tf/keras/Model)\n","8. Compile the model with MAE loss (the paper uses multiple losses but we'll use MAE to keep it inline with our other models) and Adam optimizer with default settings as per section 5.2 of [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf))\n","9. Fit the N-BEATS model for 5000 epochs and since it's fitting for so many epochs, we'll use a couple of callbacks:\n","  * [`tf.keras.callbacks.EarlyStopping()`](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping) - stop the model from training if it doesn't improve validation loss for 200 epochs and restore the best performing weights using `restore_best_weights=True` (this'll prevent the model from training for loooongggggg period of time without improvement)\n","  * [`tf.keras.callbacks.ReduceLROnPlateau()`](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ReduceLROnPlateau) - if the model's validation loss doesn't improve for 100 epochs, reduce the learning rate by 10x to try and help it make incremental improvements (the smaller the learning rate, the smaller updates a model tries to make)\n","\n","Woah. A bunch of steps. But I'm sure you're up to it.\n","\n","Let's do it!"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"yR9veRlctg3z"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Epoch 00245: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n","\n","Epoch 00345: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n","CPU times: user 1h 14min 17s, sys: 1min 54s, total: 1h 16min 12s\n","Wall time: 49min 24s\n"]}],"source":[" %%time\n","\n","tf.random.set_seed(42)\n","\n","# 1. Setup N-BEATS Block layer\n","nbeats_block_layer = NBeatsBlock(input_size=INPUT_SIZE,\n","                                 theta_size=THETA_SIZE,\n","                                 horizon=HORIZON,\n","                                 n_neurons=N_NEURONS,\n","                                 n_layers=N_LAYERS,\n","                                 name=\"InitialBlock\")\n","\n","# 2. Create input to stacks\n","stack_input = layers.Input(shape=(INPUT_SIZE), name=\"stack_input\")\n","\n","# 3. Create initial backcast and forecast input (backwards predictions are referred to as residuals in the paper)\n","backcast, forecast = nbeats_block_layer(stack_input)\n","# Add in subtraction residual link, thank you to: https://github.com/mrdbourke/tensorflow-deep-learning/discussions/174 \n","residuals = layers.subtract([stack_input, backcast], name=f\"subtract_00\") \n","\n","# 4. Create stacks of blocks\n","for i, _ in enumerate(range(N_STACKS-1)): # first stack is already creted in (3)\n","\n","  # 5. Use the NBeatsBlock to calculate the backcast as well as block forecast\n","  backcast, block_forecast = NBeatsBlock(\n","      input_size=INPUT_SIZE,\n","      theta_size=THETA_SIZE,\n","      horizon=HORIZON,\n","      n_neurons=N_NEURONS,\n","      n_layers=N_LAYERS,\n","      name=f\"NBeatsBlock_{i}\"\n","  )(residuals) # pass it in residuals (the backcast)\n","\n","  # 6. Create the double residual stacking\n","  residuals = layers.subtract([residuals, backcast], name=f\"subtract_{i}\") \n","  forecast = layers.add([forecast, block_forecast], name=f\"add_{i}\")\n","\n","# 7. Put the stack model together\n","model_7 = tf.keras.Model(inputs=stack_input, \n","                         outputs=forecast, \n","                         name=\"model_7_N-BEATS\")\n","\n","# 8. Compile with MAE loss and Adam optimizer\n","model_7.compile(loss=\"mae\",\n","                optimizer=tf.keras.optimizers.Adam(0.001),\n","                metrics=[\"mae\", \"mse\"])\n","\n","# 9. Fit the model with EarlyStopping and ReduceLROnPlateau callbacks\n","model_7.fit(train_dataset,\n","            epochs=N_EPOCHS,\n","            validation_data=test_dataset,\n","            verbose=0, # prevent large amounts of training outputs\n","            # callbacks=[create_model_checkpoint(model_name=stack_model.name)] # saving model every epoch consumes far too much time\n","            callbacks=[tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=200, restore_best_weights=True),\n","                      tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", patience=100, verbose=1)])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZwVZpD1St8wQ"},"outputs":[],"source":["# Evaluate N-BEATS model on the test dataset\n","model_7.evaluate(test_dataset)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"65rKqx3yt-m4"},"outputs":[],"source":["# Make predictions with N-BEATS model\n","model_7_preds = make_preds(model_7, test_dataset)\n","model_7_preds[:10]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wTRsLP0Qt_20"},"outputs":[],"source":["# Evaluate N-BEATS model predictions\n","model_7_results = evaluate_preds(y_true=y_test,\n","                                 y_pred=model_7_preds)\n","model_7_results"]},{"cell_type":"markdown","metadata":{"id":"OAlb4l1duA9O"},"source":["Woah... even with all of those special layers and hand-crafted network, it looks like the N-BEATS model doesn't perform as well as `model_1` or the original naive forecast.\n","\n","This goes to show the power of smaller networks as well as the fact not all larger models are better suited for a certain type of data.\n","\n","### Plotting the N-BEATS architecture we've created\n","\n","You know what would be cool?\n","\n","If we could plot the N-BEATS model we've crafted.\n","\n","Well it turns out we can using [`tensorflow.keras.utils.plot_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/utils/plot_model).\n","\n","Let's see what it looks like."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NHhKD5ZnuEHw"},"outputs":[],"source":["# Plot the N-BEATS model and inspect the architecture\n","from tensorflow.keras.utils import plot_model\n","plot_model(model_7)"]},{"cell_type":"markdown","metadata":{"id":"CcF6pa_5uGUv"},"source":["Now that is one good looking model! \n","\n","It even looks similar to the model shown in Figure 1 of the N-BEATS paper. \n","\n","![N-BEATS replica model compared with actual N-BEATS architecture](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-nbeats-stack-model-vs-nbeats-architecture.png)\n","*Comparison of `model_7` (N-BEATS replica model make with Keras Functional API) versus actual N-BEATS architecture diagram.*\n","\n","Looks like our Functional API usage did the trick! \n","\n","\u003e üîë **Note:** Our N-BEATS model replicates the N-BEATS **generic architecture**, the training setups are largely the same, except for the N-BEATS paper used an ensemble of models to make predictions (multiple different loss functions and multiple different lookback windows), see Table 18 of the [N-BEATS paper](https://arxiv.org/pdf/1905.10437.pdf) for more. An extension could be to setup this kind of training regime and see if it improves performance.\n","\n","How about we try and save our version of the N-BEATS model?"]},{"cell_type":"markdown","metadata":{"id":"hsqYzsiLuRyL"},"source":["## Model 8: Creating an ensemble (stacking different models together)\n","\n","After all that effort, the N-BEATS algorithm's performance was underwhelming.\n","\n","But again, this is part of the parcel of machine learning. Not everything will work.\n","\n","That's when we refer back to the motto: experiment, experiment, experiment.\n","\n","Our next experiment is creating an [**ensemble** of models](https://en.wikipedia.org/wiki/Ensemble_learning).\n","\n","An **ensemble** involves training and combining multiple different models on the same problem. Ensemble models are often the types of models you'll see winning data science competitions on websites like Kaggle.\n","\n","![high level overview of ensemble model: combining many different models may result in better results than one single model](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-ensemble-model-example.png)\n","*Example of the power of ensembling. One Daniel model makes a decision with a smart level of 7 but when a Daniel model teams up with multiple different people, together (ensembled) they make a decision with a smart level of 10. The key here is combining the decision power of people with different backgrounds, if you combined multiple Daniel models, you'd end up with an average smart level of 7. Note: smart level is not an actual measurement of decision making, it is for demonstration purposes only.*\n","\n","For example, in the N-BEATS paper, they trained an ensemble of models (180 in total, see [section 3.4](https://arxiv.org/pdf/1905.10437.pdf)) to achieve the results they did using a combination of:\n","  * Different loss functions (sMAPE, MASE and MAPE)\n","  * Different window sizes (2 x horizon, 3 x horizon, 4 x horizon...)\n","\n","The benefit of ensembling models is you get the \"decision of the crowd effect\". Rather than relying on a single model's predictions, you can [take the average or median of many different models](https://en.wikipedia.org/wiki/Ensemble_forecasting).\n","\n","The keyword being: different.\n","\n","It wouldn't make sense to train the same model 10 times on the same data and then average the predictions.\n","\n","Fortunately, due to their random initialization, even deep learning models with the same architecture can produce different results. \n","\n","What I mean by this is each time you create a deep learning model, it starts with random patterns (weights \u0026 biases) and then it adjusts these random patterns to better suit the dataset it's being trained on. \n","\n","However, the process it adjusts these patterns is often a form of guided randomness as well (the SGD optimizer stands for stochastic or random gradient descent).\n","\n","To create our ensemble models we're going to be using a combination of: \n","* Different loss functions (MAE, MSE, MAPE)\n","* Randomly initialized models \n","\n","Essentially, we'll be creating a suite of different models all attempting to model the same data.\n","\n","And hopefully the combined predictive power of each model is better than a single model on its own.\n","\n","Let's find out!\n","\n","We'll start by creating a function to produce a list of different models trained with different loss functions. Each layer in the ensemble models will be initialized with a random normal [(Gaussian) distribution](https://en.wikipedia.org/wiki/Normal_distribution) using [He normal initialization](https://www.tensorflow.org/api_docs/python/tf/keras/initializers/HeNormal), this'll help estimating the prediction intervals later on.\n","\n","\u003e üîë **Note:** In your machine leanring experiments, you may have already dealt with examples of ensemble models. Algorithms such as the [random forest model](https://towardsdatascience.com/understanding-random-forest-58381e0602d2) are a form of ensemble, it uses a number of randomly created decision trees where each individual tree may perform poorly but when combined gives great results.\n"]},{"cell_type":"markdown","metadata":{"id":"4--4KkaeuzXK"},"source":["### Constructing and fitting an ensemble of models (using different loss functions)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fF6a3cUAutI_"},"outputs":[],"source":["def get_ensemble_models(horizon=HORIZON, \n","                        train_data=train_dataset,\n","                        test_data=test_dataset,\n","                        num_iter=10, \n","                        num_epochs=100, \n","                        loss_fns=[\"mae\", \"mse\", \"mape\"]):\n","  \"\"\"\n","  Returns a list of num_iter models each trained on MAE, MSE and MAPE loss.\n","\n","  For example, if num_iter=10, a list of 30 trained models will be returned:\n","  10 * len([\"mae\", \"mse\", \"mape\"]).\n","  \"\"\"\n","  # Make empty list for trained ensemble models\n","  ensemble_models = []\n","\n","  # Create num_iter number of models per loss function\n","  for i in range(num_iter):\n","    # Build and fit a new model with a different loss function\n","    for loss_function in loss_fns:\n","      print(f\"Optimizing model by reducing: {loss_function} for {num_epochs} epochs, model number: {i}\")\n","\n","      # Construct a simple model (similar to model_1)\n","      model = tf.keras.Sequential([\n","        # Initialize layers with normal (Gaussian) distribution so we can use the models for prediction\n","        # interval estimation later: https://www.tensorflow.org/api_docs/python/tf/keras/initializers/HeNormal\n","        layers.Dense(128, kernel_initializer=\"he_normal\", activation=\"relu\"), \n","        layers.Dense(128, kernel_initializer=\"he_normal\", activation=\"relu\"),\n","        layers.Dense(HORIZON)                                 \n","      ])\n","\n","      # Compile simple model with current loss function\n","      model.compile(loss=loss_function,\n","                    optimizer=tf.keras.optimizers.Adam(),\n","                    metrics=[\"mae\", \"mse\"])\n","      \n","      # Fit model\n","      model.fit(train_data,\n","                epochs=num_epochs,\n","                verbose=0,\n","                validation_data=test_data,\n","                # Add callbacks to prevent training from going/stalling for too long\n","                callbacks=[tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\",\n","                                                            patience=200,\n","                                                            restore_best_weights=True),\n","                           tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\",\n","                                                                patience=100,\n","                                                                verbose=1)])\n","      \n","      # Append fitted model to list of ensemble models\n","      ensemble_models.append(model)\n","\n","  return ensemble_models # return list of trained models"]},{"cell_type":"markdown","metadata":{"id":"E_77Xw6uuuwx"},"source":["Ensemble model creator function created!\n","\n","Let's try it out by running `num_iter=5` runs for 1000 epochs. This will result in 15 total models (5 for each different loss function).\n","\n","Of course, these numbers could be tweaked to create more models trained for longer. \n","\n","\u003e üîë **Note:** With ensembles, you'll generally find more total models means better performance. However, this comes with the tradeoff of having to train more models (longer training time) and make predictions with more models (longer prediction time).\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"itG9reQ1u6lQ"},"outputs":[],"source":["%%time\n","# Get list of trained ensemble models\n","ensemble_models = get_ensemble_models(num_iter=5,\n","                                      num_epochs=1000)"]},{"cell_type":"markdown","metadata":{"id":"YDo17S1Yu85c"},"source":["Look at all of those models! \n","\n","How about we now write a function to use the list of trained ensemble models to make predictions and then return a list of predictions (one set of predictions per model)?\n","\n","### Making predictions with an ensemble model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QiSuG9JcvDGd"},"outputs":[],"source":["# Create a function which uses a list of trained models to make and return a list of predictions\n","def make_ensemble_preds(ensemble_models, data):\n","  ensemble_preds = []\n","  for model in ensemble_models:\n","    preds = model.predict(data) # make predictions with current ensemble model\n","    ensemble_preds.append(preds)\n","  return tf.constant(tf.squeeze(ensemble_preds))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3F8yBt3ZvEiU"},"outputs":[],"source":["# Create a list of ensemble predictions\n","ensemble_preds = make_ensemble_preds(ensemble_models=ensemble_models,\n","                                     data=test_dataset)\n","ensemble_preds"]},{"cell_type":"markdown","metadata":{"id":"jMDQyuWuvF6t"},"source":["Now we've got a set of ensemble predictions, we can evaluate them against the ground truth values.\n","\n","However, since we've trained 15 models, there's going to be 15 sets of predictions. Rather than comparing every set of predictions to the ground truth, let's take the median (you could also take the mean too but [the median is usually more robust than the mean](https://www.johndcook.com/blog/2009/03/06/student-t-distribution-mean-median/))."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"75JG1TyOvIfN"},"outputs":[],"source":["# Evaluate ensemble model(s) predictions\n","ensemble_results = evaluate_preds(y_true=y_test,\n","                                  y_pred=np.median(ensemble_preds, axis=0)) # take the median across all ensemble predictions\n","ensemble_results"]},{"cell_type":"markdown","metadata":{"id":"xTUhNeVHvJZL"},"source":["Nice! Looks like the ensemble model is the best performing model on the MAE metric so far."]},{"cell_type":"markdown","metadata":{"id":"CSQqFiZCvUam"},"source":["### Plotting the prediction intervals (uncertainty estimates) of our ensemble\n","\n","Right now all of our model's (prior to the ensemble model) are predicting single points. \n","\n","Meaning, given a set of `WINDOW_SIZE=7` values, the model will predict `HORIZION=1`.\n","\n","But what might be more helpful than a single value?\n","\n","Perhaps a range of values?\n","\n","For example, if a model is predicting the price of Bitcoin to be 50,000USD tomorrow, would it be helpful to know it's predicting the 50,000USD because it's predicting the price to be between 48,000 and 52,000USD? (note: \"$\" has been omitted from the previous sentence due to formatting issues)\n","\n","Knowing the range of values a model is predicting may help you make better decisions for your forecasts.\n","\n","You'd know that although the model is predicting 50,000USD (a **point prediction**, or single value in time), the value could actually be within the range 48,000USD to 52,000USD (of course, the value could also be *outside* of this range as well, but we'll get to that later).\n","\n","These kind of prediction ranges are called **prediction intervals** or **uncertainty estimates**. And they're often as important as the forecast itself.\n","\n","Why?\n","\n","Because **point predictions** are almost always going to be wrong. So having a range of values can help with decision making.\n","\n","\u003e üìñ **Resource(s):** \n","\u003e * The steps we're about to take have been inspired by the Machine Learning Mastery blog post [*Prediction Intervals for Deep Learning Neural Networks*](https://machinelearningmastery.com/prediction-intervals-for-deep-learning-neural-networks/). Check out the post for more options to measure uncertainty with neural networks.\n","\u003e * For an example of uncertainty estimates being used in the wild, I'd also refer to Uber's [*Engineering Uncertainty Estimation in Neural Networks for Time Series Prediction at Uber*](https://eng.uber.com/neural-networks-uncertainty-estimation/) blog post.\n","\n","![example of Uber's prediction intervals for daily completed trips in San Francisco](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-prediction-intervals-from-ubers-uncertainty-measures.png)\n","*Example of how uncertainty estimates and predictions intervals can give an understanding of where point predictions (a single number) may not include all of useful information you'd like to know. For example, your model's point prediction for Uber trips on New Years Eve might be 100 (a made up number) but really, the prediction intervals are between 55 and 153 (both made up for the example). In this case, preparing 100 rides might end up being 53 short (it could even be more, like the point prediction, the prediction intervals are also estimates). The image comes from Uber's [blog post on uncertainty estimation in neural networks](https://eng.uber.com/neural-networks-uncertainty-estimation/).*\n","\n","One way of getting the 95% condfidnece prediction intervals for a deep learning model is the bootstrap method: \n","1. Take the predictions from a number of randomly initialized models (we've got this thanks to our ensemble model)\n","2. Measure the standard deviation of the predictions\n","3. Multiply standard deviation by [1.96](https://en.wikipedia.org/wiki/1.96) (assuming the distribution is Gaussian, 95% of observations fall within 1.96 standard deviations of the mean, this is why we initialized our neural networks with a normal distribution)\n","4. To get the prediction interval upper and lower bounds, add and subtract the value obtained in (3) to the mean/median of the predictions made in (1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hi8GQCMlvcO-"},"outputs":[],"source":["# Find upper and lower bounds of ensemble predictions\n","def get_upper_lower(preds): # 1. Take the predictions of multiple randomly initialized deep learning neural networks\n","  \n","  # 2. Measure the standard deviation of the predictions\n","  std = tf.math.reduce_std(preds, axis=0)\n","  \n","  # 3. Multiply the standard deviation by 1.96\n","  interval = 1.96 * std # https://en.wikipedia.org/wiki/1.96 \n","\n","  # 4. Get the prediction interval upper and lower bounds\n","  preds_mean = tf.reduce_mean(preds, axis=0)\n","  lower, upper = preds_mean - interval, preds_mean + interval\n","  return lower, upper\n","\n","# Get the upper and lower bounds of the 95% \n","lower, upper = get_upper_lower(preds=ensemble_preds)"]},{"cell_type":"markdown","metadata":{"id":"ryFFOOo1vd-W"},"source":["Wonderful, now we've got the upper and lower bounds for the the 95% prediction interval, let's plot them against our ensemble model's predictions.\n","\n","To do so, we can use our plotting function as well as the [`matplotlib.pyplot.fill_between()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.fill_between.html) method to shade in the space between the upper and lower bounds."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3jU4DBpPvhIB"},"outputs":[],"source":["# Get the median values of our ensemble preds\n","ensemble_median = np.median(ensemble_preds, axis=0)\n","\n","# Plot the median of our ensemble preds along with the prediction intervals (where the predictions fall between)\n","offset=500\n","plt.figure(figsize=(10, 7))\n","plt.plot(X_test.index[offset:], y_test[offset:], \"g\", label=\"Test Data\")\n","plt.plot(X_test.index[offset:], ensemble_median[offset:], \"k-\", label=\"Ensemble Median\")\n","plt.xlabel(\"Date\")\n","plt.ylabel(\"BTC Price\")\n","plt.fill_between(X_test.index[offset:], \n","                 (lower)[offset:], \n","                 (upper)[offset:], label=\"Prediction Intervals\")\n","plt.legend(loc=\"upper left\", fontsize=14);"]},{"cell_type":"markdown","metadata":{"id":"yRTygGOevlF0"},"source":["We've just plotted:\n","* The test data (the ground truth Bitcoin prices)\n","* The median of the ensemble predictions \n","* The 95% prediction intervals (assuming the data is Gaussian/normal, the model is saying that 95% of the time, predicted value should fall between this range)\n","\n","What can you tell about the ensemble model from the plot above?\n","\n","It looks like the ensemble predictions are lagging slightly behind the actual data.\n","\n","And the prediction intervals are fairly low throughout.\n","\n","The combination of lagging predictions as well as low prediction intervals indicates that our ensemble model may be **overfitting** the data, meaning it's basically replicating what a na√Øve model would do and just predicting the previous timestep value for the next value.\n","\n","This would explain why previous attempts to beat the na√Øve forecast have been futile.\n","\n","We can test this hypothesis of overfitting by creating a model to make predictions into the future and seeing what they look like.\n","\n","\u003e üîë **Note:** Our prediction intervals assume that the data we're using come from a Gaussian/normal distribution (also called a bell curve), however, open systems rarely follow the Gaussian. We'll see this later on with the turkey problem ü¶É. For further reading on this topic, I'd recommend reading [*The Black Swan* by Nassim Nicholas Taleb](https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable), especially Part 2 and Chapter 15."]},{"cell_type":"markdown","metadata":{"id":"dm2UxSw9vrxV"},"source":["## Aside: two types of uncertainty (coconut and subway)\n","\n","Inheritly, you know you cannot predict the future.\n","\n","That doesn't mean trying to isn't valuable.\n","\n","For many things, future predictions are helpful. Such as knowing the bus you're trying to catch to the library leaves at 10:08am. The time 10:08am is a **point prediction**, if the bus left at a random time every day, how helpful would it be?\n","\n","Just like saying the price of Bitcoin tomorrow will be 50,000USD is a point prediction.\n","\n","However, as we've discussed knowing a **prediction interval** or **uncertainty estimate** can be as helpful or even more helpful than a point prediction itself.\n","\n","Uncertainty estimates seek out to qualitatively and quantitatively answer the questions:\n","* What can my model know? (with perfect data, what's possible to learn?)\n","* What doesn't my model know? (what can a model never predict?)\n","\n","There are two types of uncertainty in machine learning you should be aware of:\n","\n","* **Aleatoric uncertainty** - this type of uncertainty cannot be reduced, it is also referred to as \"data\" or \"subway\" uncertainty.\n","  * Let's say your train is scheduled to arrive at 10:08am but very rarely does it arrive at *exactly* 10:08am. You know it's usually a minute or two either side and perhaps up to 10-minutes late if traffic is bad. Even with all the data you could imagine, this level of uncertainty is still going to be present (much of it being noise).\n","  * When we measured prediction intervals, we were measuring a form of subway uncertainty for Bitcoin price predictions (a little either side of the point prediction).\n","\n","* **Epistemic uncertainty** - this type of uncertainty can be reduced, it is also referred to as \"model\" or \"coconut\" uncertainty, it is very hard to calculate.\n","  * The analogy for coconut uncertainty involves whether or not you'd get hit on the head by a coconut when going to a beach. \n","    * If you were at a beach with coconuts trees, as you could imagine, this would be very hard to calculate. How often does a coconut fall of a tree? Where are you standing? \n","    * But you could reduce this uncertainty to zero by going to a beach without coconuts (collect more data about your situation).\n","  * Model uncertainty can be reduced by collecting more data samples/building a model to capture different parameters about the data you're modelling.\n","\n","The lines between these are blurred (one type of uncertainty can change forms into the other) and they can be confusing at first but are important to keep in mind for any kind of time series prediction.\n","\n","If you ignore the uncertanties, are you really going to get a reliable prediction?\n","\n","Perhaps another example might help.\n","\n","### Uncertainty in dating\n","\n","Let's say you're going on a First Date Feedback Radio Show to help improve your dating skills.\n","\n","Where you go on a blind first date with a girl (feel free to replace girl with your own preference) and the radio hosts record the date and then playback snippets of where you could've improved.\n","\n","And now let's add a twist. \n","\n","Last week your friend went on the same show. They told you about the girl they met and how the conversation went.\n","\n","Because you're now a machine learning engineer, you decide to build a machine learning model to help you with first date conversations.\n","\n","What levels of uncertainty do we have here? \n","\n","From an **aleatory uncertainty** (data) point of view, no matter how many conversations of first dates you collect, the conversation you end up having will likely be different to the rest (the best conversations have no subject and appear random).\n","\n","From an **epistemic uncertainty** (model) point of view, if the date is truly blind and both parties don't know who they're seeing until they meet in person, the epistemic uncertainty would be high. Because now you have no idea who the person you're going to meet is nor what you might talk about.\n","\n","However, the level of epistemic uncertainty would be reduced if your friend told about the girl they went on a date with last week on the show and it turns out you're going on a date with the same girl.\n","\n","But even though you know a little bit about the girl, your **aleatory uncertainty** (or subway uncertainty) is still high because you're not sure where the conversation will go.\n","\n","If you're wondering where above scenario came from, it happened to me this morning. Good timing right?\n","\n","### Learning more on uncertainty\n","\n","The field of quantifying uncertainty estimation in machine learning is a growing area of research.\n","\n","If you'd like to learn more I'd recommend the following.\n","\n","\u003e üìñ **Resources:** Places to learn more about uncertainty in machine learning/forecasting:\n","* üé• [MIT 6.S191: Evidential Deep Learning and Uncertainty](https://youtu.be/toTcf7tZK8c) \n","* [Uncertainty quantification on Wikipedia](https://en.wikipedia.org/wiki/Uncertainty_quantification#Aleatoric_and_epistemic_uncertainty)\n","* [*Why you should care about the Nate Silver vs. Nassim Taleb Twitter war*](https://towardsdatascience.com/why-you-should-care-about-the-nate-silver-vs-nassim-taleb-twitter-war-a581dce1f5fc) by Isaac Faber - a great insight into the role of uncertainty in the example of election prediction. \n","* [*3 facts about time series forecasting that surprise experienced machine learning practitioners*](https://towardsdatascience.com/3-facts-about-time-series-forecasting-that-surprise-experienced-machine-learning-practitioners-69c18ee89387) by Skander Hannachi - fantastic outline of some of the main mistakes people make when building forecasting models, especially forgetting about uncertainty estimates.\n","* [*Engineering Uncertainty Estimation in Neural Networks for Time Series Prediction at Uber*](https://eng.uber.com/neural-networks-uncertainty-estimation/) - a discussion on techniques Uber used to engineer uncertainty estimates into their time sereis neural networks.\n"]},{"cell_type":"markdown","metadata":{"id":"-w5JYxInvxJc"},"source":["## Model 9: Train a model on the full historical data to make predictions into future\n","\n","What would a forecasting model be worth if we didn't use it to predict into the future?\n","\n","It's time we created a model which is able to make future predictions on the price of Bitcoin.\n","\n","To make predictions into the future, we'll train a model on the full dataset and then get to make predictions to some future horizon.\n","\n","Why use the full dataset?\n","\n","Previously, we split our data into training and test sets to evaluate how our model did on pseudo-future data (the test set).\n","\n","But since the goal of a forecasting model is to predict values into the actual-future, we won't be using a test set.\n","\n","\u003e üîë **Note:** Forecasting models need to be retrained every time a forecast is made. Why? Because if Bitcoin prices are updated daily and you predict the price for tomorrow. Your model is only really valid for one day. When a new price comes out (e.g. the next day), you'll have to retrain your model to incorporate that new price to predict the next forecast.\n","\n","Let's get some data ready."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wkI_v-wuvz_4"},"outputs":[],"source":["bitcoin_prices_windowed.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pUB7bAlQv098"},"outputs":[],"source":["# Train model on entire data to make prediction for the next day \n","X_all = bitcoin_prices_windowed.drop([\"Price\", \"block_reward\"], axis=1).dropna().to_numpy() # only want prices, our future model can be a univariate model\n","y_all = bitcoin_prices_windowed.dropna()[\"Price\"].to_numpy()"]},{"cell_type":"markdown","metadata":{"id":"YPnsMtMKv19Z"},"source":["Windows and labels ready! Let's turn them into performance optimized TensorFlow Datasets by:\n","1. Turning `X_all` and `y_all` into tensor Datasets using [`tf.data.Dataset.from_tensor_slices()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#from_tensor_slices)\n","2. Combining the features and labels into a Dataset tuple using [`tf.data.Dataset.zip()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#zip)\n","3. Batch and prefetch the data using [`tf.data.Dataset.batch()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#batch) and [`tf.data.Dataset.prefetch()`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset#prefetch) respectively"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yAxX6N5Qv4FF"},"outputs":[],"source":["# 1. Turn X and y into tensor Datasets\n","features_dataset_all = tf.data.Dataset.from_tensor_slices(X_all)\n","labels_dataset_all = tf.data.Dataset.from_tensor_slices(y_all)\n","\n","# 2. Combine features \u0026 labels\n","dataset_all = tf.data.Dataset.zip((features_dataset_all, labels_dataset_all))\n","\n","# 3. Batch and prefetch for optimal performance\n","BATCH_SIZE = 1024 # taken from Appendix D in N-BEATS paper\n","dataset_all = dataset_all.batch(BATCH_SIZE).prefetch(tf.data.AUTOTUNE)\n","\n","dataset_all"]},{"cell_type":"markdown","metadata":{"id":"vKPZaU7Wv6O-"},"source":["And now let's create a model similar to `model_1` except with an extra layer, we'll also fit it to the entire dataset for 100 epochs (feel free to play around with the number of epochs or callbacks here, you've got the skills to now)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IHpdXDypv9W9"},"outputs":[],"source":["tf.random.set_seed(42)\n","\n","# Create model (nice and simple, just to test)\n","model_9 = tf.keras.Sequential([\n","  layers.Dense(128, activation=\"relu\"),\n","  layers.Dense(128, activation=\"relu\"),\n","  layers.Dense(HORIZON)\n","])\n","\n","# Compile\n","model_9.compile(loss=tf.keras.losses.mae,\n","                optimizer=tf.keras.optimizers.Adam())\n","\n","# Fit model on all of the data to make future forecasts\n","model_9.fit(dataset_all,\n","            epochs=100,\n","            verbose=0) # don't print out anything, we've seen this all before"]},{"cell_type":"markdown","metadata":{"id":"vcL1W3k8v9s6"},"source":["### Make predictions on the future\n","\n","Let's predict the future and get rich!\n","\n","Well... maybe not.\n","\n","As you've seen so far, our machine learning models have performed quite poorly at predicting the price of Bitcoin (time series forecasting in open systems is typically a game of luck), often worse than the naive forecast.\n","\n","That doesn't mean we can't use our models to *try* and predict into the future right?\n","\n","To do so, let's start by defining a variable `INTO_FUTURE` which decides how many timesteps we'd like to predict into the future."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F7o8yHj-wA3x"},"outputs":[],"source":["# How many timesteps to predict into the future?\n","INTO_FUTURE = 14 # since our Bitcoin data is daily, this is for 14 days"]},{"cell_type":"markdown","metadata":{"id":"1Flv6zFSwDOQ"},"source":["![flowchart representation prediction loop to make forecasts and then append forecasts to data and make more forecasts continuously until forecast horizon is exhausted](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-prediction-loop-for-forecasts.png)\n","*Example flow chart representing the loop we're about to create for making forecasts. Not pictured: retraining a forecasting model every time a forecast is made \u0026 new data is acquired. For example, if you're predicting the price of Bitcoin daily, you'd want to retrain your model every day, since each day you're going to have a new data point to work with.*\n","\n","Alright, let's create a function which returns `INTO_FUTURE` forecasted values using a trained model.\n","\n","To do so, we'll build the following steps:\n","1. Function which takes as input: \n","  * a list of values (the Bitcoin historical data)\n","  * a trained model (such as `model_9`)\n","  * a window into the future to predict (our `INTO_FUTURE` variable)\n","  * the window size a model was trained on (`WINDOW_SIZE`) - the model can only predict on the same kind of data it was trained on\n","2. Creates an empty list for future forecasts (this will be returned at the end of the function) and extracts the last `WINDOW_SIZE` values from the input values (predictions will start from the last `WINDOW_SIZE` values of the training data)\n","3. Loop `INTO_FUTURE` times making a prediction on `WINDOW_SIZE` datasets which update to remove the first the value and append the latest prediction \n","  * Eventually future predictions will be made using the model's own previous predictions as input"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ema6D_4wNK7"},"outputs":[],"source":["# 1. Create function to make predictions into the future\n","def make_future_forecast(values, model, into_future, window_size=WINDOW_SIZE) -\u003e list:\n","  \"\"\"\n","  Makes future forecasts into_future steps after values ends.\n","\n","  Returns future forecasts as list of floats.\n","  \"\"\"\n","  # 2. Make an empty list for future forecasts/prepare data to forecast on\n","  future_forecast = []\n","  last_window = values[-WINDOW_SIZE:] # only want preds from the last window (this will get updated)\n","\n","  # 3. Make INTO_FUTURE number of predictions, altering the data which gets predicted on each time \n","  for _ in range(into_future):\n","    \n","    # Predict on last window then append it again, again, again (model starts to make forecasts on its own forecasts)\n","    future_pred = model.predict(tf.expand_dims(last_window, axis=0))\n","    print(f\"Predicting on: \\n {last_window} -\u003e Prediction: {tf.squeeze(future_pred).numpy()}\\n\")\n","    \n","    # Append predictions to future_forecast\n","    future_forecast.append(tf.squeeze(future_pred).numpy())\n","    # print(future_forecast)\n","\n","    # Update last window with new pred and get WINDOW_SIZE most recent preds (model was trained on WINDOW_SIZE windows)\n","    last_window = np.append(last_window, future_pred)[-WINDOW_SIZE:]\n","  \n","  return future_forecast"]},{"cell_type":"markdown","metadata":{"id":"gXUGMsgCwNmm"},"source":["Nice! Time to bring BitPredict üí∞üìà to life and make future forecasts of the price of Bitcoin.\n","\n","\u003e üõ† **Exercise:** In terms of a forecasting model, what might another approach to our `make_future_forecasts()` function? Recall, that for making forecasts, you need to retrain a model each time you want to generate a new prediction. \n","\u003e\n","\u003e So perhaps you could try to: make a prediction (one timestep into the future), retrain a model with this new prediction appended to the data, make a prediction, append the prediction, retrain a model... etc. \n","\u003e\n","\u003e As it is, the `make_future_forecasts()` function skips the retraining of a model part."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SR186wE-wTKG"},"outputs":[],"source":["# Make forecasts into future of the price of Bitcoin\n","# Note: if you're reading this at a later date, you may already be in the future, so the forecasts \n","# we're making may not actually be forecasts, if that's the case, readjust the training data.\n","future_forecast = make_future_forecast(values=y_all,\n","                                       model=model_9,\n","                                       into_future=INTO_FUTURE,\n","                                       window_size=WINDOW_SIZE)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kctcoeW-wT6t"},"outputs":[],"source":["future_forecast[:10]"]},{"cell_type":"markdown","metadata":{"id":"eAQyRW1PwVoz"},"source":["### Plot future forecasts\n","\n","This is so exciting! Forecasts made! \n","\n","But right now, they're just numbers on a page.\n","\n","Let's bring them to life by adhering to the data explorer's motto: visualize, visualize, visualize!\n","\n","To plot our model's future forecasts against the historical data of Bitcoin, we're going to need a series of future dates (future dates from the final date of where our dataset ends).\n","\n","How about we create a function to return a date range from some specified start date to a specified number of days into the future (`INTO_FUTURE`).\n","\n","To do so, we'll use a combination of NumPy's [`datetime64` datatype](https://numpy.org/doc/stable/reference/arrays.datetime.html) (our Bitcoin dates are already in this datatype) as well as NumPy's `timedelta64` method which helps to create date ranges."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Tq27KyS5wYRG"},"outputs":[],"source":["def get_future_dates(start_date, into_future, offset=1):\n","  \"\"\"\n","  Returns array of datetime values from ranging from start_date to start_date+horizon.\n","\n","  start_date: date to start range (np.datetime64)\n","  into_future: number of days to add onto start date for range (int)\n","  offset: number of days to offset start_date by (default 1)\n","  \"\"\"\n","  start_date = start_date + np.timedelta64(offset, \"D\") # specify start date, \"D\" stands for day\n","  end_date = start_date + np.timedelta64(into_future, \"D\") # specify end date\n","  return np.arange(start_date, end_date, dtype=\"datetime64[D]\") # return a date range between start date and end date"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4r0pPy_TwY1z"},"outputs":[],"source":["# Last timestep of timesteps (currently in np.datetime64 format)\n","last_timestep = bitcoin_prices.index[-1]\n","last_timestep"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sFgj19rBwiHE"},"outputs":[],"source":["# Get next two weeks of timesteps\n","next_time_steps = get_future_dates(start_date=last_timestep, \n","                                   into_future=INTO_FUTURE)\n","next_time_steps"]},{"cell_type":"markdown","metadata":{"id":"HdtMUgoywjgb"},"source":["Look at that! We've now got a list of dates we can use to visualize our future Bitcoin predictions.\n","\n","But to make sure the lines of the plot connect (try not running the cell below and then plotting the data to see what I mean), let's insert the last timestep and Bitcoin price of our training data to the `next_time_steps` and `future_forecast` arrays."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82cVbD8xwmRv"},"outputs":[],"source":["# Insert last timestep/final price so the graph doesn't look messed\n","next_time_steps = np.insert(next_time_steps, 0, last_timestep)\n","future_forecast = np.insert(future_forecast, 0, btc_price[-1])\n","next_time_steps, future_forecast"]},{"cell_type":"markdown","metadata":{"id":"GNv6g5f3wmf0"},"source":["Time to plot!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"suz6mIvgwsxa"},"outputs":[],"source":["# Plot future price predictions of Bitcoin\n","plt.figure(figsize=(10, 7))\n","plot_time_series(bitcoin_prices.index, btc_price, start=2500, format=\"-\", label=\"Actual BTC Price\")\n","plot_time_series(next_time_steps, future_forecast, format=\"-\", label=\"Predicted BTC Price\")"]},{"cell_type":"markdown","metadata":{"id":"a7ML2m3hwtG1"},"source":["Hmmm... how did our model go? \n","\n","It looks like our predictions are starting to form a bit of a cyclic pattern (up and down in the same way).\n","\n","Perhaps that's due to our model overfitting the training data and not generalizing well for future data. Also, as you could imagine, the further you predict into the future, the higher your chance for error (try seeing what happens when you predict 100 days into the future).\n","\n","But of course, we can't measure these predictions as they are because after all, they're predictions into the actual-future (by the time you read this, the future might have already happened, if so, how did the model go?).\n","\n","\u003e üîë **Note:** A reminder, the predictions we've made here are not financial advice. And by now, you should be well aware of just how poor machine learning models can be at forecasting values in an open system - anyone promising you a model which can \"beat the market\" is likely trying to scam you, oblivious to their errors or very lucky.\n"]},{"cell_type":"markdown","metadata":{"id":"JGhk5Kqdwu6q"},"source":["## Model 10: Why forecasting is BS (the turkey problem ü¶É)\n","\n","When creating any kind of forecast, you must keep the **turkey problem** in mind.\n","\n","The **turkey problem** is an analogy for when your observational data (your historical data) fails to capture a future event which is catostrophic and could lead you to ruin.\n","\n","The story goes, a turkey lives a good life for 1000 days, being fed every day and taken care of by its owners until the evening before Thanksgiving.\n","\n","Based on the turkey's observational data, it has no reason to believe things shouldn't keep going the way they are.\n","\n","In other words, how could a turkey possibly predict that on day 1001, after 1000 consectutive good days, it was about to have a far from ideal day.\n","\n","![the turkey problem illustrated, a turkey lives 1000 good days until the eve of thanksgiving](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-the-turkey-problem.png)\n","*Example of the turkey problem. A turkey might live 1000 good days and none of them would be a sign of what's to happen on day 1001. Similar with forecasting, your historical data may not have any indication of a change which is about to come. The graph image is from page 41 of [The Black Swan](https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable) by Nassim Taleb (I added in the turkey graphics).*\n","\n","How does this relate to predicting the price of Bitcoin (or the price of any stock or figure in an open market)?\n","\n","You could have the historical data of Bitcoin for its entire existence and build a model which predicts it perfectly.\n","\n","But then one day for some unknown and unpredictable reason, the price of Bitcoin plummets 100x in a single day.\n","\n","Of course, this kind of scenario is unlikely.\n","\n","But that doesn't take away from its significance.\n","\n","Think about it in your own life, how many times have the most significant events happened seemingly out of the blue?\n","\n","As in, you could go to a cafe and run into the love of your life, despite visiting the same cafe for 10-years straight and never running into this person before. \n","\n","The same thing goes for predicting the price of Bitcoin, you could make money for 10-years straight and then lose it all in a single day.\n","\n","It doesn't matter how many times you get paid, it matters the amount you get paid.\n","\n","\u003e üìñ **Resource:** If you'd like to learn more about the turkey problem, I'd recommend the following:\n","* [Explaining both the XIV trade and why forecasting is BS](https://youtu.be/hRwimmE2wEk) by Nassim Taleb\n","* [*The Black Swan*](https://en.wikipedia.org/wiki/The_Black_Swan:_The_Impact_of_the_Highly_Improbable) by Nassim Taleb (epsecially Chapter 4 which outlines and discusses the turkey problem)\n","\n","Let's get specific and see how the turkey problem effects us modelling the historical and future price of Bitcoin.\n","\n","To do so, we're going to manufacture a highly unlikely data point into the historical price of Bitcoin, the price falling 100x in one day.\n","\n","\u003e üîë **Note:** A very unlikely and unpredictable event such as the price of Bitcoin falling 100x in a single day (note: the adjective \"unlikely\" is based on the historical price changes of Bitcoin) is also referred to a [**Black Swan** event](https://en.wikipedia.org/wiki/Black_swan_theory). A Black Swan event is an unknown unknown, you have no way of predicting whether or not it will happen but these kind of events often have a large impact. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D8jnEjVTxF83"},"outputs":[],"source":["# Let's introduce a Turkey problem to our BTC data (price BTC falls 100x in one day)\n","btc_price_turkey = btc_price.copy()\n","btc_price_turkey[-1] = btc_price_turkey[-1] / 100"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3Hk_oP5jxG8m"},"outputs":[],"source":["# Manufacture an extra price on the end (to showcase the Turkey problem)\n","btc_price_turkey[-10:]"]},{"cell_type":"markdown","metadata":{"id":"H_zrLMVhxIxy"},"source":["Notice the last value is 100x lower than what it actually was (remember, this is not a real data point, its only to illustrate the effects of the turkey problem).\n","\n","Now we've got Bitcoin prices including a turkey problem data point, let's get the timesteps. "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ez8cdTF1xQIO"},"outputs":[],"source":["# Get the timesteps for the turkey problem \n","btc_timesteps_turkey = np.array(bitcoin_prices.index)\n","btc_timesteps_turkey[-10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4YtD0hxgxQac"},"outputs":[],"source":["plt.figure(figsize=(10, 7))\n","plot_time_series(timesteps=btc_timesteps_turkey, \n","                 values=btc_price_turkey, \n","                 format=\"-\", \n","                 label=\"BTC Price + Turkey Problem\", \n","                 start=2500)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sNXXcHU4xRzM"},"outputs":[],"source":["# Create train and test sets for turkey problem data\n","full_windows, full_labels = make_windows(np.array(btc_price_turkey), window_size=WINDOW_SIZE, horizon=HORIZON)\n","len(full_windows), len(full_labels)\n","\n","X_train, X_test, y_train, y_test = make_train_test_splits(full_windows, full_labels)\n","len(X_train), len(X_test), len(y_train), len(y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VraRCD-dxUzC"},"outputs":[],"source":["### Building a turkey model (model to predict on turkey data)\n","\n","With our updated data, we only changed 1 value.\n","\n","Let's see how it effects a model.\n","\n","To keep things comparable to previous models, we'll create a `turkey_model` which is a clone of `model_1` (same architecture, but different data).\n","\n","That way, when we evaluate the `turkey_model` we can compare its results to `model_1_results` and see how much a single data point can influence a model's performance.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YEjO20SBxV6y"},"outputs":[],"source":["# Clone model 1 architecture for turkey model and fit the turkey model on the turkey data\n","turkey_model = tf.keras.models.clone_model(model_1)\n","turkey_model._name = \"Turkey_Model\"\n","turkey_model.compile(loss=\"mae\",\n","                     optimizer=tf.keras.optimizers.Adam())\n","turkey_model.fit(X_train, y_train,\n","                 epochs=100,\n","                 verbose=0,\n","                 validation_data=(X_test, y_test),\n","                 callbacks=[create_model_checkpoint(turkey_model.name)])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_tMPWQp1xXB_"},"outputs":[],"source":["# Evaluate turkey model on test data\n","turkey_model.evaluate(X_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8cx63c5mxYpV"},"outputs":[],"source":["# Load best model and evaluate on test data\n","turkey_model = tf.keras.models.load_model(\"model_experiments/Turkey_Model/\")\n","turkey_model.evaluate(X_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_fg9DSL9xaSo"},"outputs":[],"source":["# Make predictions with Turkey model\n","turkey_preds = make_preds(turkey_model, X_test)\n","turkey_preds[:10]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vBan0_cbxcks"},"outputs":[],"source":["# Evaluate turkey preds\n","turkey_results = evaluate_preds(y_true=y_test,\n","                                y_pred=turkey_preds)\n","turkey_results"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8oyXsglaxdmc"},"outputs":[],"source":["model_1_results"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SkZwwMuOxfJw"},"outputs":[],"source":["plt.figure(figsize=(10, 7))\n","# plot_time_series(timesteps=btc_timesteps_turkey[:split_size], values=btc_price_turkey[:split_size], label=\"Train Data\")\n","offset=300\n","plot_time_series(timesteps=btc_timesteps_turkey[-len(X_test):], \n","                 values=btc_price_turkey[-len(y_test):], \n","                 format=\"-\", \n","                 label=\"Turkey Test Data\", start=offset)\n","plot_time_series(timesteps=btc_timesteps_turkey[-len(X_test):],\n","                 values=turkey_preds, \n","                 label=\"Turkey Preds\", \n","                 start=offset);"]},{"cell_type":"markdown","metadata":{"id":"Zu9Ky-fExgpg"},"source":["Why does this happen?\n","\n","Why does our model fail to capture the turkey problem data point?\n","\n","Think about it like this, just like a turkey who lives 1000 joyful days, based on observation alone has no reason to believe day 1001 won't be as joyful as the last, a model which has been trained on historical data of Bitcoin which has no single event where the price decreased by 100x in a day, has no reason to predict it will in the future.\n","\n","A model cannot predict anything in the future outside of the distribution it was trained on.\n","\n","In turn, highly unlikely price movements (based on historical movements), upward or downward will likely never be part of a forecast.\n","\n","However, as we've seen, despite their unlikeliness, these events can have huuuuuuuuge impacts to the performance of our models.\n","\n","\u003e üìñ **Resource:** For a great article which discusses Black Swan events and how they often get ignored due to the assumption that historical events come from a certain distribution and that future events will come from the same distribution see [*Black Swans, Normal Distributions and Supply Chain Risk*](https://spendmatters.com/uk/black-swans-normal-distributions-supply-chain-risk/) by Spend Matters. \n"]},{"cell_type":"markdown","metadata":{"id":"IXV_BIw8xkZe"},"source":["## Compare Models\n","\n","We've trained a bunch of models.\n","\n","And if anything, we've seen just how poorly machine learning and deep learning models are at forecasting the price of Bitcoin (or any kind of open market value).\n","\n","To highlight this, let's compare the results of all of the modelling experiments we've performed so far."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UnAlJJE8xmmA"},"outputs":[],"source":["# Compare different model results (w = window, h = horizon, e.g. w=7 means a window size of 7)\n","model_results = pd.DataFrame({\"naive_model\": naive_results,\n","                              \"model_1_dense_w7_h1\": model_1_results,\n","                              \"model_2_dense_w30_h1\": model_2_results,\n","                              \"model_3_dense_w30_h7\": model_3_results,\n","                              \"model_4_CONV1D\": model_4_results,\n","                              \"model_5_LSTM\": model_5_results,\n","                              \"model_6_multivariate\": model_6_results,\n","                              \"model_8_NBEATs\": model_7_results,\n","                              \"model_9_ensemble\": ensemble_results,\n","                              \"model_10_turkey\": turkey_results}).T\n","model_results.head(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GxEjKR5Mxn-z"},"outputs":[],"source":["# Sort model results by MAE and plot them\n","model_results[[\"mae\"]].sort_values(by=\"mae\").plot(figsize=(10, 7), kind=\"bar\");"]},{"cell_type":"markdown","metadata":{"id":"nc2_M4V1xpHR"},"source":["The majority of our deep learning models perform on par or only slightly better than the naive model. And for the turkey model, changing a single data point destroys its performance.\n","\n","\u003e üîë **Note:** Just because one type of model performs better here doesn't mean it'll perform the best elsewhere (and vice versa, just because one model performs poorly here, doesn't mean it'll perform poorly elsewhere).\n","\n","As I said at the start, this is not financial advice.\n","\n","After what we've gone through, you'll now have some of the skills required to callout BS for any future tutorial or blog post or investment sales guide claiming to have model which is able to predict the futrue.\n","\n","[Mark Saroufim's Tweet](https://twitter.com/marksaroufim/status/1366871736604532739?s=20) sums this up nicely (stock market forecasting with a machine learning model is just as reliable as palm reading).\n","\n","![Mark Saroufim tweet on what forecasting with a machine learning model reminds him of: palm reading, basic heuristics, comparing calculations in the brain of different organisms](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/10-mark-saroufim-tweet-forecasting-bs.png)\n","*Beware the tutorials or trading courses which claim to use some kind of algorithm to beat the market (an open system), they're likely a scam or the creator is very lucky and hasn't yet come across a turkey problem.*\n","\n","Don't let these results get you down though, forecasting in a closed system (such as predicting the demand of electricity) often yields quite usable results.\n","\n","If anything, this module teaches anti-knowledge. Knowing that forecasting methods usually *don't* perform well in open systems.\n","\n","Plus, sometimes not knowing the future is a benefit. A known future is already the past.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"nuh8ke-Pxq-j"},"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyM/aGZKAA97JRioXuw5Honm","name":"10-Time forecasting","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}