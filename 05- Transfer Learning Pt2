{"cells":[{"cell_type":"markdown","metadata":{"id":"azq4y_w_p_az"},"source":["# 05. Transfer Learning with TensorFlow Part 2: Fine-tuning\n","\n","In the previous section, we saw how we could leverage feature extraction transfer learning to get far better results on our Food Vision project than building our own models (even with less data).\n","\n","Now we're going to cover another type of transfer learning: fine-tuning.\n","\n","In **fine-tuning transfer learning** the pre-trained model weights from another model are unfrozen and tweaked during to better suit your own data.\n","\n","For feature extraction transfer learning, you may only train the top 1-3 layers of a pre-trained model with your own data, in fine-tuning transfer learning, you might train 1-3+ layers of a pre-trained model (where the '+' indicates that many or all of the layers could be trained).\n","\n","![](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/05-transfer-learning-feature-extraction-vs-fine-tuning.png)\n","*Feature extraction transfer learning vs. fine-tuning transfer learning. The main difference between the two is that in fine-tuning, more layers of the pre-trained model get unfrozen and tuned on custom data. This fine-tuning usually takes more data than feature extraction to be effective.*\n","\n","## What we're going to cover\n","\n","We're going to go through the follow with TensorFlow:\n","\n","- Introduce fine-tuning, a type of transfer learning to modify a pre-trained model to be more suited to your data\n","- Using the Keras Functional API (a differnt way to build models in Keras)\n","- Using a smaller dataset to experiment faster (e.g. 1-10% of training samples of 10 classes of food)\n","- Data augmentation (how to make your training dataset more diverse without adding more data)\n","- Running a series of modelling experiments on our Food Vision data\n","  - Model 0: a transfer learning model using the Keras Functional API\n","  - Model 1: a feature extraction transfer learning model on 1% of the data with data augmentation\n","  - Model 2: a feature extraction transfer learning model on 10% of the data with data augmentation\n","  - Model 3: a fine-tuned transfer learning model on 10% of the data\n","  - Model 4: a fine-tuned transfer learning model on 100% of the data\n","- Introduce the ModelCheckpoint callback to save intermediate training results\n","- Compare model experiments results using TensorBoard"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":465,"status":"ok","timestamp":1641928926526,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"FREPH8b2qkz1","outputId":"7fc6ad75-f211-4f95-cef0-9054f095200b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Jan 11 19:22:06 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 495.46       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P0    55W / 149W |   4372MiB / 11441MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"]},{"cell_type":"markdown","metadata":{"id":"RCtZYliBq2jJ"},"source":["## Creating helper functions\n","\n","Throughout your machine learning experiments, you'll likely come across snippets of code you want to use over and over again.\n","\n","For example, a plotting function which plots a model's `history` object (see `plot_loss_curves()` below).\n","\n","You could recreate these functions over and over again.\n","\n","But as you might've guessed, rewritting the same functions becomes tedious.\n","\n","One of the solutions is to store them in a helper script such as [`helper_functions.py`](https://github.com/mrdbourke/tensorflow-deep-learning/blob/main/extras/helper_functions.py). And then import the necesary functionality when you need it.\n","\n","For example, you might write:\n","\n","```\n","from helper_functions import plot_loss_curves\n","\n","...\n","\n","plot_loss_curves(history)\n","```\n","\n","Let's see what this looks like."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":593,"status":"ok","timestamp":1641928927345,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"6I2H0W6UqmKM","outputId":"940c3086-e9fe-4e78-f551-76c0f321128f"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-01-11 19:22:06--  https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 10246 (10K) [text/plain]\n","Saving to: ‘helper_functions.py.1’\n","\n","\rhelper_functions.py   0%[                    ]       0  --.-KB/s               \rhelper_functions.py 100%[===================>]  10.01K  --.-KB/s    in 0s      \n","\n","2022-01-11 19:22:06 (66.6 MB/s) - ‘helper_functions.py.1’ saved [10246/10246]\n","\n"]}],"source":["# Get helper_functions.py script from course GitHub\n","!wget https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/extras/helper_functions.py \n","\n","# Import helper functions we're going to use\n","from helper_functions import create_tensorboard_callback, plot_loss_curves, unzip_data, walk_through_dir"]},{"cell_type":"markdown","metadata":{"id":"VAqSypTnq9vG"},"source":["###10 Food Classes: Working with less data\n","In this notebook, we're going to continue to work with smaller subsets of the data, except this time we'll have a look at how we can use the in-built pretrained models within the `tf.keras.applications` module as well as how to fine-tune them to our own custom dataset.\n","\n","We'll also practice using a new but similar dataloader function to what we've used before, [`image_dataset_from_directory()`](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image_dataset_from_directory) which is part of the [`tf.keras.preprocessing`](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing) module.\n","\n","Finally, we'll also be practicing using the [Keras Functional API](https://keras.io/guides/functional_api/) for building deep learning models. The Functional API is a more flexible way to create models than the tf.keras.Sequential API."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2993,"status":"ok","timestamp":1641928930336,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"KJpjbP5Ssv_J","outputId":"f3240390-8534-47f9-e6af-b0004554fcd6"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-01-11 19:22:06--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 142.251.5.128, 74.125.133.128, 74.125.140.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|142.251.5.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 168546183 (161M) [application/zip]\n","Saving to: ‘10_food_classes_10_percent.zip.5’\n","\n","10_food_classes_10_ 100%[===================>] 160.74M   218MB/s    in 0.7s    \n","\n","2022-01-11 19:22:07 (218 MB/s) - ‘10_food_classes_10_percent.zip.5’ saved [168546183/168546183]\n","\n"]}],"source":["#Get 10% of the data of the 10 classes\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","\n","unzip_data(\"10_food_classes_10_percent.zip\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1641928930337,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"ZRAy2XNds4m5","outputId":"ce69199c-3a32-4945-a69d-19cf5a333bee"},"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in '10_food_classes_10_percent'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/test'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ramen'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/grilled_salmon'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/steak'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/ice_cream'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/fried_rice'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/sushi'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/hamburger'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_wings'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/chicken_curry'.\n","There are 0 directories and 250 images in '10_food_classes_10_percent/test/pizza'.\n","There are 10 directories and 0 images in '10_food_classes_10_percent/train'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ramen'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/grilled_salmon'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/steak'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/ice_cream'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/fried_rice'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/sushi'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/hamburger'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_wings'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/chicken_curry'.\n","There are 0 directories and 75 images in '10_food_classes_10_percent/train/pizza'.\n"]}],"source":["#Walk through 10 percent data directory and list number of files\n","walk_through_dir(\"10_food_classes_10_percent\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ePD88HPctBke"},"outputs":[],"source":["#Define filepaths\n","train_dir = \"10_food_classes_10_percent/train/\"\n","test_dir = \"10_food_classes_10_percent/test/\""]},{"cell_type":"markdown","metadata":{"id":"kG1xNkUAtLFO"},"source":["Now we've got some image data, we need a way of loading it into a TensorFlow compatible format.\n","\n","Previously, we've used the [`ImageDataGenerator`](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator) class. And while this works well and is still very commonly used, this time we're going to use the `image_data_from_directory` function.\n","\n","It works much the same way as `ImageDataGenerator`'s `flow_from_directory` method meaning your images need to be in the following file format:\n","\n","```\n","Example of file structure\n","\n","10_food_classes_10_percent <- top level folder\n","└───train <- training images\n","│   └───pizza\n","│   │   │   1008104.jpg\n","│   │   │   1638227.jpg\n","│   │   │   ...      \n","│   └───steak\n","│       │   1000205.jpg\n","│       │   1647351.jpg\n","│       │   ...\n","│   \n","└───test <- testing images\n","│   └───pizza\n","│   │   │   1001116.jpg\n","│   │   │   1507019.jpg\n","│   │   │   ...      \n","│   └───steak\n","│       │   100274.jpg\n","│       │   1653815.jpg\n","│       │   ...    \n","```\n","\n","One of the main benefits of using [`tf.keras.prepreprocessing.image_dataset_from_directory()`](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image_dataset_from_directory) rather than `ImageDataGenerator` is that it creates a [`tf.data.Dataset`](https://www.tensorflow.org/api_docs/python/tf/data/Dataset) object rather than a generator. The main advantage of this is the `tf.data.Dataset` API is much more efficient (faster) than the `ImageDataGenerator` API which is paramount for larger datasets.\n","\n","Let's see it in action."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":242,"status":"ok","timestamp":1641928930562,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"-l_rBJW4tVeh","outputId":"4bcf5c2d-5f1c-4019-89fd-2caf7ffff278"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 750 files belonging to 10 classes.\n","Found 2500 files belonging to 10 classes.\n"]}],"source":["#Create data inputs\n","import tensorflow as tf\n","IMG_SIZE = (224,224)\n","train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(directory = train_dir,\n","                                                                            image_size = IMG_SIZE,\n","                                                                            label_mode = \"categorical\",\n","                                                                            batch_size = 32)\n","\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(directory = test_dir,\n","                                                                   image_size = IMG_SIZE,\n","                                                                   label_mode = \"categorical\")"]},{"cell_type":"markdown","metadata":{"id":"qvs9V2ctt4j_"},"source":["Wonderful! Looks like our dataloaders have found the correct number of images for each dataset.\n","\n","For now, the main parameters we're concerned about in the `image_dataset_from_directory()` funtion are:\n","* `directory` - the filepath of the target directory we're loading images in from.\n","* `image_size` - the target size of the images we're going to load in (height, width).\n","* `batch_size` - the batch size of the images we're going to load in. For example if the `batch_size` is 32 (the default), batches of 32 images and labels at a time will be passed to the model. However, they do not get segmented like how `ImageDataGenerator` does.\n","\n","There are more we could play around with if we needed to [in the `tf.keras.preprocessing` documentation](https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image_dataset_from_directory).\n","\n","If we check the training data datatype we should see it as a `BatchDataset` with shapes relating to our data."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1641928930563,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"vz6MDJDxt_g5","outputId":"7f8e2c25-2e6f-4e36-ab9e-2b7bbd5260ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<BatchDataset shapes: ((None, 224, 224, 3), (None, 10)), types: (tf.float32, tf.float32)>"]},"metadata":{},"execution_count":113}],"source":["#Check the training data\n","train_data_10_percent"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1641928930563,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"lJRi8oFduUev","outputId":"748580f4-d63c-4918-90ee-78af9369939f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['chicken_curry',\n"," 'chicken_wings',\n"," 'fried_rice',\n"," 'grilled_salmon',\n"," 'hamburger',\n"," 'ice_cream',\n"," 'pizza',\n"," 'ramen',\n"," 'steak',\n"," 'sushi']"]},"metadata":{},"execution_count":114}],"source":["#Check out the class names of our dataset\n","train_data_10_percent.class_names"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2ZeUt2D_ueV2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641928931674,"user_tz":300,"elapsed":1113,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"8691bd24-f605-4731-8c0f-8585f8f62c4a"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[[[[  3.          5.          4.       ]\n","   [  1.9419641   3.9419641   2.9419641]\n","   [  1.          3.          2.       ]\n","   ...\n","   [195.67935   191.86145   203.13408  ]\n","   [204.76064   201.76064   212.76064  ]\n","   [210.00896   207.00896   218.00896  ]]\n","\n","  [[  3.          5.          4.       ]\n","   [  1.9419641   3.9419641   2.9419641]\n","   [  1.7633929   2.236607    2.       ]\n","   ...\n","   [222.26605   220.19463   231.19463  ]\n","   [228.25453   226.25038   237.25038  ]\n","   [231.19357   229.19357   240.19357  ]]\n","\n","  [[  3.2142859   4.785714    4.       ]\n","   [  2.9419641   2.9419641   2.9419641]\n","   [  2.          2.          2.       ]\n","   ...\n","   [237.47327   238.11612   245.90184  ]\n","   [239.94199   240.58484   248.37056  ]\n","   [238.35266   238.99551   246.78123  ]]\n","\n","  ...\n","\n","  [[208.22362   213.43788   215.79509  ]\n","   [204.16782   209.38208   211.73929  ]\n","   [203.80807   209.62216   210.1799   ]\n","   ...\n","   [228.47151   243.04298   236.04298  ]\n","   [228.12933   242.7008    235.7008   ]\n","   [225.99545   240.56693   233.56693  ]]\n","\n","  [[212.02972   217.02972   221.02972  ]\n","   [210.2909    215.2909    218.2909   ]\n","   [208.45093   214.21432   214.92415  ]\n","   ...\n","   [225.91165   242.91165   234.91165  ]\n","   [225.85712   242.85712   234.85712  ]\n","   [225.97481   242.97481   234.97481  ]]\n","\n","  [[212.85243   220.85243   223.85243  ]\n","   [213.68283   218.68283   221.68283  ]\n","   [210.91153   216.67493   217.38475  ]\n","   ...\n","   [223.67885   240.67885   232.67885  ]\n","   [222.97928   239.97928   231.97928  ]\n","   [224.        241.        233.       ]]]\n","\n","\n"," [[[207.66406   156.66406    77.66406  ]\n","   [206.85938   155.85938    74.859375 ]\n","   [208.85938   158.85938    73.859375 ]\n","   ...\n","   [197.2444    155.2444     97.24439  ]\n","   [200.        155.         98.       ]\n","   [200.64282   153.64282    97.64282  ]]\n","\n","  [[206.66406   155.66406    76.66406  ]\n","   [205.15625   154.15625    73.15625  ]\n","   [207.15625   157.15625    72.15625  ]\n","   ...\n","   [197.8504    155.8504     97.8504   ]\n","   [199.60826   154.60826    97.60826  ]\n","   [200.7935    153.7935     97.7935   ]]\n","\n","  [[204.76004   153.76004    74.76004  ]\n","   [203.29688   152.29688    71.296875 ]\n","   [204.59375   154.59375    69.29241  ]\n","   ...\n","   [199.2823    157.2823     99.28231  ]\n","   [199.02121   154.02121    97.02121  ]\n","   [200.74886   153.74886    97.748856 ]]\n","\n","  ...\n","\n","  [[207.84486   158.34264   100.35379  ]\n","   [204.7366    158.52232    98.61495  ]\n","   [202.44308   158.44308    95.44308  ]\n","   ...\n","   [188.20982   152.1685     82.82913  ]\n","   [189.10046   150.02121    72.83591  ]\n","   [192.80916   150.76009    69.79793  ]]\n","\n","  [[210.5692    162.10602   106.18304  ]\n","   [208.41406   162.8192    103.58147  ]\n","   [205.73438   163.46875   101.046875 ]\n","   ...\n","   [190.49438   156.41064    91.794464 ]\n","   [189.        150.60826    74.39614  ]\n","   [192.15068   151.50786    68.436325 ]]\n","\n","  [[212.26674   165.66853   113.2567   ]\n","   [210.99219   167.5067    112.15848  ]\n","   [210.62164   170.48102   109.3404   ]\n","   ...\n","   [194.19078   160.43518   100.45289  ]\n","   [189.85938   151.79797    78.08808  ]\n","   [192.        151.9096     66.566895 ]]]\n","\n","\n"," [[[ 63.714287   28.714285   60.714287 ]\n","   [ 63.97959    28.979591   60.97959  ]\n","   [ 63.85204    28.852041   58.85204  ]\n","   ...\n","   [ 10.423455    5.4234557  11.423455 ]\n","   [  9.622445    4.622445   10.622445 ]\n","   [  9.714286    4.714286   10.714286 ]]\n","\n","  [[ 71.331635   34.331635   65.331635 ]\n","   [ 67.92347    30.92347    61.92347  ]\n","   [ 68.22959    32.17347    60.34184  ]\n","   ...\n","   [ 10.142857    5.1428566  11.142857 ]\n","   [ 10.994897    5.994897   11.994897 ]\n","   [ 10.857143    5.8571434  11.857143 ]]\n","\n","  [[ 70.56633    33.92347    61.709183 ]\n","   [ 71.46939    34.82653    61.15306  ]\n","   [ 69.811226   33.382652   59.168365 ]\n","   ...\n","   [ 15.306135    5.4744415  13.8571   ]\n","   [ 13.10202     3.0714417  11.015309 ]\n","   [ 13.00504     3.7092113  11.428572 ]]\n","\n","  ...\n","\n","  [[ 80.84691    35.56629    59.40815  ]\n","   [ 78.74485    33.74485    53.816277 ]\n","   [ 80.33679    36.38268    53.97962  ]\n","   ...\n","   [ 23.596882    7.596883    7.596883 ]\n","   [ 22.413221    6.4132204   6.6274843]\n","   [ 24.066353    8.066353    8.280617 ]]\n","\n","  [[ 80.06116    34.704018   58.775444 ]\n","   [ 75.28066    30.280664   50.49495  ]\n","   [ 81.57651    34.576508   53.005077 ]\n","   ...\n","   [ 23.214264    7.428528    6.785736 ]\n","   [ 23.933662    7.9336624   7.9336624]\n","   [ 23.928558    7.9285583   7.9285583]]\n","\n","  [[ 77.50529    29.505283   54.21957  ]\n","   [ 79.95391    32.882484   53.168198 ]\n","   [ 82.54077    35.112198   53.75506  ]\n","   ...\n","   [ 23.500061    7.714325    7.071533 ]\n","   [ 23.117458    7.1174574   7.1174574]\n","   [ 21.7704      5.770398    5.770398 ]]]\n","\n","\n"," ...\n","\n","\n"," [[[ 41.030613   43.030613   42.030613 ]\n","   [ 41.02041    43.02041    42.02041  ]\n","   [ 39.142857   41.142857   40.142857 ]\n","   ...\n","   [ 75.15302    76.15302    78.15302  ]\n","   [ 66.63769    65.63769    70.63769  ]\n","   [ 56.01519    55.01519    60.01519  ]]\n","\n","  [[ 43.09694    45.09694    44.09694  ]\n","   [ 41.933674   43.933674   42.933674 ]\n","   [ 40.857143   42.857143   41.857143 ]\n","   ...\n","   [ 83.785736   85.         86.35721  ]\n","   [ 84.714264   84.714264   86.714264 ]\n","   [ 81.40302    81.40302    83.40302  ]]\n","\n","  [[ 43.5051     45.5051     44.5051   ]\n","   [ 44.571426   46.571426   45.571426 ]\n","   [ 41.617344   43.234695   43.382652 ]\n","   ...\n","   [ 79.617386   80.04591    81.066376 ]\n","   [ 80.78571    80.78571    82.35714  ]\n","   [ 80.78571    80.78571    82.35714  ]]\n","\n","  ...\n","\n","  [[ 34.         25.214264   25.571472 ]\n","   [ 34.         25.214264   25.571472 ]\n","   [ 33.954063   25.596922   26.382637 ]\n","   ...\n","   [188.07132   187.07132   195.07132  ]\n","   [187.62749   186.62749   194.62749  ]\n","   [186.27547   185.27547   193.27547  ]]\n","\n","  [[ 35.         26.         27.       ]\n","   [ 35.         26.         27.       ]\n","   [ 35.571426   27.214287   28.       ]\n","   ...\n","   [184.41322   184.41322   192.41322  ]\n","   [184.14288   184.14288   192.14288  ]\n","   [185.04593   185.04593   193.04593  ]]\n","\n","  [[ 34.         25.         26.       ]\n","   [ 34.642822   25.642822   26.642822 ]\n","   [ 34.290787   25.933647   26.71936  ]\n","   ...\n","   [188.56645   188.56645   196.56645  ]\n","   [190.83182   190.83182   198.83182  ]\n","   [190.07153   190.07153   198.07153  ]]]\n","\n","\n"," [[[ 42.086735   46.086735   55.086735 ]\n","   [ 43.999996   47.999996   56.999996 ]\n","   [ 38.         41.785713   50.357143 ]\n","   ...\n","   [ 65.92861    13.571406    5.357143 ]\n","   [ 68.38266    16.382658    5.3826575]\n","   [ 69.4847     17.484707    6.4847064]]\n","\n","  [[ 45.045918   49.045918   58.045918 ]\n","   [ 45.07653    49.07653    58.07653  ]\n","   [ 46.127552   49.127552   56.127552 ]\n","   ...\n","   [ 69.84184    14.872448    7.8571434]\n","   [ 71.857155   16.857157    9.857157 ]\n","   [ 73.71429    19.714287    9.714287 ]]\n","\n","  [[ 43.142857   46.142857   54.714287 ]\n","   [ 44.127552   47.127552   54.127552 ]\n","   [ 48.811226   51.16837    58.382652 ]\n","   ...\n","   [ 71.00002    13.4031      7.214264 ]\n","   [ 73.857155   16.428585    9.64287  ]\n","   [ 75.928604   18.500034   11.71432  ]]\n","\n","  ...\n","\n","  [[ 55.362236   11.571363    7.9285717]\n","   [ 55.255104   14.086733   10.142857 ]\n","   [ 54.57145    14.831628   12.2806635]\n","   ...\n","   [102.70981    32.99539    28.995394 ]\n","   [103.94429    35.76046    24.76046  ]\n","   [103.06157    36.918564   20.561417 ]]\n","\n","  [[ 53.61734    11.714312    8.000013 ]\n","   [ 54.07652    13.209195    9.142857 ]\n","   [ 50.64283    10.785714    8.7142725]\n","   ...\n","   [ 84.0458     13.331567    7.5865965]\n","   [ 85.576454   12.862221    5.729545 ]\n","   [ 90.64288    17.92865     9.071533 ]]\n","\n","  [[ 52.515327   15.0561695   9.285749 ]\n","   [ 51.54595    14.454119    8.500034 ]\n","   [ 47.714355   12.790894    9.219465 ]\n","   ...\n","   [ 81.55624    24.55642    13.260446 ]\n","   [ 78.663506   21.092215   13.449392 ]\n","   [ 77.85742    20.286133   14.643311 ]]]\n","\n","\n"," [[[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]\n","\n","  [[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]\n","\n","  [[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]\n","\n","  ...\n","\n","  [[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]\n","\n","  [[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]\n","\n","  [[  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   ...\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]\n","   [  0.          0.          0.       ]]]], shape=(32, 224, 224, 3), dtype=float32) tf.Tensor(\n","[[0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"," [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]], shape=(32, 10), dtype=float32)\n"]}],"source":["#If you wanted see an example of batched data, you would use take() method\n","for images, labels in train_data_10_percent.take(1):\n","  print(images, labels)"]},{"cell_type":"markdown","metadata":{"id":"MBvZB5eXvcQl"},"source":["We see all the output values are one-hot encoded versions"]},{"cell_type":"markdown","metadata":{"id":"OTnen__8up1d"},"source":["### Model 0: Building a transfer learning model using the Keras Functional API\n","\n","Alright, our data is tensor-ified, let's build a model.\n","\n","To do so we're going to be using the [`tf.keras.applications`](https://www.tensorflow.org/api_docs/python/tf/keras/applications) module as it contains a series of already trained (on ImageNet) computer vision models as well as the Keras Functional API to construct our model.\n","\n","We're going to go through the following steps:\n","\n","1. Instantiate a pre-trained base model object by choosing a target model such as [`EfficientNetB0`](https://www.tensorflow.org/api_docs/python/tf/keras/applications/EfficientNetB0) from `tf.keras.applications`, setting the `include_top` parameter to `False` (we do this because we're going to create our own top, which are the output layers for the model).\n","2. Set the base model's `trainable` attribute to `False` to freeze all of the weights in the pre-trained model.\n","3. Define an input layer for our model, for example, what shape of data should our model expect?\n","4. [Optional] Normalize the inputs to our model if it requires. Some computer vision models such as `ResNetV250` require their inputs to be between 0 & 1. \n","\n","> 🤔 **Note:** As of writing, the `EfficientNet` models in the `tf.keras.applications` module do not require images to be normalized (pixel values between 0 and 1) on input, where as many of the other models do. I posted [an issue to the TensorFlow GitHub](https://github.com/tensorflow/tensorflow/issues/42506) about this and they confirmed this. \n","\n","5. Pass the inputs to the base model.\n","6. Pool the outputs of the base model into a shape compatible with the output activation layer (turn base model output tensors into same shape as label tensors). This can be done using [`tf.keras.layers.GlobalAveragePooling2D()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalAveragePooling2D) or [`tf.keras.layers.GlobalMaxPooling2D()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalMaxPool2D?hl=en) though the former is more common in practice.\n","7. Create an output activation layer using `tf.keras.layers.Dense()` with the appropriate activation function and number of neurons.\n","8. Combine the inputs and outputs layer into a model using [`tf.keras.Model()`](https://www.tensorflow.org/api_docs/python/tf/keras/Model).\n","9. Compile the model using the appropriate loss function and choose of optimizer.\n","10. Fit the model for desired number of epochs and with necessary callbacks (in our case, we'll start off with the TensorBoard callback).\n","\n","Woah... that sounds like a lot. Before we get ahead of ourselves, let's see it in practice."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45580,"status":"ok","timestamp":1641928977250,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"3ESijt7Xw1ij","outputId":"3e78ab28-afb2-4c7c-b4fb-f1c0180fb779"},"outputs":[{"output_type":"stream","name":"stdout","text":["Shape after base_model: (None, 7, 7, 1280)\n","AFter GlobalAgeragePooling2D(): (None, 1280)\n","Saving TensorBoard log files to: transfer_learning/10_percent_feature_extract/20220111-192214\n","Epoch 1/5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["24/24 [==============================] - 16s 344ms/step - loss: 1.8550 - accuracy: 0.4227 - val_loss: 1.3398 - val_accuracy: 0.7204\n","Epoch 2/5\n","24/24 [==============================] - 7s 265ms/step - loss: 1.1238 - accuracy: 0.7573 - val_loss: 0.9397 - val_accuracy: 0.7993\n","Epoch 3/5\n","24/24 [==============================] - 7s 260ms/step - loss: 0.8396 - accuracy: 0.8080 - val_loss: 0.7753 - val_accuracy: 0.8125\n","Epoch 4/5\n","24/24 [==============================] - 7s 266ms/step - loss: 0.6866 - accuracy: 0.8360 - val_loss: 0.6898 - val_accuracy: 0.8191\n","Epoch 5/5\n","24/24 [==============================] - 7s 265ms/step - loss: 0.5949 - accuracy: 0.8547 - val_loss: 0.6447 - val_accuracy: 0.8273\n"]}],"source":["#1. Crate base model with tf.keras.applications\n","base_model = tf.keras.applications.EfficientNetB0(include_top = False)\n","\n","#2. Freeze the base model (so the pre-learned patterns remain)\n","base_model.trainable = False\n","\n","#3. Create inputs into the base model\n","inputs = tf.keras.layers.Input(shape = (224, 224, 3), name = \"input_layer\")\n","\n","#4. If using ResNet50V2, add this to speed up convergence, remove for EfficientNet\n","# x = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)(inputs)\n","\n","#5. Pass the inputs to the base_model (note: using tf.keras.applications, EfficientNet inputs don't have to be normalized)\n","x = base_model(inputs) #This notation puts the parameter at the bottom of the layers\n","#Check data shape after passing it to the base_model\n","print(f\"Shape after base_model: {x.shape}\")\n","\n","#6. Average pool the outputs of the base model (aggregate all teh most important information, reduce number of computations)\n","x = tf.keras.layers.GlobalAveragePooling2D(name = \"globale_average_pooling_layer\")(x) #we put x on the bottom of the pooling layer\n","print(f\"AFter GlobalAgeragePooling2D(): {x.shape}\")\n","\n","#7. Create the output activation layer\n","outputs = tf.keras.layers.Dense(10, activation = \"softmax\", name = \"output_layer\")(x)\n","\n","#8. Combine the output activation lyaer\n","model_0 = tf.keras.Model(inputs, outputs) #Combine input and outputs\n","\n","#9. Compile the model\n","model_0.compile(loss = 'categorical_crossentropy',\n","                optimizer = tf.keras.optimizers.Adam(),\n","                metrics = [\"accuracy\"])\n","\n","#10. Fit the model (we use less steps for validation so it's faster)\n","history_10_percent = model_0.fit(train_data_10_percent,\n","                                 epochs = 5,\n","                                 steps_per_epoch = len(train_data_10_percent),\n","                                 validation_data = test_data,\n","                                 #Go through less of the validation data so epochs are faster\n","                                 validation_steps = int(0.25 * len(test_data)),\n","                                 #Track our model's training logs for visualization alter\n","                                 callbacks = [create_tensorboard_callback(\"transfer_learning\", \"10_percent_feature_extract\")])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1641928977250,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"FhUASz2k023C","outputId":"43cbef9d-77be-4242-f8bd-e77b3eb85feb"},"outputs":[{"output_type":"stream","name":"stdout","text":["0 input_3\n","1 rescaling_2\n","2 normalization_2\n","3 stem_conv_pad\n","4 stem_conv\n","5 stem_bn\n","6 stem_activation\n","7 block1a_dwconv\n","8 block1a_bn\n","9 block1a_activation\n","10 block1a_se_squeeze\n","11 block1a_se_reshape\n","12 block1a_se_reduce\n","13 block1a_se_expand\n","14 block1a_se_excite\n","15 block1a_project_conv\n","16 block1a_project_bn\n","17 block2a_expand_conv\n","18 block2a_expand_bn\n","19 block2a_expand_activation\n","20 block2a_dwconv_pad\n","21 block2a_dwconv\n","22 block2a_bn\n","23 block2a_activation\n","24 block2a_se_squeeze\n","25 block2a_se_reshape\n","26 block2a_se_reduce\n","27 block2a_se_expand\n","28 block2a_se_excite\n","29 block2a_project_conv\n","30 block2a_project_bn\n","31 block2b_expand_conv\n","32 block2b_expand_bn\n","33 block2b_expand_activation\n","34 block2b_dwconv\n","35 block2b_bn\n","36 block2b_activation\n","37 block2b_se_squeeze\n","38 block2b_se_reshape\n","39 block2b_se_reduce\n","40 block2b_se_expand\n","41 block2b_se_excite\n","42 block2b_project_conv\n","43 block2b_project_bn\n","44 block2b_drop\n","45 block2b_add\n","46 block3a_expand_conv\n","47 block3a_expand_bn\n","48 block3a_expand_activation\n","49 block3a_dwconv_pad\n","50 block3a_dwconv\n","51 block3a_bn\n","52 block3a_activation\n","53 block3a_se_squeeze\n","54 block3a_se_reshape\n","55 block3a_se_reduce\n","56 block3a_se_expand\n","57 block3a_se_excite\n","58 block3a_project_conv\n","59 block3a_project_bn\n","60 block3b_expand_conv\n","61 block3b_expand_bn\n","62 block3b_expand_activation\n","63 block3b_dwconv\n","64 block3b_bn\n","65 block3b_activation\n","66 block3b_se_squeeze\n","67 block3b_se_reshape\n","68 block3b_se_reduce\n","69 block3b_se_expand\n","70 block3b_se_excite\n","71 block3b_project_conv\n","72 block3b_project_bn\n","73 block3b_drop\n","74 block3b_add\n","75 block4a_expand_conv\n","76 block4a_expand_bn\n","77 block4a_expand_activation\n","78 block4a_dwconv_pad\n","79 block4a_dwconv\n","80 block4a_bn\n","81 block4a_activation\n","82 block4a_se_squeeze\n","83 block4a_se_reshape\n","84 block4a_se_reduce\n","85 block4a_se_expand\n","86 block4a_se_excite\n","87 block4a_project_conv\n","88 block4a_project_bn\n","89 block4b_expand_conv\n","90 block4b_expand_bn\n","91 block4b_expand_activation\n","92 block4b_dwconv\n","93 block4b_bn\n","94 block4b_activation\n","95 block4b_se_squeeze\n","96 block4b_se_reshape\n","97 block4b_se_reduce\n","98 block4b_se_expand\n","99 block4b_se_excite\n","100 block4b_project_conv\n","101 block4b_project_bn\n","102 block4b_drop\n","103 block4b_add\n","104 block4c_expand_conv\n","105 block4c_expand_bn\n","106 block4c_expand_activation\n","107 block4c_dwconv\n","108 block4c_bn\n","109 block4c_activation\n","110 block4c_se_squeeze\n","111 block4c_se_reshape\n","112 block4c_se_reduce\n","113 block4c_se_expand\n","114 block4c_se_excite\n","115 block4c_project_conv\n","116 block4c_project_bn\n","117 block4c_drop\n","118 block4c_add\n","119 block5a_expand_conv\n","120 block5a_expand_bn\n","121 block5a_expand_activation\n","122 block5a_dwconv\n","123 block5a_bn\n","124 block5a_activation\n","125 block5a_se_squeeze\n","126 block5a_se_reshape\n","127 block5a_se_reduce\n","128 block5a_se_expand\n","129 block5a_se_excite\n","130 block5a_project_conv\n","131 block5a_project_bn\n","132 block5b_expand_conv\n","133 block5b_expand_bn\n","134 block5b_expand_activation\n","135 block5b_dwconv\n","136 block5b_bn\n","137 block5b_activation\n","138 block5b_se_squeeze\n","139 block5b_se_reshape\n","140 block5b_se_reduce\n","141 block5b_se_expand\n","142 block5b_se_excite\n","143 block5b_project_conv\n","144 block5b_project_bn\n","145 block5b_drop\n","146 block5b_add\n","147 block5c_expand_conv\n","148 block5c_expand_bn\n","149 block5c_expand_activation\n","150 block5c_dwconv\n","151 block5c_bn\n","152 block5c_activation\n","153 block5c_se_squeeze\n","154 block5c_se_reshape\n","155 block5c_se_reduce\n","156 block5c_se_expand\n","157 block5c_se_excite\n","158 block5c_project_conv\n","159 block5c_project_bn\n","160 block5c_drop\n","161 block5c_add\n","162 block6a_expand_conv\n","163 block6a_expand_bn\n","164 block6a_expand_activation\n","165 block6a_dwconv_pad\n","166 block6a_dwconv\n","167 block6a_bn\n","168 block6a_activation\n","169 block6a_se_squeeze\n","170 block6a_se_reshape\n","171 block6a_se_reduce\n","172 block6a_se_expand\n","173 block6a_se_excite\n","174 block6a_project_conv\n","175 block6a_project_bn\n","176 block6b_expand_conv\n","177 block6b_expand_bn\n","178 block6b_expand_activation\n","179 block6b_dwconv\n","180 block6b_bn\n","181 block6b_activation\n","182 block6b_se_squeeze\n","183 block6b_se_reshape\n","184 block6b_se_reduce\n","185 block6b_se_expand\n","186 block6b_se_excite\n","187 block6b_project_conv\n","188 block6b_project_bn\n","189 block6b_drop\n","190 block6b_add\n","191 block6c_expand_conv\n","192 block6c_expand_bn\n","193 block6c_expand_activation\n","194 block6c_dwconv\n","195 block6c_bn\n","196 block6c_activation\n","197 block6c_se_squeeze\n","198 block6c_se_reshape\n","199 block6c_se_reduce\n","200 block6c_se_expand\n","201 block6c_se_excite\n","202 block6c_project_conv\n","203 block6c_project_bn\n","204 block6c_drop\n","205 block6c_add\n","206 block6d_expand_conv\n","207 block6d_expand_bn\n","208 block6d_expand_activation\n","209 block6d_dwconv\n","210 block6d_bn\n","211 block6d_activation\n","212 block6d_se_squeeze\n","213 block6d_se_reshape\n","214 block6d_se_reduce\n","215 block6d_se_expand\n","216 block6d_se_excite\n","217 block6d_project_conv\n","218 block6d_project_bn\n","219 block6d_drop\n","220 block6d_add\n","221 block7a_expand_conv\n","222 block7a_expand_bn\n","223 block7a_expand_activation\n","224 block7a_dwconv\n","225 block7a_bn\n","226 block7a_activation\n","227 block7a_se_squeeze\n","228 block7a_se_reshape\n","229 block7a_se_reduce\n","230 block7a_se_expand\n","231 block7a_se_excite\n","232 block7a_project_conv\n","233 block7a_project_bn\n","234 top_conv\n","235 top_bn\n","236 top_activation\n"]}],"source":["# Check layers in our base model\n","for layer_number, layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":264,"status":"ok","timestamp":1641928977496,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"JCvdBppx5B_7","outputId":"ad4eb3fc-d47e-4502-f99f-d595e73f63b7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"efficientnetb0\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_3 (InputLayer)           [(None, None, None,  0           []                               \n","                                 3)]                                                              \n","                                                                                                  \n"," rescaling_2 (Rescaling)        (None, None, None,   0           ['input_3[0][0]']                \n","                                3)                                                                \n","                                                                                                  \n"," normalization_2 (Normalization  (None, None, None,   7          ['rescaling_2[0][0]']            \n"," )                              3)                                                                \n","                                                                                                  \n"," stem_conv_pad (ZeroPadding2D)  (None, None, None,   0           ['normalization_2[0][0]']        \n","                                3)                                                                \n","                                                                                                  \n"," stem_conv (Conv2D)             (None, None, None,   864         ['stem_conv_pad[0][0]']          \n","                                32)                                                               \n","                                                                                                  \n"," stem_bn (BatchNormalization)   (None, None, None,   128         ['stem_conv[0][0]']              \n","                                32)                                                               \n","                                                                                                  \n"," stem_activation (Activation)   (None, None, None,   0           ['stem_bn[0][0]']                \n","                                32)                                                               \n","                                                                                                  \n"," block1a_dwconv (DepthwiseConv2  (None, None, None,   288        ['stem_activation[0][0]']        \n"," D)                             32)                                                               \n","                                                                                                  \n"," block1a_bn (BatchNormalization  (None, None, None,   128        ['block1a_dwconv[0][0]']         \n"," )                              32)                                                               \n","                                                                                                  \n"," block1a_activation (Activation  (None, None, None,   0          ['block1a_bn[0][0]']             \n"," )                              32)                                                               \n","                                                                                                  \n"," block1a_se_squeeze (GlobalAver  (None, 32)          0           ['block1a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block1a_se_reshape (Reshape)   (None, 1, 1, 32)     0           ['block1a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block1a_se_reduce (Conv2D)     (None, 1, 1, 8)      264         ['block1a_se_reshape[0][0]']     \n","                                                                                                  \n"," block1a_se_expand (Conv2D)     (None, 1, 1, 32)     288         ['block1a_se_reduce[0][0]']      \n","                                                                                                  \n"," block1a_se_excite (Multiply)   (None, None, None,   0           ['block1a_activation[0][0]',     \n","                                32)                               'block1a_se_expand[0][0]']      \n","                                                                                                  \n"," block1a_project_conv (Conv2D)  (None, None, None,   512         ['block1a_se_excite[0][0]']      \n","                                16)                                                               \n","                                                                                                  \n"," block1a_project_bn (BatchNorma  (None, None, None,   64         ['block1a_project_conv[0][0]']   \n"," lization)                      16)                                                               \n","                                                                                                  \n"," block2a_expand_conv (Conv2D)   (None, None, None,   1536        ['block1a_project_bn[0][0]']     \n","                                96)                                                               \n","                                                                                                  \n"," block2a_expand_bn (BatchNormal  (None, None, None,   384        ['block2a_expand_conv[0][0]']    \n"," ization)                       96)                                                               \n","                                                                                                  \n"," block2a_expand_activation (Act  (None, None, None,   0          ['block2a_expand_bn[0][0]']      \n"," ivation)                       96)                                                               \n","                                                                                                  \n"," block2a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block2a_expand_activation[0][0]\n"," g2D)                           96)                              ']                               \n","                                                                                                  \n"," block2a_dwconv (DepthwiseConv2  (None, None, None,   864        ['block2a_dwconv_pad[0][0]']     \n"," D)                             96)                                                               \n","                                                                                                  \n"," block2a_bn (BatchNormalization  (None, None, None,   384        ['block2a_dwconv[0][0]']         \n"," )                              96)                                                               \n","                                                                                                  \n"," block2a_activation (Activation  (None, None, None,   0          ['block2a_bn[0][0]']             \n"," )                              96)                                                               \n","                                                                                                  \n"," block2a_se_squeeze (GlobalAver  (None, 96)          0           ['block2a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block2a_se_reshape (Reshape)   (None, 1, 1, 96)     0           ['block2a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block2a_se_reduce (Conv2D)     (None, 1, 1, 4)      388         ['block2a_se_reshape[0][0]']     \n","                                                                                                  \n"," block2a_se_expand (Conv2D)     (None, 1, 1, 96)     480         ['block2a_se_reduce[0][0]']      \n","                                                                                                  \n"," block2a_se_excite (Multiply)   (None, None, None,   0           ['block2a_activation[0][0]',     \n","                                96)                               'block2a_se_expand[0][0]']      \n","                                                                                                  \n"," block2a_project_conv (Conv2D)  (None, None, None,   2304        ['block2a_se_excite[0][0]']      \n","                                24)                                                               \n","                                                                                                  \n"," block2a_project_bn (BatchNorma  (None, None, None,   96         ['block2a_project_conv[0][0]']   \n"," lization)                      24)                                                               \n","                                                                                                  \n"," block2b_expand_conv (Conv2D)   (None, None, None,   3456        ['block2a_project_bn[0][0]']     \n","                                144)                                                              \n","                                                                                                  \n"," block2b_expand_bn (BatchNormal  (None, None, None,   576        ['block2b_expand_conv[0][0]']    \n"," ization)                       144)                                                              \n","                                                                                                  \n"," block2b_expand_activation (Act  (None, None, None,   0          ['block2b_expand_bn[0][0]']      \n"," ivation)                       144)                                                              \n","                                                                                                  \n"," block2b_dwconv (DepthwiseConv2  (None, None, None,   1296       ['block2b_expand_activation[0][0]\n"," D)                             144)                             ']                               \n","                                                                                                  \n"," block2b_bn (BatchNormalization  (None, None, None,   576        ['block2b_dwconv[0][0]']         \n"," )                              144)                                                              \n","                                                                                                  \n"," block2b_activation (Activation  (None, None, None,   0          ['block2b_bn[0][0]']             \n"," )                              144)                                                              \n","                                                                                                  \n"," block2b_se_squeeze (GlobalAver  (None, 144)         0           ['block2b_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block2b_se_reshape (Reshape)   (None, 1, 1, 144)    0           ['block2b_se_squeeze[0][0]']     \n","                                                                                                  \n"," block2b_se_reduce (Conv2D)     (None, 1, 1, 6)      870         ['block2b_se_reshape[0][0]']     \n","                                                                                                  \n"," block2b_se_expand (Conv2D)     (None, 1, 1, 144)    1008        ['block2b_se_reduce[0][0]']      \n","                                                                                                  \n"," block2b_se_excite (Multiply)   (None, None, None,   0           ['block2b_activation[0][0]',     \n","                                144)                              'block2b_se_expand[0][0]']      \n","                                                                                                  \n"," block2b_project_conv (Conv2D)  (None, None, None,   3456        ['block2b_se_excite[0][0]']      \n","                                24)                                                               \n","                                                                                                  \n"," block2b_project_bn (BatchNorma  (None, None, None,   96         ['block2b_project_conv[0][0]']   \n"," lization)                      24)                                                               \n","                                                                                                  \n"," block2b_drop (Dropout)         (None, None, None,   0           ['block2b_project_bn[0][0]']     \n","                                24)                                                               \n","                                                                                                  \n"," block2b_add (Add)              (None, None, None,   0           ['block2b_drop[0][0]',           \n","                                24)                               'block2a_project_bn[0][0]']     \n","                                                                                                  \n"," block3a_expand_conv (Conv2D)   (None, None, None,   3456        ['block2b_add[0][0]']            \n","                                144)                                                              \n","                                                                                                  \n"," block3a_expand_bn (BatchNormal  (None, None, None,   576        ['block3a_expand_conv[0][0]']    \n"," ization)                       144)                                                              \n","                                                                                                  \n"," block3a_expand_activation (Act  (None, None, None,   0          ['block3a_expand_bn[0][0]']      \n"," ivation)                       144)                                                              \n","                                                                                                  \n"," block3a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block3a_expand_activation[0][0]\n"," g2D)                           144)                             ']                               \n","                                                                                                  \n"," block3a_dwconv (DepthwiseConv2  (None, None, None,   3600       ['block3a_dwconv_pad[0][0]']     \n"," D)                             144)                                                              \n","                                                                                                  \n"," block3a_bn (BatchNormalization  (None, None, None,   576        ['block3a_dwconv[0][0]']         \n"," )                              144)                                                              \n","                                                                                                  \n"," block3a_activation (Activation  (None, None, None,   0          ['block3a_bn[0][0]']             \n"," )                              144)                                                              \n","                                                                                                  \n"," block3a_se_squeeze (GlobalAver  (None, 144)         0           ['block3a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block3a_se_reshape (Reshape)   (None, 1, 1, 144)    0           ['block3a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block3a_se_reduce (Conv2D)     (None, 1, 1, 6)      870         ['block3a_se_reshape[0][0]']     \n","                                                                                                  \n"," block3a_se_expand (Conv2D)     (None, 1, 1, 144)    1008        ['block3a_se_reduce[0][0]']      \n","                                                                                                  \n"," block3a_se_excite (Multiply)   (None, None, None,   0           ['block3a_activation[0][0]',     \n","                                144)                              'block3a_se_expand[0][0]']      \n","                                                                                                  \n"," block3a_project_conv (Conv2D)  (None, None, None,   5760        ['block3a_se_excite[0][0]']      \n","                                40)                                                               \n","                                                                                                  \n"," block3a_project_bn (BatchNorma  (None, None, None,   160        ['block3a_project_conv[0][0]']   \n"," lization)                      40)                                                               \n","                                                                                                  \n"," block3b_expand_conv (Conv2D)   (None, None, None,   9600        ['block3a_project_bn[0][0]']     \n","                                240)                                                              \n","                                                                                                  \n"," block3b_expand_bn (BatchNormal  (None, None, None,   960        ['block3b_expand_conv[0][0]']    \n"," ization)                       240)                                                              \n","                                                                                                  \n"," block3b_expand_activation (Act  (None, None, None,   0          ['block3b_expand_bn[0][0]']      \n"," ivation)                       240)                                                              \n","                                                                                                  \n"," block3b_dwconv (DepthwiseConv2  (None, None, None,   6000       ['block3b_expand_activation[0][0]\n"," D)                             240)                             ']                               \n","                                                                                                  \n"," block3b_bn (BatchNormalization  (None, None, None,   960        ['block3b_dwconv[0][0]']         \n"," )                              240)                                                              \n","                                                                                                  \n"," block3b_activation (Activation  (None, None, None,   0          ['block3b_bn[0][0]']             \n"," )                              240)                                                              \n","                                                                                                  \n"," block3b_se_squeeze (GlobalAver  (None, 240)         0           ['block3b_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block3b_se_reshape (Reshape)   (None, 1, 1, 240)    0           ['block3b_se_squeeze[0][0]']     \n","                                                                                                  \n"," block3b_se_reduce (Conv2D)     (None, 1, 1, 10)     2410        ['block3b_se_reshape[0][0]']     \n","                                                                                                  \n"," block3b_se_expand (Conv2D)     (None, 1, 1, 240)    2640        ['block3b_se_reduce[0][0]']      \n","                                                                                                  \n"," block3b_se_excite (Multiply)   (None, None, None,   0           ['block3b_activation[0][0]',     \n","                                240)                              'block3b_se_expand[0][0]']      \n","                                                                                                  \n"," block3b_project_conv (Conv2D)  (None, None, None,   9600        ['block3b_se_excite[0][0]']      \n","                                40)                                                               \n","                                                                                                  \n"," block3b_project_bn (BatchNorma  (None, None, None,   160        ['block3b_project_conv[0][0]']   \n"," lization)                      40)                                                               \n","                                                                                                  \n"," block3b_drop (Dropout)         (None, None, None,   0           ['block3b_project_bn[0][0]']     \n","                                40)                                                               \n","                                                                                                  \n"," block3b_add (Add)              (None, None, None,   0           ['block3b_drop[0][0]',           \n","                                40)                               'block3a_project_bn[0][0]']     \n","                                                                                                  \n"," block4a_expand_conv (Conv2D)   (None, None, None,   9600        ['block3b_add[0][0]']            \n","                                240)                                                              \n","                                                                                                  \n"," block4a_expand_bn (BatchNormal  (None, None, None,   960        ['block4a_expand_conv[0][0]']    \n"," ization)                       240)                                                              \n","                                                                                                  \n"," block4a_expand_activation (Act  (None, None, None,   0          ['block4a_expand_bn[0][0]']      \n"," ivation)                       240)                                                              \n","                                                                                                  \n"," block4a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block4a_expand_activation[0][0]\n"," g2D)                           240)                             ']                               \n","                                                                                                  \n"," block4a_dwconv (DepthwiseConv2  (None, None, None,   2160       ['block4a_dwconv_pad[0][0]']     \n"," D)                             240)                                                              \n","                                                                                                  \n"," block4a_bn (BatchNormalization  (None, None, None,   960        ['block4a_dwconv[0][0]']         \n"," )                              240)                                                              \n","                                                                                                  \n"," block4a_activation (Activation  (None, None, None,   0          ['block4a_bn[0][0]']             \n"," )                              240)                                                              \n","                                                                                                  \n"," block4a_se_squeeze (GlobalAver  (None, 240)         0           ['block4a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block4a_se_reshape (Reshape)   (None, 1, 1, 240)    0           ['block4a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block4a_se_reduce (Conv2D)     (None, 1, 1, 10)     2410        ['block4a_se_reshape[0][0]']     \n","                                                                                                  \n"," block4a_se_expand (Conv2D)     (None, 1, 1, 240)    2640        ['block4a_se_reduce[0][0]']      \n","                                                                                                  \n"," block4a_se_excite (Multiply)   (None, None, None,   0           ['block4a_activation[0][0]',     \n","                                240)                              'block4a_se_expand[0][0]']      \n","                                                                                                  \n"," block4a_project_conv (Conv2D)  (None, None, None,   19200       ['block4a_se_excite[0][0]']      \n","                                80)                                                               \n","                                                                                                  \n"," block4a_project_bn (BatchNorma  (None, None, None,   320        ['block4a_project_conv[0][0]']   \n"," lization)                      80)                                                               \n","                                                                                                  \n"," block4b_expand_conv (Conv2D)   (None, None, None,   38400       ['block4a_project_bn[0][0]']     \n","                                480)                                                              \n","                                                                                                  \n"," block4b_expand_bn (BatchNormal  (None, None, None,   1920       ['block4b_expand_conv[0][0]']    \n"," ization)                       480)                                                              \n","                                                                                                  \n"," block4b_expand_activation (Act  (None, None, None,   0          ['block4b_expand_bn[0][0]']      \n"," ivation)                       480)                                                              \n","                                                                                                  \n"," block4b_dwconv (DepthwiseConv2  (None, None, None,   4320       ['block4b_expand_activation[0][0]\n"," D)                             480)                             ']                               \n","                                                                                                  \n"," block4b_bn (BatchNormalization  (None, None, None,   1920       ['block4b_dwconv[0][0]']         \n"," )                              480)                                                              \n","                                                                                                  \n"," block4b_activation (Activation  (None, None, None,   0          ['block4b_bn[0][0]']             \n"," )                              480)                                                              \n","                                                                                                  \n"," block4b_se_squeeze (GlobalAver  (None, 480)         0           ['block4b_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block4b_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block4b_se_squeeze[0][0]']     \n","                                                                                                  \n"," block4b_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block4b_se_reshape[0][0]']     \n","                                                                                                  \n"," block4b_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block4b_se_reduce[0][0]']      \n","                                                                                                  \n"," block4b_se_excite (Multiply)   (None, None, None,   0           ['block4b_activation[0][0]',     \n","                                480)                              'block4b_se_expand[0][0]']      \n","                                                                                                  \n"," block4b_project_conv (Conv2D)  (None, None, None,   38400       ['block4b_se_excite[0][0]']      \n","                                80)                                                               \n","                                                                                                  \n"," block4b_project_bn (BatchNorma  (None, None, None,   320        ['block4b_project_conv[0][0]']   \n"," lization)                      80)                                                               \n","                                                                                                  \n"," block4b_drop (Dropout)         (None, None, None,   0           ['block4b_project_bn[0][0]']     \n","                                80)                                                               \n","                                                                                                  \n"," block4b_add (Add)              (None, None, None,   0           ['block4b_drop[0][0]',           \n","                                80)                               'block4a_project_bn[0][0]']     \n","                                                                                                  \n"," block4c_expand_conv (Conv2D)   (None, None, None,   38400       ['block4b_add[0][0]']            \n","                                480)                                                              \n","                                                                                                  \n"," block4c_expand_bn (BatchNormal  (None, None, None,   1920       ['block4c_expand_conv[0][0]']    \n"," ization)                       480)                                                              \n","                                                                                                  \n"," block4c_expand_activation (Act  (None, None, None,   0          ['block4c_expand_bn[0][0]']      \n"," ivation)                       480)                                                              \n","                                                                                                  \n"," block4c_dwconv (DepthwiseConv2  (None, None, None,   4320       ['block4c_expand_activation[0][0]\n"," D)                             480)                             ']                               \n","                                                                                                  \n"," block4c_bn (BatchNormalization  (None, None, None,   1920       ['block4c_dwconv[0][0]']         \n"," )                              480)                                                              \n","                                                                                                  \n"," block4c_activation (Activation  (None, None, None,   0          ['block4c_bn[0][0]']             \n"," )                              480)                                                              \n","                                                                                                  \n"," block4c_se_squeeze (GlobalAver  (None, 480)         0           ['block4c_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block4c_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block4c_se_squeeze[0][0]']     \n","                                                                                                  \n"," block4c_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block4c_se_reshape[0][0]']     \n","                                                                                                  \n"," block4c_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block4c_se_reduce[0][0]']      \n","                                                                                                  \n"," block4c_se_excite (Multiply)   (None, None, None,   0           ['block4c_activation[0][0]',     \n","                                480)                              'block4c_se_expand[0][0]']      \n","                                                                                                  \n"," block4c_project_conv (Conv2D)  (None, None, None,   38400       ['block4c_se_excite[0][0]']      \n","                                80)                                                               \n","                                                                                                  \n"," block4c_project_bn (BatchNorma  (None, None, None,   320        ['block4c_project_conv[0][0]']   \n"," lization)                      80)                                                               \n","                                                                                                  \n"," block4c_drop (Dropout)         (None, None, None,   0           ['block4c_project_bn[0][0]']     \n","                                80)                                                               \n","                                                                                                  \n"," block4c_add (Add)              (None, None, None,   0           ['block4c_drop[0][0]',           \n","                                80)                               'block4b_add[0][0]']            \n","                                                                                                  \n"," block5a_expand_conv (Conv2D)   (None, None, None,   38400       ['block4c_add[0][0]']            \n","                                480)                                                              \n","                                                                                                  \n"," block5a_expand_bn (BatchNormal  (None, None, None,   1920       ['block5a_expand_conv[0][0]']    \n"," ization)                       480)                                                              \n","                                                                                                  \n"," block5a_expand_activation (Act  (None, None, None,   0          ['block5a_expand_bn[0][0]']      \n"," ivation)                       480)                                                              \n","                                                                                                  \n"," block5a_dwconv (DepthwiseConv2  (None, None, None,   12000      ['block5a_expand_activation[0][0]\n"," D)                             480)                             ']                               \n","                                                                                                  \n"," block5a_bn (BatchNormalization  (None, None, None,   1920       ['block5a_dwconv[0][0]']         \n"," )                              480)                                                              \n","                                                                                                  \n"," block5a_activation (Activation  (None, None, None,   0          ['block5a_bn[0][0]']             \n"," )                              480)                                                              \n","                                                                                                  \n"," block5a_se_squeeze (GlobalAver  (None, 480)         0           ['block5a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block5a_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block5a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block5a_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block5a_se_reshape[0][0]']     \n","                                                                                                  \n"," block5a_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block5a_se_reduce[0][0]']      \n","                                                                                                  \n"," block5a_se_excite (Multiply)   (None, None, None,   0           ['block5a_activation[0][0]',     \n","                                480)                              'block5a_se_expand[0][0]']      \n","                                                                                                  \n"," block5a_project_conv (Conv2D)  (None, None, None,   53760       ['block5a_se_excite[0][0]']      \n","                                112)                                                              \n","                                                                                                  \n"," block5a_project_bn (BatchNorma  (None, None, None,   448        ['block5a_project_conv[0][0]']   \n"," lization)                      112)                                                              \n","                                                                                                  \n"," block5b_expand_conv (Conv2D)   (None, None, None,   75264       ['block5a_project_bn[0][0]']     \n","                                672)                                                              \n","                                                                                                  \n"," block5b_expand_bn (BatchNormal  (None, None, None,   2688       ['block5b_expand_conv[0][0]']    \n"," ization)                       672)                                                              \n","                                                                                                  \n"," block5b_expand_activation (Act  (None, None, None,   0          ['block5b_expand_bn[0][0]']      \n"," ivation)                       672)                                                              \n","                                                                                                  \n"," block5b_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block5b_expand_activation[0][0]\n"," D)                             672)                             ']                               \n","                                                                                                  \n"," block5b_bn (BatchNormalization  (None, None, None,   2688       ['block5b_dwconv[0][0]']         \n"," )                              672)                                                              \n","                                                                                                  \n"," block5b_activation (Activation  (None, None, None,   0          ['block5b_bn[0][0]']             \n"," )                              672)                                                              \n","                                                                                                  \n"," block5b_se_squeeze (GlobalAver  (None, 672)         0           ['block5b_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block5b_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block5b_se_squeeze[0][0]']     \n","                                                                                                  \n"," block5b_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block5b_se_reshape[0][0]']     \n","                                                                                                  \n"," block5b_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block5b_se_reduce[0][0]']      \n","                                                                                                  \n"," block5b_se_excite (Multiply)   (None, None, None,   0           ['block5b_activation[0][0]',     \n","                                672)                              'block5b_se_expand[0][0]']      \n","                                                                                                  \n"," block5b_project_conv (Conv2D)  (None, None, None,   75264       ['block5b_se_excite[0][0]']      \n","                                112)                                                              \n","                                                                                                  \n"," block5b_project_bn (BatchNorma  (None, None, None,   448        ['block5b_project_conv[0][0]']   \n"," lization)                      112)                                                              \n","                                                                                                  \n"," block5b_drop (Dropout)         (None, None, None,   0           ['block5b_project_bn[0][0]']     \n","                                112)                                                              \n","                                                                                                  \n"," block5b_add (Add)              (None, None, None,   0           ['block5b_drop[0][0]',           \n","                                112)                              'block5a_project_bn[0][0]']     \n","                                                                                                  \n"," block5c_expand_conv (Conv2D)   (None, None, None,   75264       ['block5b_add[0][0]']            \n","                                672)                                                              \n","                                                                                                  \n"," block5c_expand_bn (BatchNormal  (None, None, None,   2688       ['block5c_expand_conv[0][0]']    \n"," ization)                       672)                                                              \n","                                                                                                  \n"," block5c_expand_activation (Act  (None, None, None,   0          ['block5c_expand_bn[0][0]']      \n"," ivation)                       672)                                                              \n","                                                                                                  \n"," block5c_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block5c_expand_activation[0][0]\n"," D)                             672)                             ']                               \n","                                                                                                  \n"," block5c_bn (BatchNormalization  (None, None, None,   2688       ['block5c_dwconv[0][0]']         \n"," )                              672)                                                              \n","                                                                                                  \n"," block5c_activation (Activation  (None, None, None,   0          ['block5c_bn[0][0]']             \n"," )                              672)                                                              \n","                                                                                                  \n"," block5c_se_squeeze (GlobalAver  (None, 672)         0           ['block5c_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block5c_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block5c_se_squeeze[0][0]']     \n","                                                                                                  \n"," block5c_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block5c_se_reshape[0][0]']     \n","                                                                                                  \n"," block5c_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block5c_se_reduce[0][0]']      \n","                                                                                                  \n"," block5c_se_excite (Multiply)   (None, None, None,   0           ['block5c_activation[0][0]',     \n","                                672)                              'block5c_se_expand[0][0]']      \n","                                                                                                  \n"," block5c_project_conv (Conv2D)  (None, None, None,   75264       ['block5c_se_excite[0][0]']      \n","                                112)                                                              \n","                                                                                                  \n"," block5c_project_bn (BatchNorma  (None, None, None,   448        ['block5c_project_conv[0][0]']   \n"," lization)                      112)                                                              \n","                                                                                                  \n"," block5c_drop (Dropout)         (None, None, None,   0           ['block5c_project_bn[0][0]']     \n","                                112)                                                              \n","                                                                                                  \n"," block5c_add (Add)              (None, None, None,   0           ['block5c_drop[0][0]',           \n","                                112)                              'block5b_add[0][0]']            \n","                                                                                                  \n"," block6a_expand_conv (Conv2D)   (None, None, None,   75264       ['block5c_add[0][0]']            \n","                                672)                                                              \n","                                                                                                  \n"," block6a_expand_bn (BatchNormal  (None, None, None,   2688       ['block6a_expand_conv[0][0]']    \n"," ization)                       672)                                                              \n","                                                                                                  \n"," block6a_expand_activation (Act  (None, None, None,   0          ['block6a_expand_bn[0][0]']      \n"," ivation)                       672)                                                              \n","                                                                                                  \n"," block6a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block6a_expand_activation[0][0]\n"," g2D)                           672)                             ']                               \n","                                                                                                  \n"," block6a_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block6a_dwconv_pad[0][0]']     \n"," D)                             672)                                                              \n","                                                                                                  \n"," block6a_bn (BatchNormalization  (None, None, None,   2688       ['block6a_dwconv[0][0]']         \n"," )                              672)                                                              \n","                                                                                                  \n"," block6a_activation (Activation  (None, None, None,   0          ['block6a_bn[0][0]']             \n"," )                              672)                                                              \n","                                                                                                  \n"," block6a_se_squeeze (GlobalAver  (None, 672)         0           ['block6a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block6a_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block6a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block6a_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block6a_se_reshape[0][0]']     \n","                                                                                                  \n"," block6a_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block6a_se_reduce[0][0]']      \n","                                                                                                  \n"," block6a_se_excite (Multiply)   (None, None, None,   0           ['block6a_activation[0][0]',     \n","                                672)                              'block6a_se_expand[0][0]']      \n","                                                                                                  \n"," block6a_project_conv (Conv2D)  (None, None, None,   129024      ['block6a_se_excite[0][0]']      \n","                                192)                                                              \n","                                                                                                  \n"," block6a_project_bn (BatchNorma  (None, None, None,   768        ['block6a_project_conv[0][0]']   \n"," lization)                      192)                                                              \n","                                                                                                  \n"," block6b_expand_conv (Conv2D)   (None, None, None,   221184      ['block6a_project_bn[0][0]']     \n","                                1152)                                                             \n","                                                                                                  \n"," block6b_expand_bn (BatchNormal  (None, None, None,   4608       ['block6b_expand_conv[0][0]']    \n"," ization)                       1152)                                                             \n","                                                                                                  \n"," block6b_expand_activation (Act  (None, None, None,   0          ['block6b_expand_bn[0][0]']      \n"," ivation)                       1152)                                                             \n","                                                                                                  \n"," block6b_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6b_expand_activation[0][0]\n"," D)                             1152)                            ']                               \n","                                                                                                  \n"," block6b_bn (BatchNormalization  (None, None, None,   4608       ['block6b_dwconv[0][0]']         \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6b_activation (Activation  (None, None, None,   0          ['block6b_bn[0][0]']             \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6b_se_squeeze (GlobalAver  (None, 1152)        0           ['block6b_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block6b_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6b_se_squeeze[0][0]']     \n","                                                                                                  \n"," block6b_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6b_se_reshape[0][0]']     \n","                                                                                                  \n"," block6b_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6b_se_reduce[0][0]']      \n","                                                                                                  \n"," block6b_se_excite (Multiply)   (None, None, None,   0           ['block6b_activation[0][0]',     \n","                                1152)                             'block6b_se_expand[0][0]']      \n","                                                                                                  \n"," block6b_project_conv (Conv2D)  (None, None, None,   221184      ['block6b_se_excite[0][0]']      \n","                                192)                                                              \n","                                                                                                  \n"," block6b_project_bn (BatchNorma  (None, None, None,   768        ['block6b_project_conv[0][0]']   \n"," lization)                      192)                                                              \n","                                                                                                  \n"," block6b_drop (Dropout)         (None, None, None,   0           ['block6b_project_bn[0][0]']     \n","                                192)                                                              \n","                                                                                                  \n"," block6b_add (Add)              (None, None, None,   0           ['block6b_drop[0][0]',           \n","                                192)                              'block6a_project_bn[0][0]']     \n","                                                                                                  \n"," block6c_expand_conv (Conv2D)   (None, None, None,   221184      ['block6b_add[0][0]']            \n","                                1152)                                                             \n","                                                                                                  \n"," block6c_expand_bn (BatchNormal  (None, None, None,   4608       ['block6c_expand_conv[0][0]']    \n"," ization)                       1152)                                                             \n","                                                                                                  \n"," block6c_expand_activation (Act  (None, None, None,   0          ['block6c_expand_bn[0][0]']      \n"," ivation)                       1152)                                                             \n","                                                                                                  \n"," block6c_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6c_expand_activation[0][0]\n"," D)                             1152)                            ']                               \n","                                                                                                  \n"," block6c_bn (BatchNormalization  (None, None, None,   4608       ['block6c_dwconv[0][0]']         \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6c_activation (Activation  (None, None, None,   0          ['block6c_bn[0][0]']             \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6c_se_squeeze (GlobalAver  (None, 1152)        0           ['block6c_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block6c_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6c_se_squeeze[0][0]']     \n","                                                                                                  \n"," block6c_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6c_se_reshape[0][0]']     \n","                                                                                                  \n"," block6c_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6c_se_reduce[0][0]']      \n","                                                                                                  \n"," block6c_se_excite (Multiply)   (None, None, None,   0           ['block6c_activation[0][0]',     \n","                                1152)                             'block6c_se_expand[0][0]']      \n","                                                                                                  \n"," block6c_project_conv (Conv2D)  (None, None, None,   221184      ['block6c_se_excite[0][0]']      \n","                                192)                                                              \n","                                                                                                  \n"," block6c_project_bn (BatchNorma  (None, None, None,   768        ['block6c_project_conv[0][0]']   \n"," lization)                      192)                                                              \n","                                                                                                  \n"," block6c_drop (Dropout)         (None, None, None,   0           ['block6c_project_bn[0][0]']     \n","                                192)                                                              \n","                                                                                                  \n"," block6c_add (Add)              (None, None, None,   0           ['block6c_drop[0][0]',           \n","                                192)                              'block6b_add[0][0]']            \n","                                                                                                  \n"," block6d_expand_conv (Conv2D)   (None, None, None,   221184      ['block6c_add[0][0]']            \n","                                1152)                                                             \n","                                                                                                  \n"," block6d_expand_bn (BatchNormal  (None, None, None,   4608       ['block6d_expand_conv[0][0]']    \n"," ization)                       1152)                                                             \n","                                                                                                  \n"," block6d_expand_activation (Act  (None, None, None,   0          ['block6d_expand_bn[0][0]']      \n"," ivation)                       1152)                                                             \n","                                                                                                  \n"," block6d_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6d_expand_activation[0][0]\n"," D)                             1152)                            ']                               \n","                                                                                                  \n"," block6d_bn (BatchNormalization  (None, None, None,   4608       ['block6d_dwconv[0][0]']         \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6d_activation (Activation  (None, None, None,   0          ['block6d_bn[0][0]']             \n"," )                              1152)                                                             \n","                                                                                                  \n"," block6d_se_squeeze (GlobalAver  (None, 1152)        0           ['block6d_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block6d_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6d_se_squeeze[0][0]']     \n","                                                                                                  \n"," block6d_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6d_se_reshape[0][0]']     \n","                                                                                                  \n"," block6d_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6d_se_reduce[0][0]']      \n","                                                                                                  \n"," block6d_se_excite (Multiply)   (None, None, None,   0           ['block6d_activation[0][0]',     \n","                                1152)                             'block6d_se_expand[0][0]']      \n","                                                                                                  \n"," block6d_project_conv (Conv2D)  (None, None, None,   221184      ['block6d_se_excite[0][0]']      \n","                                192)                                                              \n","                                                                                                  \n"," block6d_project_bn (BatchNorma  (None, None, None,   768        ['block6d_project_conv[0][0]']   \n"," lization)                      192)                                                              \n","                                                                                                  \n"," block6d_drop (Dropout)         (None, None, None,   0           ['block6d_project_bn[0][0]']     \n","                                192)                                                              \n","                                                                                                  \n"," block6d_add (Add)              (None, None, None,   0           ['block6d_drop[0][0]',           \n","                                192)                              'block6c_add[0][0]']            \n","                                                                                                  \n"," block7a_expand_conv (Conv2D)   (None, None, None,   221184      ['block6d_add[0][0]']            \n","                                1152)                                                             \n","                                                                                                  \n"," block7a_expand_bn (BatchNormal  (None, None, None,   4608       ['block7a_expand_conv[0][0]']    \n"," ization)                       1152)                                                             \n","                                                                                                  \n"," block7a_expand_activation (Act  (None, None, None,   0          ['block7a_expand_bn[0][0]']      \n"," ivation)                       1152)                                                             \n","                                                                                                  \n"," block7a_dwconv (DepthwiseConv2  (None, None, None,   10368      ['block7a_expand_activation[0][0]\n"," D)                             1152)                            ']                               \n","                                                                                                  \n"," block7a_bn (BatchNormalization  (None, None, None,   4608       ['block7a_dwconv[0][0]']         \n"," )                              1152)                                                             \n","                                                                                                  \n"," block7a_activation (Activation  (None, None, None,   0          ['block7a_bn[0][0]']             \n"," )                              1152)                                                             \n","                                                                                                  \n"," block7a_se_squeeze (GlobalAver  (None, 1152)        0           ['block7a_activation[0][0]']     \n"," agePooling2D)                                                                                    \n","                                                                                                  \n"," block7a_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block7a_se_squeeze[0][0]']     \n","                                                                                                  \n"," block7a_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block7a_se_reshape[0][0]']     \n","                                                                                                  \n"," block7a_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block7a_se_reduce[0][0]']      \n","                                                                                                  \n"," block7a_se_excite (Multiply)   (None, None, None,   0           ['block7a_activation[0][0]',     \n","                                1152)                             'block7a_se_expand[0][0]']      \n","                                                                                                  \n"," block7a_project_conv (Conv2D)  (None, None, None,   368640      ['block7a_se_excite[0][0]']      \n","                                320)                                                              \n","                                                                                                  \n"," block7a_project_bn (BatchNorma  (None, None, None,   1280       ['block7a_project_conv[0][0]']   \n"," lization)                      320)                                                              \n","                                                                                                  \n"," top_conv (Conv2D)              (None, None, None,   409600      ['block7a_project_bn[0][0]']     \n","                                1280)                                                             \n","                                                                                                  \n"," top_bn (BatchNormalization)    (None, None, None,   5120        ['top_conv[0][0]']               \n","                                1280)                                                             \n","                                                                                                  \n"," top_activation (Activation)    (None, None, None,   0           ['top_bn[0][0]']                 \n","                                1280)                                                             \n","                                                                                                  \n","==================================================================================================\n","Total params: 4,049,571\n","Trainable params: 0\n","Non-trainable params: 4,049,571\n","__________________________________________________________________________________________________\n"]}],"source":["base_model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"elapsed":1382,"status":"ok","timestamp":1641928978876,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"AjeTHW3L6s7x","outputId":"0a750bd6-2adc-4186-faba-0b737a210a55"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["plot_loss_curves(history_10_percent)"]},{"cell_type":"markdown","metadata":{"id":"qTsMA1Qx7ftr"},"source":["We see the model is a bit overtrained"]},{"cell_type":"markdown","metadata":{"id":"_MaYyJfC7q3U"},"source":["## Getting a feature vector from a trained model\n","\n","> 🤔 **Question:** What happens with the `tf.keras.layers.GlobalAveragePooling2D()` layer? I haven't seen it before.\n","\n","The [`tf.keras.layers.GlobalAveragePooling2D()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalAveragePooling2D) layer transforms a 4D tensor into a 2D tensor by averaging the values across the inner-axes.\n","\n","The previous sentence is a bit of a mouthful, so let's see an example."]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":525,"status":"ok","timestamp":1642011964735,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Wi8__QPB7xS9","outputId":"8a03ee7b-5358-491d-8025-6fd2d86caab6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random input tensor:\n"," []\n","\n","2D global average pooled random tensor:\n"," []\n","\n","Shape of input tensor: (0, 0, 0, 3)\n","Shape of 2D global averaged pooled input tensor: (0, 3)\n"]}],"source":["import tensorflow as t\n","#Define input tensor shape (same number of dimensions as the output of efficientnetb0)\n","input_shape = (2, 4, 4, 3)\n","\n","#Create a random tensor\n","tf.random.set_seed(42)\n","input_tensor = tf.random.normal(input_shape)\n","print(f\"Random input tensor:\\n {input_tensor}\\n\")\n","\n","#Pass the rnadom tensor through a global average pooling 2D layer\n","global_average_pooled_tensor = tf.keras.layers.GlobalAveragePooling2D()(input_tensor)\n","print(f\"2D global average pooled random tensor:\\n {global_average_pooled_tensor}\\n\")\n","\n","#Check shapes of the different tensors\n","print(f\"Shape of input tensor: {input_tensor.shape}\")\n","print(f\"Shape of 2D global averaged pooled input tensor: {global_average_pooled_tensor.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"2X0j7LUj8ru1"},"source":["You can see the `tf.keras.layers.GlobalAveragePooling2D()` layer condensed the input tensor from shape `(1, 4, 4, 3)` to `(1, 3)`. It did so by averaging the `input_tensor` across the middle two axes.\n","\n","We can replicate this operation using the `tf.reduce_mean()` operation and specifying the appropriate axes."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1641928978877,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"8LNSIlob8vG0","outputId":"ca90d6b8-2e7d-4235-a543-71930fb89e8a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1, 3), dtype=float32, numpy=array([[-0.09368646, -0.45840448, -0.2885598 ]], dtype=float32)>"]},"metadata":{},"execution_count":121}],"source":["#This is the same as GLobalAveragePooling2D()\n","tf.reduce_mean(input_tensor, axis = (1,2))"]},{"cell_type":"markdown","metadata":{"id":"ZgzPAu1-87H3"},"source":["Doing this not only makes the output of the base model compatible with the input shape requirement of our output layer (`tf.keras.layers.Dense()`), it also condenses the information found by the base model into a lower dimension **feature vector**.\n","\n","> 🔑 **Note:** One of the reasons feature extraction transfer learning is named how it is is because what often happens is a pretrained model outputs a **feature vector** (a long tensor of numbers, in our case, this is the output of the [`tf.keras.layers.GlobalAveragePooling2D()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalAveragePooling2D) layer) which can then be used to extract patterns out of.\n","\n","> 🛠 **Practice:** Do the same as the above cell but for [`tf.keras.layers.GlobalMaxPool2D()`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalMaxPool2D)."]},{"cell_type":"markdown","metadata":{"id":"Ymwsf8Sd-Mp-"},"source":["## Running a series of transfer learning experiments\n","\n","We've seen the incredible results of transfer learning on 10% of the training data, what about 1% of the training data?\n","\n","What kind of results do you think we can get using 100x less data than the original CNN models we built ourselves?\n","\n","Why don't we answer that question while running the following modelling experiments:\n","1. `model_1`: Use feature extraction transfer learning on 1% of the training data with data augmentation.\n","2. `model_2`: Use feature extraction transfer learning on 10% of the training data with data augmentation.\n","3. `model_3`: Use fine-tuning transfer learning on 10% of the training data with data augmentation.\n","4. `model_4`: Use fine-tuning transfer learning on 100% of the training data with data augmentation.\n","\n","While all of the experiments will be run on different versions of the training data, they will all be evaluated on the same test dataset, this ensures the results of each experiment are as comparable as possible.\n","\n","All experiments will be done using the `EfficientNetB0` model within the `tf.keras.applications` module.\n","\n","To make sure we're keeping track of our experiments, we'll use our `create_tensorboard_callback()` function to log all of the model training logs.\n","\n","We'll construct each model using the Keras Functional API and instead of implementing data augmentation in the `ImageDataGenerator` class as we have previously, we're going to build it right into the model using the [`tf.keras.layers.experimental.preprocessing`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing) module.\n","\n","Let's begin by downloading the data for experiment 1, using feature extraction transfer learning on 1% of the training data with data augmentation."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4698,"status":"ok","timestamp":1641928983571,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"jClzKDA6-Zl4","outputId":"ff1e9be9-7362-44d5-c08a-ddd54d4677e8"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-01-11 19:22:58--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_1_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 173.194.76.128, 66.102.1.128, 74.125.133.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|173.194.76.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 133612354 (127M) [application/zip]\n","Saving to: ‘10_food_classes_1_percent.zip’\n","\n","10_food_classes_1_p 100%[===================>] 127.42M  47.4MB/s    in 2.7s    \n","\n","2022-01-11 19:23:01 (47.4 MB/s) - ‘10_food_classes_1_percent.zip’ saved [133612354/133612354]\n","\n"]}],"source":["# Download and unzip data\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_1_percent.zip\n","unzip_data(\"10_food_classes_1_percent.zip\")\n","\n","# Create training and test dirs\n","train_dir_1_percent = \"10_food_classes_1_percent/train/\"\n","test_dir = \"10_food_classes_1_percent/test/\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1641928983571,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"Vnrh7vem-fwL","outputId":"ab4f5fcd-b301-4a71-8c5e-153b921905d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in '10_food_classes_1_percent'.\n","There are 10 directories and 0 images in '10_food_classes_1_percent/test'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/ramen'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/grilled_salmon'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/steak'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/ice_cream'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/fried_rice'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/sushi'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/hamburger'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/chicken_wings'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/chicken_curry'.\n","There are 0 directories and 250 images in '10_food_classes_1_percent/test/pizza'.\n","There are 10 directories and 0 images in '10_food_classes_1_percent/train'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/ramen'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/grilled_salmon'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/steak'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/ice_cream'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/fried_rice'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/sushi'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/hamburger'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/chicken_wings'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/chicken_curry'.\n","There are 0 directories and 7 images in '10_food_classes_1_percent/train/pizza'.\n"]}],"source":["#Walk through data\n","walk_through_dir(\"10_food_classes_1_percent\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":337,"status":"ok","timestamp":1641928983893,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"OleSTXvK-j8A","outputId":"c50e6094-c440-46a4-a1ca-91450df1c736"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 70 files belonging to 10 classes.\n","Found 2500 files belonging to 10 classes.\n"]}],"source":["import tensorflow as tf\n","IMG_SIZE = (224, 224)\n","train_data_1_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_1_percent,\n","                                                                           label_mode = 'categorical',\n","                                                                           batch_size = 32,\n","                                                                           image_size = IMG_SIZE)\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n","                                                                label_mode = \"categorical\",\n","                                                                image_size = IMG_SIZE)"]},{"cell_type":"markdown","metadata":{"id":"W4BFPAKCAuvG"},"source":["Since we're not using ImageDataGenerator, we use a data augmentation layer instead"]},{"cell_type":"markdown","metadata":{"id":"PJ7IhtfqBmWC"},"source":["This a relatively new feature added to TensorFlow 2.2+ but it's very powerful. Adding a data augmentation layer to the model has the following benefits:\n","* Preprocessing of the images (augmenting them) happens on the GPU rather than on the CPU (much faster).\n","  * Images are best preprocessed on the GPU where as text and structured data are more suited to be preprocessed on the CPU.\n","* Image data augmentation only happens during training so we can still export our whole model and use it elsewhere. And if someone else wanted to train the same model as us, including the same kind of data augmentation, they could.\n","\n","![](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/05-data-augmentation-inside-a-model.png)\n","*Example of using data augmentation as the first layer within a model (EfficientNetB0).*\n","\n","> 🤔 **Note:** At the time of writing, the preprocessing layers we're using for data augmentation are in *experimental* status within the in TensorFlow library. This means although the layers should be considered stable, the code may change slightly in a future version of TensorFlow. For more information on the other preprocessing layers avaiable and the different methods of data augmentation, check out the [Keras preprocessing layers guide](https://keras.io/guides/preprocessing_layers/) and the [TensorFlow data augmentation guide](https://www.tensorflow.org/tutorials/images/data_augmentation).\n","\n","To use data augmentation right within our model we'll create a Keras Sequential model consisting of only data preprocessing layers, we can then use this Sequential model within another Functional model.\n","\n","If that sounds confusing, it'll make sense once we create it in code.\n","\n","The data augmentation transformations we're going to use are:\n","* [RandomFlip](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomFlip) - flips image on horizontal or vertical axis.\n","* [RandomRotation](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomRotation) - randomly rotates image by a specified amount.\n","* [RandomZoom](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomZoom) - randomly zooms into an image by specified amount.\n","* [RandomHeight](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomHeight) - randomly shifts image height by a specified amount.\n","* [RandomWidth](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/RandomWidth) - randomly shifts image width by a specified amount.\n","* [Rescaling](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/Rescaling) - normalizes the image pixel values to be between 0 and 1, this is worth mentioning because it is required for some image models but since we're using the `tf.keras.applications` implementation of `EfficientNetB0`, it's not required.\n","\n","There are more option but these will do for now."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OdS2JYZWCD1e"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","#Create a data augmentation stage with horizontal flipping, rorations, zooms\n","data_augmentation = keras.Sequential([\n","    preprocessing.RandomFlip(\"horizontal\"),\n","    preprocessing.RandomRotation(0.2),\n","    preprocessing.RandomZoom(0.2),\n","    preprocessing.RandomHeight(0.2),\n","    preprocessing.RandomWidth(0.2)\n","    # preprocessing.Rescaling(1./255) # keep for ResNet50V2, remove for EfficientNetB0                                  \n","], name = \"data_aug\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":562},"executionInfo":{"elapsed":1386,"status":"ok","timestamp":1641928985277,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"},"user_tz":300},"id":"GtwDZOBZCnrm","outputId":"7678b988-e7f3-4575-ccc8-56a91c9c8e6a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Augmented random image from class: ramen')"]},"metadata":{},"execution_count":126},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["#View a random image\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","import os\n","import random\n","target_class = random.choice(train_data_1_percent.class_names) #Choose a random class\n","target_dir = \"10_food_classes_1_percent/train/\" + target_class # create the target directory\n","random_image = random.choice(os.listdir(target_dir)) # choose a random image from target directory\n","random_image_path = target_dir + \"/\" + random_image # create the choosen random image path\n","img = mpimg.imread(random_image_path) #Read in the chosen target image\n","plt.imshow(img)\n","plt.title(f\"Original random image from class: {target_class}\")\n","\n","#Augment the image\n","augmented_img = data_augmentation(tf.expand_dims(img, axis = 0)) # data augmentation model requires shape (None, height, width, 3)\n","plt.figure()\n","plt.imshow(tf.squeeze(augmented_img)/255.) #requires normalization after augmentation\n","plt.title(f\"Augmented random image from class: {target_class}\")"]},{"cell_type":"markdown","metadata":{"id":"tc67uEMDDy8m"},"source":["## Model 1: Feature extraction transfer learning on 1% of the data with data augmentation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"54Qy6DedDuup","executionInfo":{"status":"ok","timestamp":1641929026991,"user_tz":300,"elapsed":41719,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"5b1e3ff6-3470-4969-cb66-08c62a8d5153"},"outputs":[{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to: transfer_learning/1_percent_data_aug/20220111-192307\n","Epoch 1/5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["3/3 [==============================] - 15s 4s/step - loss: 2.4141 - accuracy: 0.0857 - val_loss: 2.2458 - val_accuracy: 0.1826\n","Epoch 2/5\n","3/3 [==============================] - 4s 2s/step - loss: 2.1327 - accuracy: 0.2857 - val_loss: 2.1231 - val_accuracy: 0.2336\n","Epoch 3/5\n","3/3 [==============================] - 4s 2s/step - loss: 1.9927 - accuracy: 0.4286 - val_loss: 2.0126 - val_accuracy: 0.3224\n","Epoch 4/5\n","3/3 [==============================] - 4s 2s/step - loss: 1.7926 - accuracy: 0.5429 - val_loss: 1.9117 - val_accuracy: 0.3766\n","Epoch 5/5\n","3/3 [==============================] - 6s 3s/step - loss: 1.6362 - accuracy: 0.6857 - val_loss: 1.8474 - val_accuracy: 0.4260\n"]}],"source":["#Setup input shape and base model, freezing the base model layers\n","input_shape = (224, 224, 3)\n","base_model = tf.keras.applications.EfficientNetB0(include_top = False)\n","base_model.trainable = False\n","\n","#Create input layer\n","inputs = layers.Input(shape = input_shape, name = \"input_layer\")\n","\n","#Add in data augmenetation Sequential model as a layer\n","x = data_augmentation(inputs)\n","\n","#Give base_model inputs (after aurmentation) and don't train it\n","x = base_model(x, training = False)\n","\n","#Pool output features of base model\n","x = layers.GlobalAveragePooling2D(name = \"gloabel_average_pooling_layer\")(x)\n","\n","#Put a dense layer on as the output\n","outputs = layers.Dense(10, activation = \"softmax\", name = \"output_layer\")(x)\n","\n","#Make a model with inputs and outputs\n","model_1 = keras.Model(inputs, outputs)\n","\n","#Compile the model\n","model_1.compile(loss = \"categorical_crossentropy\",\n","                optimizer = tf.keras.optimizers.Adam(),\n","                metrics = [\"accuracy\"])\n","\n","#Fit the model\n","history_1_percent = model_1.fit(train_data_1_percent,\n","                                epochs = 5,\n","                                steps_per_epoch = len(train_data_1_percent),\n","                                validation_data = test_data,\n","                                validation_steps = int(0.25 * len(test_data)),\n","                                callbacks = [create_tensorboard_callback(\"transfer_learning\", \"1_percent_data_aug\")])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LycEwVkIGE3Z","executionInfo":{"status":"ok","timestamp":1641929026992,"user_tz":300,"elapsed":16,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"f20b93cf-cdd3-4739-aa5a-42f2042fe707"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<TakeDataset shapes: ((None, 224, 224, 3), (None, 10)), types: (tf.float32, tf.float32)>"]},"metadata":{},"execution_count":128}],"source":["train_data_1_percent.take(1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iYcHQIEZGICT","executionInfo":{"status":"ok","timestamp":1641929026993,"user_tz":300,"elapsed":11,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"622b9c42-3db4-41f7-82a2-3d3fdcd5e183"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_layer (InputLayer)    [(None, 224, 224, 3)]     0         \n","                                                                 \n"," data_aug (Sequential)       (None, None, None, 3)     0         \n","                                                                 \n"," efficientnetb0 (Functional)  (None, None, None, 1280)  4049571  \n","                                                                 \n"," gloabel_average_pooling_lay  (None, 1280)             0         \n"," er (GlobalAveragePooling2D)                                     \n","                                                                 \n"," output_layer (Dense)        (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 4,062,381\n","Trainable params: 12,810\n","Non-trainable params: 4,049,571\n","_________________________________________________________________\n"]}],"source":["model_1.summary()"]},{"cell_type":"markdown","metadata":{"id":"QZF-ZTHqIxjX"},"source":["Note: Both flattening and pooling layers can be used before the top layer. However they do different things:\n","\n","Pooling layers reduce the dimensions of the tensor by performing max() or mean() on the inner dimensions until it is two dimensional. Whereas flatten simply rewrites all the data into a two dimensional form.\n","\n","Flattening a large spatial tensor will result in a great number of parameters, whereas pooling will reduce those parameters.\n","\n","https://stackoverflow.com/questions/49295311/what-is-the-difference-between-flatten-and-globalaveragepooling2d-in-keras"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"teqSIHH0MiLS","executionInfo":{"status":"ok","timestamp":1641929047334,"user_tz":300,"elapsed":20349,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"89abbbca-39af-4d3c-e505-d8d5ca202f41"},"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 130ms/step - loss: 1.8346 - accuracy: 0.4224\n"]},{"output_type":"execute_result","data":{"text/plain":["[1.8346017599105835, 0.42239999771118164]"]},"metadata":{},"execution_count":130}],"source":["# Evaluate on the test data\n","results_1_percent_data_aug = model_1.evaluate(test_data)\n","results_1_percent_data_aug"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"3FbYW3WeMjDf","executionInfo":{"status":"ok","timestamp":1641929048588,"user_tz":300,"elapsed":1274,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"b99eddba-ef5b-49a6-d50a-9662cad34733"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["# How does the model go with a data augmentation layer with 1% of data\n","plot_loss_curves(history_1_percent)"]},{"cell_type":"markdown","metadata":{"id":"RtEqtGExMoPo"},"source":["## Model 2: Feature extraction transfer learning with 10% of data and data augmentation\n","\n","Alright, we've tested 1% of the training data with data augmentation, how about we try 10% of the data with data augmentation?\n","\n","But wait...\n","\n","> 🤔 **Question:** How do you know what experiments to run?\n","\n","Great question. \n","\n","The truth here is you often won't. Machine learning is still a very experimental practice. It's only after trying a fair few things that you'll start to develop an intuition of what to try.\n","\n","My advice is to follow your curiosity as tenaciously as possible. If you feel like you want to try something, write the code for it and run it. See how it goes. The worst thing that'll happen is you'll figure out what doesn't work, the most valuable kind of knowledge.\n","\n","From a practical standpoint, as we've talked about before, you'll want to reduce the amount of time between your initial experiments as much as possible. In other words, run a plethora of smaller experiments, using less data and less training iterations before you find something promising and then scale it up.\n","\n","In the theme of scale, let's scale our 1% training data augmentation experiment up to 10% training data augmentation. That sentence doesn't really make sense but you get what I mean.\n","\n","We're going to run through the exact same steps as the previous model, the only difference being using 10% of the training data instead of 1%."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nhPfx0UjNDDy","executionInfo":{"status":"ok","timestamp":1641929053973,"user_tz":300,"elapsed":5389,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"a47b1492-11ef-44c0-80f8-3b499dd028d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-01-11 19:24:08--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 74.125.133.128, 74.125.140.128, 108.177.15.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|74.125.133.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 168546183 (161M) [application/zip]\n","Saving to: ‘10_food_classes_10_percent.zip.6’\n","\n","10_food_classes_10_ 100%[===================>] 160.74M  53.4MB/s    in 3.0s    \n","\n","2022-01-11 19:24:11 (53.4 MB/s) - ‘10_food_classes_10_percent.zip.6’ saved [168546183/168546183]\n","\n"]}],"source":["# Get 10% of the data of the 10 classes (uncomment if you haven't gotten \"10_food_classes_10_percent.zip\" already)\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n","unzip_data(\"10_food_classes_10_percent.zip\")\n","train_dir_10_percent = \"10_food_classes_10_percent/train/\"\n","test_dir = \"10_food_classes_10_percent/test/\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HX4BKQzzNFu6","executionInfo":{"status":"ok","timestamp":1641929054207,"user_tz":300,"elapsed":255,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"e614b3bd-7858-4f52-f7d6-4694001c5974"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 750 files belonging to 10 classes.\n","Found 2500 files belonging to 10 classes.\n"]}],"source":["#Setup data inputs\n","import tensorflow as tf\n","IMG_SIZE = (224, 224)\n","train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_10_percent,\n","                                                                            label_mode = \"categorical\",\n","                                                                            image_size = IMG_SIZE)\n","\n","# Note: the test data is the same as the previous experiment, we could\n","# skip creating this, but we'll leave this here to practice.\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n","                                                                label_mode=\"categorical\",\n","                                                                image_size=IMG_SIZE)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nY3PyYKUNgdE","executionInfo":{"status":"ok","timestamp":1641929057820,"user_tz":300,"elapsed":3615,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"83b43a3b-47e4-4a28-d3e2-efe8beeacde0"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}],"source":["# Create a functional model with data augmentation\n","import tensorflow as tf\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers.experimental import preprocessing\n","from tensorflow.keras.models import Sequential\n","\n","# Build data augmentation layer\n","data_augmentation = Sequential([\n","  preprocessing.RandomFlip('horizontal'),\n","  preprocessing.RandomHeight(0.2),\n","  preprocessing.RandomWidth(0.2),\n","  preprocessing.RandomZoom(0.2),\n","  preprocessing.RandomRotation(0.2),\n","  # preprocessing.Rescaling(1./255) # keep for ResNet50V2, remove for EfficientNet                 \n","], name=\"data_augmentation\")\n","\n","# Setup the input shape to our model\n","input_shape = (224, 224, 3)\n","\n","# Create a frozen base model\n","base_model = tf.keras.applications.EfficientNetB0(include_top=False)\n","base_model.trainable = False\n","\n","# Create input and output layers\n","inputs = layers.Input(shape=input_shape, name=\"input_layer\") # create input layer\n","x = data_augmentation(inputs) # augment our training images\n","x = base_model(x, training=False) # pass augmented images to base model but keep it in inference mode, so batchnorm layers don't get updated: https://keras.io/guides/transfer_learning/#build-a-model \n","x = layers.GlobalAveragePooling2D(name=\"global_average_pooling_layer\")(x)\n","outputs = layers.Dense(10, activation=\"softmax\", name=\"output_layer\")(x)\n","model_2 = tf.keras.Model(inputs, outputs)\n","\n","# Compile\n","model_2.compile(loss=\"categorical_crossentropy\",\n","              optimizer=tf.keras.optimizers.Adam(lr=0.001), # use Adam optimizer with base learning rate\n","              metrics=[\"accuracy\"])"]},{"cell_type":"markdown","metadata":{"id":"uoMB4pJ-P5bl"},"source":["### Creating a ModelCheckpoint callback\n","\n","Our model is compiled and ready to be fit, so why haven't we fit it yet?\n","\n","Well, for this experiment we're going to introduce a new callback, the `ModelCheckpoint` callback.\n","\n","The [`ModelCheckpoint`](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint) callback gives you the ability to save your model, as a whole in the [`SavedModel`](https://www.tensorflow.org/tutorials/keras/save_and_load#save_the_entire_model) format or the [weights (patterns) only](https://www.tensorflow.org/tutorials/keras/save_and_load#manually_save_weights) to a specified directory as it trains. \n","\n","This is helpful if you think your model is going to be training for a long time and you want to make backups of it as it trains. It also means if you think your model could benefit from being trained for longer, you can reload it from a specific checkpoint and continue training from there.\n","\n","For example, say you fit a feature extraction transfer learning model for 5 epochs and you check the training curves and see it was still improving and you want to see if fine-tuning for another 5 epochs could help, you can load the checkpoint, unfreeze some (or all) of the base model layers and then continue training.\n","\n","In fact, that's exactly what we're going to do. \n","\n","But first, let's create a `ModelCheckpoint` callback. To do so, we have to specifcy a directory we'd like to save to."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0vVe8L7QQDZ4"},"outputs":[],"source":["#Set up checkpoint path\n","checkpoint_path = \"ten_percent_model_checkpoints_weights/checkpoint.ckpt\" # note: remember saving directly to Colab is temporary\n","\n","#Create a Model Checkpoint callback that saves teh model's weights only\n","checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(filepath = checkpoint_path,\n","                                                         save_weights_only = True,\n","                                                         save_best_only = False,\n","                                                         save_freq = \"epoch\",\n","                                                         verbose = 1)"]},{"cell_type":"markdown","metadata":{"id":"m-DJ8UpUQbgu"},"source":["> 🤔 **Question:** What's the difference between saving the entire model (SavedModel format) and saving the weights only?\n","\n","The [`SavedModel`](https://www.tensorflow.org/tutorials/keras/save_and_load#save_the_entire_model) format saves a model's architecture, weights and training configuration all in one folder. It makes it very easy to reload your model exactly how it is elsewhere. However, if you do not want to share all of these details with others, you may want to save and share the weights only (these will just be large tensors of non-human interpretable numbers). If disk space is an issue, saving the weights only is faster and takes up less space than saving the whole model.\n","\n","Time to fit the model.\n","\n","Because we're going to be fine-tuning it later, we'll create a variable `initial_epochs` and set it to 5 to use later.\n","\n","We'll also add in our `checkpoint_callback` in our list of `callbacks`."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tvXmliQWQ7iH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929126274,"user_tz":300,"elapsed":68476,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"892ef0df-8782-41f6-b182-ab5679ed7c45"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to: transfer_learning/10_percent_data_aug/20220111-192417\n","Epoch 1/5\n","24/24 [==============================] - ETA: 0s - loss: 2.0276 - accuracy: 0.3293\n","Epoch 00001: saving model to ten_percent_model_checkpoints_weights/checkpoint.ckpt\n","24/24 [==============================] - 17s 411ms/step - loss: 2.0276 - accuracy: 0.3293 - val_loss: 1.5161 - val_accuracy: 0.6349\n","Epoch 2/5\n","24/24 [==============================] - ETA: 0s - loss: 1.3773 - accuracy: 0.6800\n","Epoch 00002: saving model to ten_percent_model_checkpoints_weights/checkpoint.ckpt\n","24/24 [==============================] - 9s 356ms/step - loss: 1.3773 - accuracy: 0.6800 - val_loss: 1.0935 - val_accuracy: 0.7467\n","Epoch 3/5\n","24/24 [==============================] - ETA: 0s - loss: 1.0648 - accuracy: 0.7533\n","Epoch 00003: saving model to ten_percent_model_checkpoints_weights/checkpoint.ckpt\n","24/24 [==============================] - 11s 460ms/step - loss: 1.0648 - accuracy: 0.7533 - val_loss: 0.9078 - val_accuracy: 0.7599\n","Epoch 4/5\n","24/24 [==============================] - ETA: 0s - loss: 0.9055 - accuracy: 0.7907\n","Epoch 00004: saving model to ten_percent_model_checkpoints_weights/checkpoint.ckpt\n","24/24 [==============================] - 11s 443ms/step - loss: 0.9055 - accuracy: 0.7907 - val_loss: 0.7914 - val_accuracy: 0.7763\n","Epoch 5/5\n","24/24 [==============================] - ETA: 0s - loss: 0.8150 - accuracy: 0.7800\n","Epoch 00005: saving model to ten_percent_model_checkpoints_weights/checkpoint.ckpt\n","24/24 [==============================] - 9s 361ms/step - loss: 0.8150 - accuracy: 0.7800 - val_loss: 0.7163 - val_accuracy: 0.7944\n"]}],"source":["#Fit the model saving checkpoints every epoch\n","initial_epochs = 5\n","history_10_percent_data_aug = model_2.fit(train_data_10_percent,\n","                                          epochs = initial_epochs,\n","                                          validation_data = test_data,\n","                                          validation_steps = int(0.25*len(test_data)),\n","                                          callbacks = [create_tensorboard_callback(\"transfer_learning\", \"10_percent_data_aug\"),\n","                                                       checkpoint_callback])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cQxbTiOQRZWy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929146956,"user_tz":300,"elapsed":20700,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"8189c9d4-6ac6-44ae-f83d-97d40ddf185d"},"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 129ms/step - loss: 0.7065 - accuracy: 0.8072\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.7065011858940125, 0.807200014591217]"]},"metadata":{},"execution_count":137}],"source":["#Evaluate on the test data\n","results_10_percent_data_aug = model_2.evaluate(test_data)\n","results_10_percent_data_aug"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JdfQk83dRtzZ","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1641929147323,"user_tz":300,"elapsed":372,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"6841b03f-0c12-4592-944f-ac46046c198f"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}],"source":["#Plot model loss curves\n","plot_loss_curves(history_10_percent_data_aug)"]},{"cell_type":"markdown","metadata":{"id":"fowa7MqkSCfJ"},"source":["Looking at these, our model's performance with 10% of the data and data augmentation isn't as good as the model with 10% of the data without data augmentation (see `model_0` results above), however the curves are trending in the right direction, meaning if we decided to train for longer, its metrics would likely improve.\n","\n","Since we checkpointed (is that a word?) our model's weights, we might as well see what it's like to load it back in. We'll be able to test if it saved correctly by evaluting it on the test data.\n","\n","To load saved model weights you can use the the [`load_weights()`](https://www.tensorflow.org/tutorials/keras/save_and_load#checkpoint_callback_options) method, passing it the path where your saved weights are stored."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UPXbKZxMSWuW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929168853,"user_tz":300,"elapsed":21535,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"0c9921dc-ee94-4025-b19b-b85774383fe5"},"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 130ms/step - loss: 0.7065 - accuracy: 0.8072\n"]}],"source":["# Load in saved model weights and evaluate model\n","model_2.load_weights(checkpoint_path)\n","loaded_weights_model_results = model_2.evaluate(test_data)"]},{"cell_type":"markdown","metadata":{"id":"wVqOm7tASXN8"},"source":["Now let's compare the results of our previously trained model and the loaded model. These results should very close if not exactly the same. The reason for minor differences comes down to the precision level of numbers calculated."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YhymivPISZz2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929168854,"user_tz":300,"elapsed":42,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"85f506eb-d594-43e4-b0f2-6723d7af4c72"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":140}],"source":["# If the results from our native model and the loaded weights are the same, this should output True\n","results_10_percent_data_aug == loaded_weights_model_results"]},{"cell_type":"markdown","metadata":{"id":"_xKfxdVzSbqO"},"source":["If the above cell doesn't output `True`, it's because the numbers are close but not the *exact* same (due to how computers store numbers with degrees of precision).\n","\n","However, they should be *very* close..."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hzVbQTIHSdYF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929168854,"user_tz":300,"elapsed":37,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"fc8088eb-2a75-4077-df4c-946b994fccaa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ True,  True])"]},"metadata":{},"execution_count":141}],"source":["import numpy as np\n","# Check to see if loaded model results are very close to native model results (should output True)\n","np.isclose(np.array(results_10_percent_data_aug), np.array(loaded_weights_model_results))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uBTEhHo5SgIM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641929168855,"user_tz":300,"elapsed":34,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"6c388cb0-a048-4781-ae17-7734e37c5c16"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1.1920929e-07 0.0000000e+00]\n"]}],"source":["# Check the difference between the two results\n","print(np.array(results_10_percent_data_aug) - np.array(loaded_weights_model_results))"]},{"cell_type":"markdown","source":["## Model 3: Fine-tuning an existing model on 10% of the data\n","\n","![](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/05-fine-tuning-an-efficientnet-model.png)\n","*High-level example of fine-tuning an EfficientNet model. Bottom layers (layers closer to the input data) stay frozen where as top layers (layers closer to the output data) are updated during training.*\n","\n","So far our saved model has been trained using feature extraction transfer learning for 5 epochs on 10% of the training data and data augmentation.\n","\n","This means all of the layers in the base model (EfficientNetB0) were frozen during training.\n","\n","For our next experiment we're going to switch to fine-tuning transfer learning. This means we'll be using the same base model except we'll be unfreezing some of its layers (ones closest to the top) and running the model for a few more epochs.\n","\n","The idea with fine-tuning is to start customizing the pre-trained model more to our own data.\n","\n","> 🔑 **Note:** Fine-tuning usually works best *after* training a feature extraction model for a few epochs and with large amounts of data. For more on this, check out [Keras' guide on Transfer learning & fine-tuning](https://keras.io/guides/transfer_learning/).\n","\n","We've verified our loaded model's performance, let's check out its layers."],"metadata":{"id":"Kz4bTsnbShcd"}},{"cell_type":"code","source":["#Layers in loaded model\n","model_2.layers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lNmhp55AZMFh","executionInfo":{"status":"ok","timestamp":1641929168855,"user_tz":300,"elapsed":32,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"7ff98ae4-8122-4dcd-c419-55c352124502"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<keras.engine.input_layer.InputLayer at 0x7f362ec1bad0>,\n"," <keras.engine.sequential.Sequential at 0x7f362eb0d7d0>,\n"," <keras.engine.functional.Functional at 0x7f362524fe90>,\n"," <keras.layers.pooling.GlobalAveragePooling2D at 0x7f362e1f0a10>,\n"," <keras.layers.core.dense.Dense at 0x7f3625215d50>]"]},"metadata":{},"execution_count":143}]},{"cell_type":"code","source":["for layer in model_2.layers:\n","  print(layer.trainable)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R81Cw9koZVFj","executionInfo":{"status":"ok","timestamp":1641929168855,"user_tz":300,"elapsed":30,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"07c22be0-bd8a-4d8e-c59f-8561d74f3372"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n","False\n","True\n","True\n"]}]},{"cell_type":"markdown","source":["Looking good. We've got an input layer, a Sequential layer (the data augmentation model), a Functional layer (EfficientNetB0), a pooling layer and a Dense layer (the output layer).\n","\n","How about a summary?"],"metadata":{"id":"ooq4Mc1GaMny"}},{"cell_type":"code","source":["model_2.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MPdqnAMQaSHM","executionInfo":{"status":"ok","timestamp":1641929168856,"user_tz":300,"elapsed":30,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"2ea468f8-8416-4913-d7e5-0e9b86cc009e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_4\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_layer (InputLayer)    [(None, 224, 224, 3)]     0         \n","                                                                 \n"," data_augmentation (Sequenti  (None, None, None, 3)    0         \n"," al)                                                             \n","                                                                 \n"," efficientnetb0 (Functional)  (None, None, None, 1280)  4049571  \n","                                                                 \n"," global_average_pooling_laye  (None, 1280)             0         \n"," r (GlobalAveragePooling2D)                                      \n","                                                                 \n"," output_layer (Dense)        (None, 10)                12810     \n","                                                                 \n","=================================================================\n","Total params: 4,062,381\n","Trainable params: 12,810\n","Non-trainable params: 4,049,571\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["#How many layers are trainable in our base model?\n","print(len(model_2.layers[2].trainable_variables))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"byQWQN6aaUs6","executionInfo":{"status":"ok","timestamp":1641929168856,"user_tz":300,"elapsed":28,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"1a17de34-19fb-43f2-f77c-03d95c6a562b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["#Check which layers are tuneable\n","for layer_number, layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name, layer.trainable)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dLup9CCYanwC","executionInfo":{"status":"ok","timestamp":1641929168856,"user_tz":300,"elapsed":26,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"3d624f01-755a-4a1b-d9b9-e27826aaf247"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 input_5 False\n","1 rescaling_4 False\n","2 normalization_4 False\n","3 stem_conv_pad False\n","4 stem_conv False\n","5 stem_bn False\n","6 stem_activation False\n","7 block1a_dwconv False\n","8 block1a_bn False\n","9 block1a_activation False\n","10 block1a_se_squeeze False\n","11 block1a_se_reshape False\n","12 block1a_se_reduce False\n","13 block1a_se_expand False\n","14 block1a_se_excite False\n","15 block1a_project_conv False\n","16 block1a_project_bn False\n","17 block2a_expand_conv False\n","18 block2a_expand_bn False\n","19 block2a_expand_activation False\n","20 block2a_dwconv_pad False\n","21 block2a_dwconv False\n","22 block2a_bn False\n","23 block2a_activation False\n","24 block2a_se_squeeze False\n","25 block2a_se_reshape False\n","26 block2a_se_reduce False\n","27 block2a_se_expand False\n","28 block2a_se_excite False\n","29 block2a_project_conv False\n","30 block2a_project_bn False\n","31 block2b_expand_conv False\n","32 block2b_expand_bn False\n","33 block2b_expand_activation False\n","34 block2b_dwconv False\n","35 block2b_bn False\n","36 block2b_activation False\n","37 block2b_se_squeeze False\n","38 block2b_se_reshape False\n","39 block2b_se_reduce False\n","40 block2b_se_expand False\n","41 block2b_se_excite False\n","42 block2b_project_conv False\n","43 block2b_project_bn False\n","44 block2b_drop False\n","45 block2b_add False\n","46 block3a_expand_conv False\n","47 block3a_expand_bn False\n","48 block3a_expand_activation False\n","49 block3a_dwconv_pad False\n","50 block3a_dwconv False\n","51 block3a_bn False\n","52 block3a_activation False\n","53 block3a_se_squeeze False\n","54 block3a_se_reshape False\n","55 block3a_se_reduce False\n","56 block3a_se_expand False\n","57 block3a_se_excite False\n","58 block3a_project_conv False\n","59 block3a_project_bn False\n","60 block3b_expand_conv False\n","61 block3b_expand_bn False\n","62 block3b_expand_activation False\n","63 block3b_dwconv False\n","64 block3b_bn False\n","65 block3b_activation False\n","66 block3b_se_squeeze False\n","67 block3b_se_reshape False\n","68 block3b_se_reduce False\n","69 block3b_se_expand False\n","70 block3b_se_excite False\n","71 block3b_project_conv False\n","72 block3b_project_bn False\n","73 block3b_drop False\n","74 block3b_add False\n","75 block4a_expand_conv False\n","76 block4a_expand_bn False\n","77 block4a_expand_activation False\n","78 block4a_dwconv_pad False\n","79 block4a_dwconv False\n","80 block4a_bn False\n","81 block4a_activation False\n","82 block4a_se_squeeze False\n","83 block4a_se_reshape False\n","84 block4a_se_reduce False\n","85 block4a_se_expand False\n","86 block4a_se_excite False\n","87 block4a_project_conv False\n","88 block4a_project_bn False\n","89 block4b_expand_conv False\n","90 block4b_expand_bn False\n","91 block4b_expand_activation False\n","92 block4b_dwconv False\n","93 block4b_bn False\n","94 block4b_activation False\n","95 block4b_se_squeeze False\n","96 block4b_se_reshape False\n","97 block4b_se_reduce False\n","98 block4b_se_expand False\n","99 block4b_se_excite False\n","100 block4b_project_conv False\n","101 block4b_project_bn False\n","102 block4b_drop False\n","103 block4b_add False\n","104 block4c_expand_conv False\n","105 block4c_expand_bn False\n","106 block4c_expand_activation False\n","107 block4c_dwconv False\n","108 block4c_bn False\n","109 block4c_activation False\n","110 block4c_se_squeeze False\n","111 block4c_se_reshape False\n","112 block4c_se_reduce False\n","113 block4c_se_expand False\n","114 block4c_se_excite False\n","115 block4c_project_conv False\n","116 block4c_project_bn False\n","117 block4c_drop False\n","118 block4c_add False\n","119 block5a_expand_conv False\n","120 block5a_expand_bn False\n","121 block5a_expand_activation False\n","122 block5a_dwconv False\n","123 block5a_bn False\n","124 block5a_activation False\n","125 block5a_se_squeeze False\n","126 block5a_se_reshape False\n","127 block5a_se_reduce False\n","128 block5a_se_expand False\n","129 block5a_se_excite False\n","130 block5a_project_conv False\n","131 block5a_project_bn False\n","132 block5b_expand_conv False\n","133 block5b_expand_bn False\n","134 block5b_expand_activation False\n","135 block5b_dwconv False\n","136 block5b_bn False\n","137 block5b_activation False\n","138 block5b_se_squeeze False\n","139 block5b_se_reshape False\n","140 block5b_se_reduce False\n","141 block5b_se_expand False\n","142 block5b_se_excite False\n","143 block5b_project_conv False\n","144 block5b_project_bn False\n","145 block5b_drop False\n","146 block5b_add False\n","147 block5c_expand_conv False\n","148 block5c_expand_bn False\n","149 block5c_expand_activation False\n","150 block5c_dwconv False\n","151 block5c_bn False\n","152 block5c_activation False\n","153 block5c_se_squeeze False\n","154 block5c_se_reshape False\n","155 block5c_se_reduce False\n","156 block5c_se_expand False\n","157 block5c_se_excite False\n","158 block5c_project_conv False\n","159 block5c_project_bn False\n","160 block5c_drop False\n","161 block5c_add False\n","162 block6a_expand_conv False\n","163 block6a_expand_bn False\n","164 block6a_expand_activation False\n","165 block6a_dwconv_pad False\n","166 block6a_dwconv False\n","167 block6a_bn False\n","168 block6a_activation False\n","169 block6a_se_squeeze False\n","170 block6a_se_reshape False\n","171 block6a_se_reduce False\n","172 block6a_se_expand False\n","173 block6a_se_excite False\n","174 block6a_project_conv False\n","175 block6a_project_bn False\n","176 block6b_expand_conv False\n","177 block6b_expand_bn False\n","178 block6b_expand_activation False\n","179 block6b_dwconv False\n","180 block6b_bn False\n","181 block6b_activation False\n","182 block6b_se_squeeze False\n","183 block6b_se_reshape False\n","184 block6b_se_reduce False\n","185 block6b_se_expand False\n","186 block6b_se_excite False\n","187 block6b_project_conv False\n","188 block6b_project_bn False\n","189 block6b_drop False\n","190 block6b_add False\n","191 block6c_expand_conv False\n","192 block6c_expand_bn False\n","193 block6c_expand_activation False\n","194 block6c_dwconv False\n","195 block6c_bn False\n","196 block6c_activation False\n","197 block6c_se_squeeze False\n","198 block6c_se_reshape False\n","199 block6c_se_reduce False\n","200 block6c_se_expand False\n","201 block6c_se_excite False\n","202 block6c_project_conv False\n","203 block6c_project_bn False\n","204 block6c_drop False\n","205 block6c_add False\n","206 block6d_expand_conv False\n","207 block6d_expand_bn False\n","208 block6d_expand_activation False\n","209 block6d_dwconv False\n","210 block6d_bn False\n","211 block6d_activation False\n","212 block6d_se_squeeze False\n","213 block6d_se_reshape False\n","214 block6d_se_reduce False\n","215 block6d_se_expand False\n","216 block6d_se_excite False\n","217 block6d_project_conv False\n","218 block6d_project_bn False\n","219 block6d_drop False\n","220 block6d_add False\n","221 block7a_expand_conv False\n","222 block7a_expand_bn False\n","223 block7a_expand_activation False\n","224 block7a_dwconv False\n","225 block7a_bn False\n","226 block7a_activation False\n","227 block7a_se_squeeze False\n","228 block7a_se_reshape False\n","229 block7a_se_reduce False\n","230 block7a_se_expand False\n","231 block7a_se_excite False\n","232 block7a_project_conv False\n","233 block7a_project_bn False\n","234 top_conv False\n","235 top_bn False\n","236 top_activation False\n"]}]},{"cell_type":"markdown","source":["Beautiful. This is exactly what we're after. \n","\n","Now to fine-tune the base model to our own data, we're going to unfreeze the top 10 layers and continue training our model for another 5 epochs.\n","\n","This means all of the base model's layers except for the last 10 will remain frozen and untrainable. And the weights in the remaining unfrozen layers will be updated during training.\n","\n","Ideally, we should see the model's performance improve.\n","\n","> 🤔 **Question:** How many layers should you unfreeze when training?\n","\n","There's no set rule for this. You could unfreeze every layer in the pretrained model or you could try unfreezing one layer at a time. Best to experiment with different amounts of unfreezing and fine-tuning to see what happens. Generally, the less data you have, the less layers you want to unfreeze and the more gradually you want to fine-tune.\n","\n","> 📖 **Resource:** The [ULMFiT (Universal Language Model Fine-tuning for Text Classification) paper](https://arxiv.org/abs/1801.06146) has a great series of experiments on fine-tuning models.\n","\n","To begin fine-tuning, we'll unfreeze the entire base model by setting its `trainable` attribute to `True`. Then we'll refreeze every layer in the base model except for the last 10 by looping through them and setting their `trainable` attribute to `False`. Finally, we'll recompile the model."],"metadata":{"id":"N0GkbiBQazq6"}},{"cell_type":"code","source":["base_model.trainable = True\n","\n","#Freeze all layers except for the top 10\n","for layer in base_model.layers[:-10]:\n","  layer.trainable = False\n","\n","#Recompile the model (always recompile after any adjustments to a model)\n","model_2.compile(loss = \"categorical_crossentropy\",\n","                optimizer = tf.keras.optimizers.Adam(lr = 0.0001),\n","                metrics = [\"accuracy\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oVdQjJGua-0G","executionInfo":{"status":"ok","timestamp":1641929169138,"user_tz":300,"elapsed":306,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"eabbd4b4-b870-4ffa-9cd7-15394b23d50a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["#Check again which layers are trainable\n","for layer_number, layer in enumerate(base_model.layers):\n","  print(layer_number, layer.name, layer.trainable)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hTltqf-mbchs","executionInfo":{"status":"ok","timestamp":1641929169139,"user_tz":300,"elapsed":11,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"505b47b0-c3c9-43dc-a226-367d9cec63cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 input_5 False\n","1 rescaling_4 False\n","2 normalization_4 False\n","3 stem_conv_pad False\n","4 stem_conv False\n","5 stem_bn False\n","6 stem_activation False\n","7 block1a_dwconv False\n","8 block1a_bn False\n","9 block1a_activation False\n","10 block1a_se_squeeze False\n","11 block1a_se_reshape False\n","12 block1a_se_reduce False\n","13 block1a_se_expand False\n","14 block1a_se_excite False\n","15 block1a_project_conv False\n","16 block1a_project_bn False\n","17 block2a_expand_conv False\n","18 block2a_expand_bn False\n","19 block2a_expand_activation False\n","20 block2a_dwconv_pad False\n","21 block2a_dwconv False\n","22 block2a_bn False\n","23 block2a_activation False\n","24 block2a_se_squeeze False\n","25 block2a_se_reshape False\n","26 block2a_se_reduce False\n","27 block2a_se_expand False\n","28 block2a_se_excite False\n","29 block2a_project_conv False\n","30 block2a_project_bn False\n","31 block2b_expand_conv False\n","32 block2b_expand_bn False\n","33 block2b_expand_activation False\n","34 block2b_dwconv False\n","35 block2b_bn False\n","36 block2b_activation False\n","37 block2b_se_squeeze False\n","38 block2b_se_reshape False\n","39 block2b_se_reduce False\n","40 block2b_se_expand False\n","41 block2b_se_excite False\n","42 block2b_project_conv False\n","43 block2b_project_bn False\n","44 block2b_drop False\n","45 block2b_add False\n","46 block3a_expand_conv False\n","47 block3a_expand_bn False\n","48 block3a_expand_activation False\n","49 block3a_dwconv_pad False\n","50 block3a_dwconv False\n","51 block3a_bn False\n","52 block3a_activation False\n","53 block3a_se_squeeze False\n","54 block3a_se_reshape False\n","55 block3a_se_reduce False\n","56 block3a_se_expand False\n","57 block3a_se_excite False\n","58 block3a_project_conv False\n","59 block3a_project_bn False\n","60 block3b_expand_conv False\n","61 block3b_expand_bn False\n","62 block3b_expand_activation False\n","63 block3b_dwconv False\n","64 block3b_bn False\n","65 block3b_activation False\n","66 block3b_se_squeeze False\n","67 block3b_se_reshape False\n","68 block3b_se_reduce False\n","69 block3b_se_expand False\n","70 block3b_se_excite False\n","71 block3b_project_conv False\n","72 block3b_project_bn False\n","73 block3b_drop False\n","74 block3b_add False\n","75 block4a_expand_conv False\n","76 block4a_expand_bn False\n","77 block4a_expand_activation False\n","78 block4a_dwconv_pad False\n","79 block4a_dwconv False\n","80 block4a_bn False\n","81 block4a_activation False\n","82 block4a_se_squeeze False\n","83 block4a_se_reshape False\n","84 block4a_se_reduce False\n","85 block4a_se_expand False\n","86 block4a_se_excite False\n","87 block4a_project_conv False\n","88 block4a_project_bn False\n","89 block4b_expand_conv False\n","90 block4b_expand_bn False\n","91 block4b_expand_activation False\n","92 block4b_dwconv False\n","93 block4b_bn False\n","94 block4b_activation False\n","95 block4b_se_squeeze False\n","96 block4b_se_reshape False\n","97 block4b_se_reduce False\n","98 block4b_se_expand False\n","99 block4b_se_excite False\n","100 block4b_project_conv False\n","101 block4b_project_bn False\n","102 block4b_drop False\n","103 block4b_add False\n","104 block4c_expand_conv False\n","105 block4c_expand_bn False\n","106 block4c_expand_activation False\n","107 block4c_dwconv False\n","108 block4c_bn False\n","109 block4c_activation False\n","110 block4c_se_squeeze False\n","111 block4c_se_reshape False\n","112 block4c_se_reduce False\n","113 block4c_se_expand False\n","114 block4c_se_excite False\n","115 block4c_project_conv False\n","116 block4c_project_bn False\n","117 block4c_drop False\n","118 block4c_add False\n","119 block5a_expand_conv False\n","120 block5a_expand_bn False\n","121 block5a_expand_activation False\n","122 block5a_dwconv False\n","123 block5a_bn False\n","124 block5a_activation False\n","125 block5a_se_squeeze False\n","126 block5a_se_reshape False\n","127 block5a_se_reduce False\n","128 block5a_se_expand False\n","129 block5a_se_excite False\n","130 block5a_project_conv False\n","131 block5a_project_bn False\n","132 block5b_expand_conv False\n","133 block5b_expand_bn False\n","134 block5b_expand_activation False\n","135 block5b_dwconv False\n","136 block5b_bn False\n","137 block5b_activation False\n","138 block5b_se_squeeze False\n","139 block5b_se_reshape False\n","140 block5b_se_reduce False\n","141 block5b_se_expand False\n","142 block5b_se_excite False\n","143 block5b_project_conv False\n","144 block5b_project_bn False\n","145 block5b_drop False\n","146 block5b_add False\n","147 block5c_expand_conv False\n","148 block5c_expand_bn False\n","149 block5c_expand_activation False\n","150 block5c_dwconv False\n","151 block5c_bn False\n","152 block5c_activation False\n","153 block5c_se_squeeze False\n","154 block5c_se_reshape False\n","155 block5c_se_reduce False\n","156 block5c_se_expand False\n","157 block5c_se_excite False\n","158 block5c_project_conv False\n","159 block5c_project_bn False\n","160 block5c_drop False\n","161 block5c_add False\n","162 block6a_expand_conv False\n","163 block6a_expand_bn False\n","164 block6a_expand_activation False\n","165 block6a_dwconv_pad False\n","166 block6a_dwconv False\n","167 block6a_bn False\n","168 block6a_activation False\n","169 block6a_se_squeeze False\n","170 block6a_se_reshape False\n","171 block6a_se_reduce False\n","172 block6a_se_expand False\n","173 block6a_se_excite False\n","174 block6a_project_conv False\n","175 block6a_project_bn False\n","176 block6b_expand_conv False\n","177 block6b_expand_bn False\n","178 block6b_expand_activation False\n","179 block6b_dwconv False\n","180 block6b_bn False\n","181 block6b_activation False\n","182 block6b_se_squeeze False\n","183 block6b_se_reshape False\n","184 block6b_se_reduce False\n","185 block6b_se_expand False\n","186 block6b_se_excite False\n","187 block6b_project_conv False\n","188 block6b_project_bn False\n","189 block6b_drop False\n","190 block6b_add False\n","191 block6c_expand_conv False\n","192 block6c_expand_bn False\n","193 block6c_expand_activation False\n","194 block6c_dwconv False\n","195 block6c_bn False\n","196 block6c_activation False\n","197 block6c_se_squeeze False\n","198 block6c_se_reshape False\n","199 block6c_se_reduce False\n","200 block6c_se_expand False\n","201 block6c_se_excite False\n","202 block6c_project_conv False\n","203 block6c_project_bn False\n","204 block6c_drop False\n","205 block6c_add False\n","206 block6d_expand_conv False\n","207 block6d_expand_bn False\n","208 block6d_expand_activation False\n","209 block6d_dwconv False\n","210 block6d_bn False\n","211 block6d_activation False\n","212 block6d_se_squeeze False\n","213 block6d_se_reshape False\n","214 block6d_se_reduce False\n","215 block6d_se_expand False\n","216 block6d_se_excite False\n","217 block6d_project_conv False\n","218 block6d_project_bn False\n","219 block6d_drop False\n","220 block6d_add False\n","221 block7a_expand_conv False\n","222 block7a_expand_bn False\n","223 block7a_expand_activation False\n","224 block7a_dwconv False\n","225 block7a_bn False\n","226 block7a_activation False\n","227 block7a_se_squeeze True\n","228 block7a_se_reshape True\n","229 block7a_se_reduce True\n","230 block7a_se_expand True\n","231 block7a_se_excite True\n","232 block7a_project_conv True\n","233 block7a_project_bn True\n","234 top_conv True\n","235 top_bn True\n","236 top_activation True\n"]}]},{"cell_type":"markdown","source":["Nice! It seems all layers except for the last 10 are frozen and untrainable. This means only the last 10 layers of the base model along with the output layer will have their weights updated during training.\n","\n","> 🤔 **Question:** Why did we recompile the model?\n","\n","Every time you make a change to your models, you need to recompile them.\n","\n","In our case, we're using the exact same loss, optimizer and metrics as before, except this time the learning rate for our optimizer will be 10x smaller than before (0.0001 instead of Adam's default of 0.001).\n","\n","We do this so the model doesn't try to overwrite the existing weights in the pretrained model too fast. In other words, we want learning to be more gradual.\n","\n","> 🔑 **Note:** There's no set standard for setting the learning rate during fine-tuning, though reductions of [2.6x-10x+ seem to work well in practice](https://arxiv.org/abs/1801.06146).\n","\n","How many trainable variables do we have now?"],"metadata":{"id":"fK1HDcmvbpb7"}},{"cell_type":"code","source":["print(len(model_2.trainable_variables))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2AzcsiLHb5GS","executionInfo":{"status":"ok","timestamp":1641929169140,"user_tz":300,"elapsed":10,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"439e4584-bdb2-46f4-87ea-6c707608d13a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12\n"]}]},{"cell_type":"markdown","source":["Wonderful, it looks like our model has a total of 10 trainable variables, the last 10 layers of the base model and the weight and bias parameters of the Dense output layer.\n","\n","Time to fine-tune!\n","\n","We're going to continue training on from where our previous model finished. Since it trained for 5 epochs, our fine-tuning will begin on the epoch 5 and continue for another 5 epochs.\n","\n","To do this, we can use the `initial_epoch` parameter of the [`fit()`](https://keras.rstudio.com/reference/fit.html) method. We'll pass it the last epoch of the previous model's training history (`history_10_percent_data_aug.epoch[-1]`)."],"metadata":{"id":"b8jmAkaFb-WP"}},{"cell_type":"code","source":["#Fine tune for another 5 epochs\n","fine_tune_epochs = initial_epochs + 5\n","\n","#Refit the model (same as model_2 except with more trainable layers)\n","history_fine_10_percent_data_aug = model_2.fit(train_data_10_percent,\n","                                               epochs = fine_tune_epochs,\n","                                               validation_data = test_data,\n","                                               initial_epoch = history_10_percent_data_aug.epoch[-1], # start from previous last epoch\n","                                               validation_steps = int(0.25 * len(test_data)),\n","                                               callbacks = [create_tensorboard_callback(\"transfer_learning\", \"10_percent_fine_tune_last_10\")]) # name experiment appropriately"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"heoTxrAxcFwZ","executionInfo":{"status":"ok","timestamp":1641929240712,"user_tz":300,"elapsed":71577,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"9d9930b6-ca25-4325-b55e-d8b0093b0a47"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to: transfer_learning/10_percent_fine_tune_last_10/20220111-192608\n","Epoch 5/10\n","24/24 [==============================] - 20s 496ms/step - loss: 0.6852 - accuracy: 0.7973 - val_loss: 0.5621 - val_accuracy: 0.8043\n","Epoch 6/10\n","24/24 [==============================] - 9s 374ms/step - loss: 0.5595 - accuracy: 0.8387 - val_loss: 0.5532 - val_accuracy: 0.8010\n","Epoch 7/10\n","24/24 [==============================] - 9s 350ms/step - loss: 0.5059 - accuracy: 0.8480 - val_loss: 0.5122 - val_accuracy: 0.8191\n","Epoch 8/10\n","24/24 [==============================] - 9s 341ms/step - loss: 0.4459 - accuracy: 0.8747 - val_loss: 0.5144 - val_accuracy: 0.8257\n","Epoch 9/10\n","24/24 [==============================] - 9s 359ms/step - loss: 0.4117 - accuracy: 0.8680 - val_loss: 0.5075 - val_accuracy: 0.8289\n","Epoch 10/10\n","24/24 [==============================] - 9s 359ms/step - loss: 0.3968 - accuracy: 0.8947 - val_loss: 0.5337 - val_accuracy: 0.8174\n"]}]},{"cell_type":"markdown","source":["> 🔑 **Note:** Fine-tuning usually takes far longer per epoch than feature extraction (due to updating more weights throughout a network).\n","\n","Ho ho, looks like our model has gained a few percentage points of accuracy! Let's evalaute it."],"metadata":{"id":"FJzg6ORacrE5"}},{"cell_type":"code","source":["#Evaluate the model on the test data\n","results_fine_tune_10_percent = model_2.evaluate(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T1vhCo0Lc2_R","executionInfo":{"status":"ok","timestamp":1641929251252,"user_tz":300,"elapsed":10561,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"19fb8c5f-b7f6-4712-f77a-c088714efd2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 127ms/step - loss: 0.5048 - accuracy: 0.8320\n"]}]},{"cell_type":"markdown","source":["Alright, we need a way to evaluate our model's performance before and after fine-tuning. How about we write a function to compare the before and after?"],"metadata":{"id":"x26Dv8Nec7sI"}},{"cell_type":"code","source":["def compare_historys(original_history, new_history, initial_epochs=5):\n","    \"\"\"\n","    Compares two model history objects.\n","    \"\"\"\n","    # Get original history measurements\n","    acc = original_history.history[\"accuracy\"]\n","    loss = original_history.history[\"loss\"]\n","\n","    print(len(acc))\n","\n","    val_acc = original_history.history[\"val_accuracy\"]\n","    val_loss = original_history.history[\"val_loss\"]\n","\n","    # Combine original history with new history\n","    total_acc = acc + new_history.history[\"accuracy\"]\n","    total_loss = loss + new_history.history[\"loss\"]\n","\n","    total_val_acc = val_acc + new_history.history[\"val_accuracy\"]\n","    total_val_loss = val_loss + new_history.history[\"val_loss\"]\n","\n","    print(len(total_acc))\n","    print(total_acc)\n","\n","    # Make plots\n","    plt.figure(figsize=(8, 8))\n","    plt.subplot(2, 1, 1)\n","    plt.plot(total_acc, label='Training Accuracy')\n","    plt.plot(total_val_acc, label='Validation Accuracy')\n","    plt.plot([initial_epochs-1, initial_epochs-1],\n","              plt.ylim(), label='Start Fine Tuning') # reshift plot around epochs\n","    plt.legend(loc='lower right')\n","    plt.title('Training and Validation Accuracy')\n","\n","    plt.subplot(2, 1, 2)\n","    plt.plot(total_loss, label='Training Loss')\n","    plt.plot(total_val_loss, label='Validation Loss')\n","    plt.plot([initial_epochs-1, initial_epochs-1],\n","              plt.ylim(), label='Start Fine Tuning') # reshift plot around epochs\n","    plt.legend(loc='upper right')\n","    plt.title('Training and Validation Loss')\n","    plt.xlabel('epoch')\n","    plt.show()"],"metadata":{"id":"JJLyGEgidDPu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","compare_historys(original_history=history_10_percent_data_aug, \n","                 new_history=history_fine_10_percent_data_aug, \n","                 initial_epochs=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":585},"id":"7XzHRxhMdFbt","executionInfo":{"status":"ok","timestamp":1641929252023,"user_tz":300,"elapsed":790,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"b17d1f5e-b6d5-4e5f-b8fc-9c3383ddb6e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","11\n","[0.3293333351612091, 0.6800000071525574, 0.753333330154419, 0.7906666398048401, 0.7799999713897705, 0.7973333597183228, 0.8386666774749756, 0.8479999899864197, 0.874666690826416, 0.8679999709129333, 0.8946666717529297]\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Model 4: Fine-tuning an existing model all of the data\n","\n","Enough talk about how fine-tuning a model usually works with more data, let's try it out.\n","\n","We'll start by downloading the full version of our 10 food classes dataset."],"metadata":{"id":"oypGBpzVddw8"}},{"cell_type":"code","source":["# Download and unzip 10 classes of data with all images\n","!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_all_data.zip \n","unzip_data(\"10_food_classes_all_data.zip\")\n","\n","# Setup data directories\n","train_dir = \"10_food_classes_all_data/train/\"\n","test_dir = \"10_food_classes_all_data/test/\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D1hBSUuzdpI9","executionInfo":{"status":"ok","timestamp":1641929271448,"user_tz":300,"elapsed":19433,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"d33ae6d0-1b83-4695-f6c2-bda6427118ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2022-01-11 19:27:31--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_all_data.zip\n","Resolving storage.googleapis.com (storage.googleapis.com)... 142.251.5.128, 64.233.166.128, 74.125.133.128, ...\n","Connecting to storage.googleapis.com (storage.googleapis.com)|142.251.5.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 519183241 (495M) [application/zip]\n","Saving to: ‘10_food_classes_all_data.zip.2’\n","\n","10_food_classes_all 100%[===================>] 495.13M  44.0MB/s    in 11s     \n","\n","2022-01-11 19:27:42 (46.4 MB/s) - ‘10_food_classes_all_data.zip.2’ saved [519183241/519183241]\n","\n"]}]},{"cell_type":"code","source":["#How many images are we workign with now?\n","walk_through_dir(\"10_food_classes_all_data\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nDfShVTSeP3z","executionInfo":{"status":"ok","timestamp":1641929271449,"user_tz":300,"elapsed":15,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"dd33350f-546b-4bd1-d1ba-63ab0b5f94d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 2 directories and 0 images in '10_food_classes_all_data'.\n","There are 10 directories and 0 images in '10_food_classes_all_data/test'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/ramen'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/grilled_salmon'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/steak'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/ice_cream'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/fried_rice'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/sushi'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/hamburger'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/chicken_wings'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/chicken_curry'.\n","There are 0 directories and 250 images in '10_food_classes_all_data/test/pizza'.\n","There are 10 directories and 0 images in '10_food_classes_all_data/train'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/ramen'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/grilled_salmon'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/steak'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/ice_cream'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/fried_rice'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/sushi'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/hamburger'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/chicken_wings'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/chicken_curry'.\n","There are 0 directories and 750 images in '10_food_classes_all_data/train/pizza'.\n"]}]},{"cell_type":"code","source":["#Setup data inputs\n","import tensorflow as tf\n","IMG_SIZE = (224, 224)\n","train_data_10_classes_full = tf.keras.preprocessing.image_dataset_from_directory(train_dir,\n","                                                                                 label_mode = \"categorical\",\n","                                                                                 image_size = IMG_SIZE)\n","\n","#we will use the same test_data\n","test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n","                                                                label_mode=\"categorical\",\n","                                                                image_size=IMG_SIZE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yutu1bk4eU7C","executionInfo":{"status":"ok","timestamp":1641929272395,"user_tz":300,"elapsed":954,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"e644e14c-9150-4f0a-adcc-172a7ace1603"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 7500 files belonging to 10 classes.\n","Found 2500 files belonging to 10 classes.\n"]}]},{"cell_type":"code","source":["#Evaluate 10 percent model\n","model_2.evaluate(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qss54y6NenAp","executionInfo":{"status":"ok","timestamp":1641929283382,"user_tz":300,"elapsed":10990,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"d529517a-f9b1-43d1-d9b9-c3798ebd9055"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 129ms/step - loss: 0.5048 - accuracy: 0.8320\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.5048112273216248, 0.8320000171661377]"]},"metadata":{},"execution_count":158}]},{"cell_type":"code","source":["results_fine_tune_10_percent"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hg2aavsxexqA","executionInfo":{"status":"ok","timestamp":1641929283383,"user_tz":300,"elapsed":23,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"31fe5234-d3a8-4c18-949e-f860b33f3147"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.50481116771698, 0.8320000171661377]"]},"metadata":{},"execution_count":159}]},{"cell_type":"markdown","source":["Now we'll rever the model back to the saved weights"],"metadata":{"id":"cXk-TTHvfDAX"}},{"cell_type":"code","source":["#Load model from checkpoint, so we can start from the same stage the 10% model was fine tuned from\n","model_2.load_weights(checkpoint_path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wB8r7T1kfKLK","executionInfo":{"status":"ok","timestamp":1641929284288,"user_tz":300,"elapsed":923,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"690afd30-bf7e-4d18-ab24-5e995aa8c22d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.training.tracking.util.CheckpointLoadStatus at 0x7f361965ded0>"]},"metadata":{},"execution_count":160}]},{"cell_type":"markdown","source":["The results should be the same as `results_10_percent_data_aug`\n","\n","\n"],"metadata":{"id":"wM9Nap0nfz2G"}},{"cell_type":"code","source":["model_2.evaluate(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W6mKLiQnf_Gr","executionInfo":{"status":"ok","timestamp":1641929294645,"user_tz":300,"elapsed":10358,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"4e758dcb-d190-404b-c8b1-70b34239dae0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 128ms/step - loss: 0.7065 - accuracy: 0.8072\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.7065010666847229, 0.807200014591217]"]},"metadata":{},"execution_count":161}]},{"cell_type":"code","source":["results_10_percent_data_aug"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KOFMq6dUgC6n","executionInfo":{"status":"ok","timestamp":1641929294646,"user_tz":300,"elapsed":25,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"f5ec6231-cd1b-4568-9bed-5eae26f01578"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.7065011858940125, 0.807200014591217]"]},"metadata":{},"execution_count":162}]},{"cell_type":"markdown","source":["Alright, the previous steps might seem quite confusing but all we've done is:\n","1. Trained a feature extraction transfer learning model for 5 epochs on 10% of the data (with all base model layers frozen) and saved the model's weights using `ModelCheckpoint`.\n","2. Fine-tuned the same model on the same 10% of the data for a further 5 epochs with the top 10 layers of the base model unfrozen.\n","3. Saved the results and training logs each time.\n","4. Reloaded the model from 1 to do the same steps as 2 but with all of the data.\n","\n","The same steps as 2?\n","\n","Yeah, we're going to fine-tune the last 10 layers of the base model with the full dataset for another 5 epochs but first let's remind ourselves which layers are trainable."],"metadata":{"id":"T5FSTuTggE3m"}},{"cell_type":"code","source":["#Check which layers are tuneable in the whole model\n","for layer_number, layer in enumerate(model_2.layers):\n","  print(layer_number, layer.name, layer.trainable)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_LfZVdnkgJJD","executionInfo":{"status":"ok","timestamp":1641929294646,"user_tz":300,"elapsed":21,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"5f23b743-109a-4b23-f8e5-5d1c5d65b5fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 input_layer True\n","1 data_augmentation True\n","2 efficientnetb0 True\n","3 global_average_pooling_layer True\n","4 output_layer True\n"]}]},{"cell_type":"code","source":["#More specifically\n","for layer_numebr, layer in enumerate(base_model.layers):\n","  print(layer_numebr, layer.name, layer.trainable)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K9j22FhPgUeu","executionInfo":{"status":"ok","timestamp":1641929294848,"user_tz":300,"elapsed":221,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"104c572d-134c-4010-aa99-258445267d9d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 input_5 False\n","1 rescaling_4 False\n","2 normalization_4 False\n","3 stem_conv_pad False\n","4 stem_conv False\n","5 stem_bn False\n","6 stem_activation False\n","7 block1a_dwconv False\n","8 block1a_bn False\n","9 block1a_activation False\n","10 block1a_se_squeeze False\n","11 block1a_se_reshape False\n","12 block1a_se_reduce False\n","13 block1a_se_expand False\n","14 block1a_se_excite False\n","15 block1a_project_conv False\n","16 block1a_project_bn False\n","17 block2a_expand_conv False\n","18 block2a_expand_bn False\n","19 block2a_expand_activation False\n","20 block2a_dwconv_pad False\n","21 block2a_dwconv False\n","22 block2a_bn False\n","23 block2a_activation False\n","24 block2a_se_squeeze False\n","25 block2a_se_reshape False\n","26 block2a_se_reduce False\n","27 block2a_se_expand False\n","28 block2a_se_excite False\n","29 block2a_project_conv False\n","30 block2a_project_bn False\n","31 block2b_expand_conv False\n","32 block2b_expand_bn False\n","33 block2b_expand_activation False\n","34 block2b_dwconv False\n","35 block2b_bn False\n","36 block2b_activation False\n","37 block2b_se_squeeze False\n","38 block2b_se_reshape False\n","39 block2b_se_reduce False\n","40 block2b_se_expand False\n","41 block2b_se_excite False\n","42 block2b_project_conv False\n","43 block2b_project_bn False\n","44 block2b_drop False\n","45 block2b_add False\n","46 block3a_expand_conv False\n","47 block3a_expand_bn False\n","48 block3a_expand_activation False\n","49 block3a_dwconv_pad False\n","50 block3a_dwconv False\n","51 block3a_bn False\n","52 block3a_activation False\n","53 block3a_se_squeeze False\n","54 block3a_se_reshape False\n","55 block3a_se_reduce False\n","56 block3a_se_expand False\n","57 block3a_se_excite False\n","58 block3a_project_conv False\n","59 block3a_project_bn False\n","60 block3b_expand_conv False\n","61 block3b_expand_bn False\n","62 block3b_expand_activation False\n","63 block3b_dwconv False\n","64 block3b_bn False\n","65 block3b_activation False\n","66 block3b_se_squeeze False\n","67 block3b_se_reshape False\n","68 block3b_se_reduce False\n","69 block3b_se_expand False\n","70 block3b_se_excite False\n","71 block3b_project_conv False\n","72 block3b_project_bn False\n","73 block3b_drop False\n","74 block3b_add False\n","75 block4a_expand_conv False\n","76 block4a_expand_bn False\n","77 block4a_expand_activation False\n","78 block4a_dwconv_pad False\n","79 block4a_dwconv False\n","80 block4a_bn False\n","81 block4a_activation False\n","82 block4a_se_squeeze False\n","83 block4a_se_reshape False\n","84 block4a_se_reduce False\n","85 block4a_se_expand False\n","86 block4a_se_excite False\n","87 block4a_project_conv False\n","88 block4a_project_bn False\n","89 block4b_expand_conv False\n","90 block4b_expand_bn False\n","91 block4b_expand_activation False\n","92 block4b_dwconv False\n","93 block4b_bn False\n","94 block4b_activation False\n","95 block4b_se_squeeze False\n","96 block4b_se_reshape False\n","97 block4b_se_reduce False\n","98 block4b_se_expand False\n","99 block4b_se_excite False\n","100 block4b_project_conv False\n","101 block4b_project_bn False\n","102 block4b_drop False\n","103 block4b_add False\n","104 block4c_expand_conv False\n","105 block4c_expand_bn False\n","106 block4c_expand_activation False\n","107 block4c_dwconv False\n","108 block4c_bn False\n","109 block4c_activation False\n","110 block4c_se_squeeze False\n","111 block4c_se_reshape False\n","112 block4c_se_reduce False\n","113 block4c_se_expand False\n","114 block4c_se_excite False\n","115 block4c_project_conv False\n","116 block4c_project_bn False\n","117 block4c_drop False\n","118 block4c_add False\n","119 block5a_expand_conv False\n","120 block5a_expand_bn False\n","121 block5a_expand_activation False\n","122 block5a_dwconv False\n","123 block5a_bn False\n","124 block5a_activation False\n","125 block5a_se_squeeze False\n","126 block5a_se_reshape False\n","127 block5a_se_reduce False\n","128 block5a_se_expand False\n","129 block5a_se_excite False\n","130 block5a_project_conv False\n","131 block5a_project_bn False\n","132 block5b_expand_conv False\n","133 block5b_expand_bn False\n","134 block5b_expand_activation False\n","135 block5b_dwconv False\n","136 block5b_bn False\n","137 block5b_activation False\n","138 block5b_se_squeeze False\n","139 block5b_se_reshape False\n","140 block5b_se_reduce False\n","141 block5b_se_expand False\n","142 block5b_se_excite False\n","143 block5b_project_conv False\n","144 block5b_project_bn False\n","145 block5b_drop False\n","146 block5b_add False\n","147 block5c_expand_conv False\n","148 block5c_expand_bn False\n","149 block5c_expand_activation False\n","150 block5c_dwconv False\n","151 block5c_bn False\n","152 block5c_activation False\n","153 block5c_se_squeeze False\n","154 block5c_se_reshape False\n","155 block5c_se_reduce False\n","156 block5c_se_expand False\n","157 block5c_se_excite False\n","158 block5c_project_conv False\n","159 block5c_project_bn False\n","160 block5c_drop False\n","161 block5c_add False\n","162 block6a_expand_conv False\n","163 block6a_expand_bn False\n","164 block6a_expand_activation False\n","165 block6a_dwconv_pad False\n","166 block6a_dwconv False\n","167 block6a_bn False\n","168 block6a_activation False\n","169 block6a_se_squeeze False\n","170 block6a_se_reshape False\n","171 block6a_se_reduce False\n","172 block6a_se_expand False\n","173 block6a_se_excite False\n","174 block6a_project_conv False\n","175 block6a_project_bn False\n","176 block6b_expand_conv False\n","177 block6b_expand_bn False\n","178 block6b_expand_activation False\n","179 block6b_dwconv False\n","180 block6b_bn False\n","181 block6b_activation False\n","182 block6b_se_squeeze False\n","183 block6b_se_reshape False\n","184 block6b_se_reduce False\n","185 block6b_se_expand False\n","186 block6b_se_excite False\n","187 block6b_project_conv False\n","188 block6b_project_bn False\n","189 block6b_drop False\n","190 block6b_add False\n","191 block6c_expand_conv False\n","192 block6c_expand_bn False\n","193 block6c_expand_activation False\n","194 block6c_dwconv False\n","195 block6c_bn False\n","196 block6c_activation False\n","197 block6c_se_squeeze False\n","198 block6c_se_reshape False\n","199 block6c_se_reduce False\n","200 block6c_se_expand False\n","201 block6c_se_excite False\n","202 block6c_project_conv False\n","203 block6c_project_bn False\n","204 block6c_drop False\n","205 block6c_add False\n","206 block6d_expand_conv False\n","207 block6d_expand_bn False\n","208 block6d_expand_activation False\n","209 block6d_dwconv False\n","210 block6d_bn False\n","211 block6d_activation False\n","212 block6d_se_squeeze False\n","213 block6d_se_reshape False\n","214 block6d_se_reduce False\n","215 block6d_se_expand False\n","216 block6d_se_excite False\n","217 block6d_project_conv False\n","218 block6d_project_bn False\n","219 block6d_drop False\n","220 block6d_add False\n","221 block7a_expand_conv False\n","222 block7a_expand_bn False\n","223 block7a_expand_activation False\n","224 block7a_dwconv False\n","225 block7a_bn False\n","226 block7a_activation False\n","227 block7a_se_squeeze True\n","228 block7a_se_reshape True\n","229 block7a_se_reduce True\n","230 block7a_se_expand True\n","231 block7a_se_excite True\n","232 block7a_project_conv True\n","233 block7a_project_bn True\n","234 top_conv True\n","235 top_bn True\n","236 top_activation True\n"]}]},{"cell_type":"code","source":["#Compile\n","model_2.compile(loss = \"categorical_crossentropy\",\n","                optimizer = tf.keras.optimizers.Adam(lr=0.001), # divide learning rate by 10 for fine-tuning\n","                metrics = [\"accuracy\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bhJOmcVjgk19","executionInfo":{"status":"ok","timestamp":1641929294848,"user_tz":300,"elapsed":7,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"08a9c7ee-584f-4ed5-e6a6-aeb01858a37c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["# Continue to train and fine-tune the model to our data\n","fine_tune_epochs = initial_epochs + 5\n","\n","history_fine_10_classes_full = model_2.fit(train_data_10_classes_full,\n","                                           epochs=fine_tune_epochs,\n","                                           initial_epoch=history_10_percent_data_aug.epoch[-1],\n","                                           validation_data=test_data,\n","                                           validation_steps=int(0.25 * len(test_data)),\n","                                           callbacks=[create_tensorboard_callback(\"transfer_learning\", \"full_10_classes_fine_tune_last_10\")])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"awyO2KBdhKjP","executionInfo":{"status":"ok","timestamp":1641929664282,"user_tz":300,"elapsed":369441,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"7a7fab4c-8295-4e38-ce09-767fcd197913"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Saving TensorBoard log files to: transfer_learning/full_10_classes_fine_tune_last_10/20220111-192814\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 5/10\n","235/235 [==============================] - 61s 227ms/step - loss: 0.7015 - accuracy: 0.7775 - val_loss: 0.3709 - val_accuracy: 0.8882\n","Epoch 6/10\n","235/235 [==============================] - 52s 218ms/step - loss: 0.4858 - accuracy: 0.8460 - val_loss: 0.3656 - val_accuracy: 0.8684\n","Epoch 7/10\n","235/235 [==============================] - 47s 197ms/step - loss: 0.3944 - accuracy: 0.8728 - val_loss: 0.3696 - val_accuracy: 0.8701\n","Epoch 8/10\n","235/235 [==============================] - 52s 217ms/step - loss: 0.3346 - accuracy: 0.8889 - val_loss: 0.3877 - val_accuracy: 0.8717\n","Epoch 9/10\n","235/235 [==============================] - 47s 196ms/step - loss: 0.2770 - accuracy: 0.9088 - val_loss: 0.3307 - val_accuracy: 0.8980\n","Epoch 10/10\n","235/235 [==============================] - 46s 193ms/step - loss: 0.2574 - accuracy: 0.9151 - val_loss: 0.2751 - val_accuracy: 0.8997\n"]}]},{"cell_type":"markdown","source":["> 🔑 **Note:** Training took longer per epoch, but that makes sense because we're using 10x more training data than before.\n","\n","Let's evaluate on all of the test data."],"metadata":{"id":"Z-GIz0_QhuH-"}},{"cell_type":"code","source":["results_fine_tune_full_data = model_2.evaluate(test_data)\n","results_fine_tune_full_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FAe6Rccjh0wX","executionInfo":{"status":"ok","timestamp":1641929674930,"user_tz":300,"elapsed":10670,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"ed770286-bd36-45c7-8f3f-a1771b37b5ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["79/79 [==============================] - 11s 128ms/step - loss: 0.2934 - accuracy: 0.9016\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.2934275269508362, 0.9016000032424927]"]},"metadata":{},"execution_count":167}]},{"cell_type":"code","source":["#Looking at graphs\n","compare_historys(original_history = history_10_percent_data_aug,\n","                 new_history = history_fine_10_classes_full,\n","                 initial_epochs = 5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":585},"id":"3H2-CD12h6f1","executionInfo":{"status":"ok","timestamp":1641929675522,"user_tz":300,"elapsed":613,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"5aeb307b-9a41-4437-e6cc-9b2d6bf90b0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","11\n","[0.3293333351612091, 0.6800000071525574, 0.753333330154419, 0.7906666398048401, 0.7799999713897705, 0.7774666547775269, 0.8460000157356262, 0.8727999925613403, 0.8889333605766296, 0.9088000059127808, 0.915066659450531]\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Viewing our experiment data on TensorBoard\n","\n","Right now our experimental results are scattered all throughout our notebook. If we want to share them with someone, they'd be getting a bunch of different graphs and metrics... not a fun time.\n","\n","But guess what?\n","\n","Thanks to the TensorBoard callback we made with our helper function `create_tensorflow_callback()`, we've been tracking our modelling experiments the whole time.\n","\n","How about we upload them to TensorBoard.dev and check them out?\n","\n","We can do with the `tensorboard dev upload` command and passing it the directory where our experiments have been logged.\n","\n","> 🔑 **Note:** Remember, whatever you upload to TensorBoard.dev becomes public. If there are training logs you don't want to share, don't upload them."],"metadata":{"id":"RkmqeDXqj4wT"}},{"cell_type":"code","source":["#View tensorboard logs of transfer leraning modelling experiments (should be 4 models)\n","#Upload TensorBoard dev records\n","import tensorboard\n","!tensorboard dev upload --logdir ./transfer_learning \\\n","  --name \"Transfer learning experiments\" \\\n","  --description \"A series of different transfer learning experiments with varying amounts of data and fine-tuning\" \\\n","  --one_shot # exits the uploader when upload has finished"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8VZmnOgKkD5O","executionInfo":{"status":"ok","timestamp":1641929695248,"user_tz":300,"elapsed":19731,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"c137faad-c2b6-4ca8-9a7c-8375dbb0bc3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","New experiment created. View your TensorBoard at: https://tensorboard.dev/experiment/lAhoSgIQSvOJ5orQPX8jYQ/\n","\n","\u001b[1m[2022-01-11T19:34:39]\u001b[0m Started scanning logdir.\n","\u001b[1m[2022-01-11T19:34:54]\u001b[0m Total uploaded: 336 scalars, 0 tensors, 12 binary objects (9.6 MB)\n","\u001b[1m[2022-01-11T19:34:54]\u001b[0m Done scanning logdir.\n","\n","\n","Done. View your TensorBoard at https://tensorboard.dev/experiment/lAhoSgIQSvOJ5orQPX8jYQ/\n"]}]},{"cell_type":"markdown","source":["Once we've uploaded the results to TensorBoard.dev we get a shareable link we can use to view and compare our experiments and share our results with others if needed.\n","\n","You can view the original versions of the experiments we ran in this notebook here: https://tensorboard.dev/experiment/2O76kw3PQbKl0lByfg5B4w/\n","\n","> 🤔 **Question:** Which model performed the best? Why do you think this is? How did fine-tuning go?\n","\n","To find all of your previous TensorBoard.dev experiments using the command `tensorboard dev list`."],"metadata":{"id":"TjorFFNLkQyy"}},{"cell_type":"code","source":["#View previous experiments\n","!tensorboard dev list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_z38vq7MkcSj","executionInfo":{"status":"ok","timestamp":1641929708526,"user_tz":300,"elapsed":13299,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"14c07623-299c-4f6e-f21f-2f7c6ad6bfa8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["https://tensorboard.dev/experiment/lAhoSgIQSvOJ5orQPX8jYQ/\n","\tName                 Transfer learning experiments\n","\tDescription          A series of different transfer learning experiments with varying amounts of data and fine-tuning\n","\tId                   lAhoSgIQSvOJ5orQPX8jYQ\n","\tCreated              2022-01-11 19:34:39 (28 seconds ago)\n","\tUpdated              2022-01-11 19:34:54 (13 seconds ago)\n","\tRuns                 23\n","\tTags                 5\n","\tScalars              336\n","\tTensor bytes         0\n","\tBinary object bytes  10072609\n","https://tensorboard.dev/experiment/xjgkT8nWSMiqgYNjjhVG1g/\n","\tName                 EfficientNet80 vs ResNet50V2\n","\tDescription          Comparing two different TF Hub feature extraction models architectures using 10% of training images\n","\tId                   xjgkT8nWSMiqgYNjjhVG1g\n","\tCreated              2022-01-10 21:17:26 (22 hours ago)\n","\tUpdated              2022-01-10 21:17:29 (22 hours ago)\n","\tRuns                 6\n","\tTags                 5\n","\tScalars              90\n","\tTensor bytes         0\n","\tBinary object bytes  7764780\n","Total: 2 experiment(s)\n"]}]},{"cell_type":"code","source":["# Remove previous experiments\n","!tensorboard dev delete --experiment_id 6mVBQyx5Qze8gpE0q2omxw"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tcEgYH5Lkf1g","executionInfo":{"status":"ok","timestamp":1641929712688,"user_tz":300,"elapsed":4169,"user":{"displayName":"Frank Jin","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05518362035827169335"}},"outputId":"8fcf324e-970e-474a-b800-bc27f41a4b38"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["No such experiment 6mVBQyx5Qze8gpE0q2omxw. Either it never existed or it has already been deleted.\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"05- Transfer Learning Pt2","provenance":[],"authorship_tag":"ABX9TyPqGikoWjGghRb13q0ddWLs"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}